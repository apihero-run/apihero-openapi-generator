// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v3/github.json 1`] = `
Map {
  "@types.ts" => "export type ApiHeroEndpoint<Params, ResponseData> = { id: string; [key: string]: string | number };

export type Root = {
  current_user_url: string;
  current_user_authorizations_html_url: string;
  authorizations_url: string;
  code_search_url: string;
  commit_search_url: string;
  emails_url: string;
  emojis_url: string;
  events_url: string;
  feeds_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  hub_url: string;
  issue_search_url: string;
  issues_url: string;
  keys_url: string;
  label_search_url: string;
  notifications_url: string;
  organization_url: string;
  organization_repositories_url: string;
  organization_teams_url: string;
  public_gists_url: string;
  rate_limit_url: string;
  repository_url: string;
  repository_search_url: string;
  current_user_repositories_url: string;
  starred_url: string;
  starred_gists_url: string;
  topic_search_url?: string;
  user_url: string;
  user_organizations_url: string;
  user_repositories_url: string;
  user_search_url: string;
};

/**
 * Simple User
 */
export type NullableSimpleUser = {
  name?: string;
  email?: string;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type Integration = {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;

  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: NullableSimpleUser;

  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;

  /**
   * The set of permissions for the GitHub app
   */
  permissions: Record<string, string>;

  /**
   * The list of events for the GitHub app
   */
  events: Array<string>;

  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
};

/**
 * Basic Error
 */
export type BasicError = {
  message?: string;
  documentation_url?: string;
  url?: string;
  status?: string;
};

/**
 * Validation Error Simple
 */
export type ValidationErrorSimple = {
  message: string;
  documentation_url: string;
  errors?: Array<string>;
};

/**
 * The URL to which the payloads will be delivered.
 */
export type WebhookConfigUrl = string;

/**
 * The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`.
 */
export type WebhookConfigContentType = string;

/**
 * If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 */
export type WebhookConfigSecret = string;

export type WebhookConfigInsecureSsl = string | number;

/**
 * Configuration object of the webhook
 */
export type WebhookConfig = {
  url?: WebhookConfigUrl;
  content_type?: WebhookConfigContentType;
  secret?: WebhookConfigSecret;
  insecure_ssl?: WebhookConfigInsecureSsl;
};

/**
 * Delivery made by a webhook, without request and response information.
 */
export type HookDeliveryItem = {
  /**
   * Unique identifier of the webhook delivery.
   */
  id: number;

  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   */
  guid: string;

  /**
   * Time when the webhook delivery occurred.
   */
  delivered_at: string;

  /**
   * Whether the webhook delivery is a redelivery.
   */
  redelivery: boolean;

  /**
   * Time spent delivering.
   */
  duration: number;

  /**
   * Describes the response returned after attempting the delivery.
   */
  status: string;

  /**
   * Status code received when delivery was made.
   */
  status_code: number;

  /**
   * The event that triggered the delivery.
   */
  event: string;

  /**
   * The type of activity for the event that triggered the delivery.
   */
  action: string;

  /**
   * The id of the GitHub App installation associated with this event.
   */
  installation_id: number;

  /**
   * The id of the repository associated with this event.
   */
  repository_id: number;
};

/**
 * Scim Error
 */
export type ScimError = {
  message?: string;
  documentation_url?: string;
  detail?: string;
  status?: number;
  scimType?: string;
  schemas?: Array<string>;
};

/**
 * Validation Error
 */
export type ValidationError = {
  message: string;
  documentation_url: string;
  errors?: Array<{
    resource?: string;

    field?: string;

    message?: string;

    code: string;

    index?: number;

    value?: string | null | number | null | Array<string> | null;
  }>;
};

/**
 * Delivery made by a webhook.
 */
export type HookDelivery = {
  /**
   * Unique identifier of the delivery.
   */
  id: number;

  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   */
  guid: string;

  /**
   * Time when the delivery was delivered.
   */
  delivered_at: string;

  /**
   * Whether the delivery is a redelivery.
   */
  redelivery: boolean;

  /**
   * Time spent delivering.
   */
  duration: number;

  /**
   * Description of the status of the attempted delivery
   */
  status: string;

  /**
   * Status code received when delivery was made.
   */
  status_code: number;

  /**
   * The event that triggered the delivery.
   */
  event: string;

  /**
   * The type of activity for the event that triggered the delivery.
   */
  action: string;

  /**
   * The id of the GitHub App installation associated with this event.
   */
  installation_id: number;

  /**
   * The id of the repository associated with this event.
   */
  repository_id: number;

  /**
   * The URL target of the delivery.
   */
  url?: string;
  request: {
    /**
     * The request headers sent with the webhook delivery.
     */
    headers: {};

    /**
     * The webhook payload.
     */
    payload: {};
  };
  response: {
    /**
     * The response headers received when the delivery was made.
     */
    headers: {};

    /**
     * The response payload received.
     */
    payload: string;
  };
};

/**
 * Simple User
 */
export type SimpleUser = {
  name?: string;
  email?: string;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
};

/**
 * An enterprise account
 */
export type Enterprise = {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;

  /**
   * The enterprise's website URL.
   */
  website_url?: string;

  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;

  /**
   * The name of the enterprise.
   */
  name: string;

  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
};

/**
 * The permissions granted to the user-to-server access token.
 */
export type AppPermissions = {
  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
   */
  actions?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
   */
  administration?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for checks on code.
   */
  checks?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
   */
  contents?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for deployments and deployment statuses.
   */
  deployments?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for managing repository environments.
   */
  environments?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
   */
  issues?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
   */
  metadata?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for packages published to GitHub Packages.
   */
  packages?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
   */
  pages?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
   */
  pull_requests?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository.
   */
  repository_hooks?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards.
   */
  repository_projects?: \\"read\\" | \\"write\\" | \\"admin\\";

  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts.
   */
  secret_scanning_alerts?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage repository secrets.
   */
  secrets?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts.
   */
  security_events?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage just a single file.
   */
  single_file?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for commit statuses.
   */
  statuses?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage Dependabot alerts.
   */
  vulnerability_alerts?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files.
   */
  workflows?: \\"write\\";

  /**
   * The level of permission to grant the access token for organization teams and members.
   */
  members?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage access to an organization.
   */
  organization_administration?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization.
   */
  organization_hooks?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for viewing an organization's plan.
   */
  organization_plan?: \\"read\\";

  /**
   * The level of permission to grant the access token to manage organization projects and projects beta (where available).
   */
  organization_projects?: \\"read\\" | \\"write\\" | \\"admin\\";

  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages.
   */
  organization_packages?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage organization secrets.
   */
  organization_secrets?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
   */
  organization_self_hosted_runners?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization.
   */
  organization_user_blocking?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage team discussions and related comments.
   */
  team_discussions?: \\"read\\" | \\"write\\";
};

/**
 * Installation
 */
export type Installation = {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;

  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: \\"all\\" | \\"selected\\";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;

  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: AppPermissions;
  events: Array<string>;
  created_at: string;
  updated_at: string;
  single_file_name: string;
  has_multiple_single_files?: boolean;
  single_file_paths?: Array<string>;
  app_slug: string;
  suspended_by: NullableSimpleUser;
  suspended_at: string;
  contact_email?: string;
};

/**
 * License Simple
 */
export type NullableLicenseSimple = {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
};

/**
 * A git repository
 */
export type Repository = {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;

  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: NullableLicenseSimple;
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;

    pull: boolean;

    triage?: boolean;

    push: boolean;

    maintain?: boolean;
  };
  owner: SimpleUser;

  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;

  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  topics?: Array<string>;

  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;

  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;

  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;

  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;

  /**
   * Whether the repository is archived.
   */
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;

  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;

    node_id?: string;

    name?: string;

    full_name?: string;

    owner?: {
      login?: string;

      id?: number;

      node_id?: string;

      avatar_url?: string;

      gravatar_id?: string;

      url?: string;

      html_url?: string;

      followers_url?: string;

      following_url?: string;

      gists_url?: string;

      starred_url?: string;

      subscriptions_url?: string;

      organizations_url?: string;

      repos_url?: string;

      events_url?: string;

      received_events_url?: string;

      type?: string;

      site_admin?: boolean;
    };

    private?: boolean;

    html_url?: string;

    description?: string;

    fork?: boolean;

    url?: string;

    archive_url?: string;

    assignees_url?: string;

    blobs_url?: string;

    branches_url?: string;

    collaborators_url?: string;

    comments_url?: string;

    commits_url?: string;

    compare_url?: string;

    contents_url?: string;

    contributors_url?: string;

    deployments_url?: string;

    downloads_url?: string;

    events_url?: string;

    forks_url?: string;

    git_commits_url?: string;

    git_refs_url?: string;

    git_tags_url?: string;

    git_url?: string;

    issue_comment_url?: string;

    issue_events_url?: string;

    issues_url?: string;

    keys_url?: string;

    labels_url?: string;

    languages_url?: string;

    merges_url?: string;

    milestones_url?: string;

    notifications_url?: string;

    pulls_url?: string;

    releases_url?: string;

    ssh_url?: string;

    stargazers_url?: string;

    statuses_url?: string;

    subscribers_url?: string;

    subscription_url?: string;

    tags_url?: string;

    teams_url?: string;

    trees_url?: string;

    clone_url?: string;

    mirror_url?: string;

    hooks_url?: string;

    svn_url?: string;

    homepage?: string;

    language?: string;

    forks_count?: number;

    stargazers_count?: number;

    watchers_count?: number;

    size?: number;

    default_branch?: string;

    open_issues_count?: number;

    is_template?: boolean;

    topics?: Array<string>;

    has_issues?: boolean;

    has_projects?: boolean;

    has_wiki?: boolean;

    has_pages?: boolean;

    has_downloads?: boolean;

    archived?: boolean;

    disabled?: boolean;

    visibility?: string;

    pushed_at?: string;

    created_at?: string;

    updated_at?: string;

    permissions?: {
      admin?: boolean;

      maintain?: boolean;

      push?: boolean;

      triage?: boolean;

      pull?: boolean;
    };

    allow_rebase_merge?: boolean;

    temp_clone_token?: string;

    allow_squash_merge?: boolean;

    allow_auto_merge?: boolean;

    delete_branch_on_merge?: boolean;

    allow_update_branch?: boolean;

    use_squash_pr_title_as_default?: boolean;

    allow_merge_commit?: boolean;

    subscribers_count?: number;

    network_count?: number;
  };
  temp_clone_token?: string;

  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;

  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;

  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;

  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;

  /**
   * Whether a squash merge commit can use the pull request title as default.
   */
  use_squash_pr_title_as_default?: boolean;

  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;

  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  starred_at?: string;
};

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
export type InstallationToken = {
  token: string;
  expires_at: string;
  permissions?: AppPermissions;
  repository_selection?: \\"all\\" | \\"selected\\";
  repositories?: Array<Repository>;
  single_file?: string;
  has_multiple_single_files?: boolean;
  single_file_paths?: Array<string>;
};

/**
 * The authorization associated with an OAuth Access.
 */
export type ApplicationGrant = {
  id: number;
  url: string;
  app: {
    client_id: string;

    name: string;

    url: string;
  };
  created_at: string;
  updated_at: string;
  scopes: Array<string>;
  user?: NullableSimpleUser;
};

export type NullableScopedInstallation = {
  permissions: AppPermissions;

  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: \\"all\\" | \\"selected\\";
  single_file_name: string;
  has_multiple_single_files?: boolean;
  single_file_paths?: Array<string>;
  repositories_url: string;
  account: SimpleUser;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export type Authorization = {
  id: number;
  url: string;

  /**
   * A list of scopes that this authorization is in.
   */
  scopes: Array<string>;
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;

    name: string;

    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user?: NullableSimpleUser;
  installation?: NullableScopedInstallation;
  expires_at: string;
};

/**
 * Code Of Conduct
 */
export type CodeOfConduct = {
  key: string;
  name: string;
  url: string;
  body?: string;
  html_url: string;
};

/**
 * Response of S4 Proxy endpoint that provides GHES statistics
 */
export type ServerStatistics = {};

export type ActionsCacheUsageOrgEnterprise = {
  /**
   * The count of active caches across all repositories of an enterprise or an organization.
   */
  total_active_caches_count: number;

  /**
   * The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
   */
  total_active_caches_size_in_bytes: number;
};

export type ActionsOidcCustomIssuerPolicyForEnterprise = {
  /**
   * Whether the enterprise customer requested a custom issuer URL.
   */
  include_enterprise_slug?: boolean;
};

/**
 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
 */
export type EnabledOrganizations = \\"all\\" | \\"none\\" | \\"selected\\";

/**
 * The permissions policy that controls the actions and reusable workflows that are allowed to run.
 */
export type AllowedActions = \\"all\\" | \\"local_only\\" | \\"selected\\";

/**
 * The API URL to use to get or set the actions and reusable workflows that are allowed to run, when \`allowed_actions\` is set to \`selected\`.
 */
export type SelectedActionsUrl = string;

export type ActionsEnterprisePermissions = {
  enabled_organizations: EnabledOrganizations;

  /**
   * The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when \`enabled_organizations\` is set to \`selected\`.
   */
  selected_organizations_url?: string;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};

/**
 * Organization Simple
 */
export type OrganizationSimple = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};

export type SelectedActions = {
  /**
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the \`actions\` organization.
   */
  github_owned_allowed?: boolean;

  /**
   * Whether actions from GitHub Marketplace verified creators are allowed. Set to \`true\` to allow all actions by GitHub Marketplace verified creators.
   */
  verified_allowed?: boolean;

  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, \`monalisa/octocat@*\`, \`monalisa/octocat@v2\`, \`monalisa/*\`.\\"
   */
  patterns_allowed?: Array<string>;
};

/**
 * The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
 */
export type ActionsDefaultWorkflowPermissions = \\"read\\" | \\"write\\";

/**
 * Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
 */
export type ActionsCanApprovePullRequestReviews = boolean;

export type ActionsGetDefaultWorkflowPermissions = {
  default_workflow_permissions: ActionsDefaultWorkflowPermissions;
  can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews;
};

export type ActionsSetDefaultWorkflowPermissions = {
  default_workflow_permissions?: ActionsDefaultWorkflowPermissions;
  can_approve_pull_request_reviews?: ActionsCanApprovePullRequestReviews;
};

export type RunnerGroupsEnterprise = {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_organizations_url?: string;
  runners_url: string;
  allows_public_repositories: boolean;

  /**
   * If \`true\`, the \`restricted_to_workflows\` and \`selected_workflows\` fields cannot be modified.
   */
  workflow_restrictions_read_only?: boolean;

  /**
   * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
   */
  restricted_to_workflows?: boolean;

  /**
   * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
   */
  selected_workflows?: Array<string>;
};

/**
 * A label for a self hosted runner
 */
export type RunnerLabel = {
  /**
   * Unique identifier of the label.
   */
  id?: number;

  /**
   * Name of the label.
   */
  name: string;

  /**
   * The type of label. Read-only labels are applied automatically when the runner is configured.
   */
  type?: \\"read-only\\" | \\"custom\\";
};

/**
 * A self hosted runner
 */
export type Runner = {
  /**
   * The id of the runner.
   */
  id: number;

  /**
   * The name of the runner.
   */
  name: string;

  /**
   * The Operating System of the runner.
   */
  os: string;

  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: Array<RunnerLabel>;
};

/**
 * Runner Application
 */
export type RunnerApplication = {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;

  /**
   * A short lived bearer token used to download the runner, if needed.
   */
  temp_download_token?: string;
  sha256_checksum?: string;
};

/**
 * Authentication Token
 */
export type AuthenticationToken = {
  /**
   * The token used for authentication
   */
  token: string;

  /**
   * The time this token expires
   */
  expires_at: string;
  permissions?: {};

  /**
   * The repositories this token has access to
   */
  repositories?: Array<Repository>;
  single_file?: string;

  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: \\"all\\" | \\"selected\\";
};

export type AuditLogEvent = {
  /**
   * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  \\"@timestamp\\"?: number;

  /**
   * The name of the action that was performed, for example \`user.login\` or \`repo.create\`.
   */
  action?: string;
  active?: boolean;
  active_was?: boolean;

  /**
   * The actor who performed the action.
   */
  actor?: string;

  /**
   * The id of the actor who performed the action.
   */
  actor_id?: number;
  actor_location?: {
    country_name?: string;
  };
  data?: {};
  org_id?: number;

  /**
   * The username of the account being blocked.
   */
  blocked_user?: string;
  business?: string;
  config?: Array<{}>;
  config_was?: Array<{}>;
  content_type?: string;

  /**
   * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  created_at?: number;
  deploy_key_fingerprint?: string;

  /**
   * A unique identifier for an audit event.
   */
  _document_id?: string;
  emoji?: string;
  events?: Array<{}>;
  events_were?: Array<{}>;
  explanation?: string;
  fingerprint?: string;
  hook_id?: number;
  limited_availability?: boolean;
  message?: string;
  name?: string;
  old_user?: string;
  openssh_public_key?: string;
  org?: string;
  previous_visibility?: string;
  read_only?: boolean;

  /**
   * The name of the repository.
   */
  repo?: string;

  /**
   * The name of the repository.
   */
  repository?: string;
  repository_public?: boolean;
  target_login?: string;
  team?: string;

  /**
   * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol?: number;

  /**
   * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol_name?: string;

  /**
   * The user that was affected by the action performed (if available).
   */
  user?: string;

  /**
   * The repository visibility, for example \`public\` or \`private\`.
   */
  visibility?: string;
};

/**
 * The name of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolName = string;

/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
export type CodeScanningAnalysisToolGuid = string | null;

/**
 * State of a code scanning alert.
 */
export type CodeScanningAlertState = \\"open\\" | \\"closed\\" | \\"dismissed\\" | \\"fixed\\";

/**
 * The security alert number.
 */
export type AlertNumber = number;

/**
 * The time that the alert was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type AlertCreatedAt = string;

/**
 * The time that the alert was last updated in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type AlertUpdatedAt = string;

/**
 * The REST API URL of the alert resource.
 */
export type AlertUrl = string;

/**
 * The GitHub URL of the alert resource.
 */
export type AlertHtmlUrl = string;

/**
 * The REST API URL for fetching the list of instances for an alert.
 */
export type AlertInstancesUrl = string;

/**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type CodeScanningAlertFixedAt = string | null;

/**
 * The time that the alert was dismissed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type CodeScanningAlertDismissedAt = string | null;

/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
 */
export type CodeScanningAlertDismissedReason =
  | \\"false positive\\"
  | \\"won't fix\\"
  | \\"used in tests\\"
  | null;

/**
 * The dismissal comment associated with the dismissal of the alert.
 */
export type CodeScanningAlertDismissedComment = string | null;

export type CodeScanningAlertRule = {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string;

  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;

  /**
   * The severity of the alert.
   */
  severity?: \\"none\\" | \\"note\\" | \\"warning\\" | \\"error\\";

  /**
   * The security severity of the alert.
   */
  security_severity_level?: \\"low\\" | \\"medium\\" | \\"high\\" | \\"critical\\";

  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;

  /**
   * description of the rule used to detect the alert.
   */
  full_description?: string;

  /**
   * A set of tags applicable for the rule.
   */
  tags?: Array<string>;

  /**
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string;
};

/**
 * The version of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolVersion = string | null;

export type CodeScanningAnalysisTool = {
  name?: CodeScanningAnalysisToolName;
  version?: CodeScanningAnalysisToolVersion;
  guid?: CodeScanningAnalysisToolGuid;
};

/** 
* The full Git reference, formatted as \`refs/heads/<branch name>\`,
\`refs/pull/<number>/merge\`, or \`refs/pull/<number>/head\`.
*/
export type CodeScanningRef = string;

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
export type CodeScanningAnalysisAnalysisKey = string;

/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
export type CodeScanningAlertEnvironment = string;

/**
 * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 */
export type CodeScanningAnalysisCategory = string;

/**
 * Describe a region within a file for the alert.
 */
export type CodeScanningAlertLocation = {
  path?: string;
  start_line?: number;
  end_line?: number;
  start_column?: number;
  end_column?: number;
};

/**
 * A classification of the file. For example to identify it as generated.
 */
export type CodeScanningAlertClassification = \\"source\\" | \\"generated\\" | \\"test\\" | \\"library\\" | null;

export type CodeScanningAlertInstance = {
  ref?: CodeScanningRef;
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  environment?: CodeScanningAlertEnvironment;
  category?: CodeScanningAnalysisCategory;
  state?: CodeScanningAlertState;
  commit_sha?: string;
  message?: {
    text?: string;
  };
  location?: CodeScanningAlertLocation;
  html_url?: string;

  /** 
* Classifications that have been applied to the file that triggered the alert.
For example identifying it as documentation, or a generated file.
*/
  classifications?: Array<CodeScanningAlertClassification>;
};

/**
 * Simple Repository
 */
export type SimpleRepository = {
  /**
   * A unique identifier of the repository.
   */
  id: number;

  /**
   * The GraphQL identifier of the repository.
   */
  node_id: string;

  /**
   * The name of the repository.
   */
  name: string;

  /**
   * The full, globally unique, name of the repository.
   */
  full_name: string;
  owner: SimpleUser;

  /**
   * Whether the repository is private.
   */
  private: boolean;

  /**
   * The URL to view the repository on GitHub.com.
   */
  html_url: string;

  /**
   * The repository description.
   */
  description: string;

  /**
   * Whether the repository is a fork.
   */
  fork: boolean;

  /**
   * The URL to get more information about the repository from the GitHub API.
   */
  url: string;

  /**
   * A template for the API URL to download the repository as an archive.
   */
  archive_url: string;

  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   */
  assignees_url: string;

  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   */
  blobs_url: string;

  /**
   * A template for the API URL to get information about branches in the repository.
   */
  branches_url: string;

  /**
   * A template for the API URL to get information about collaborators of the repository.
   */
  collaborators_url: string;

  /**
   * A template for the API URL to get information about comments on the repository.
   */
  comments_url: string;

  /**
   * A template for the API URL to get information about commits on the repository.
   */
  commits_url: string;

  /**
   * A template for the API URL to compare two commits or refs.
   */
  compare_url: string;

  /**
   * A template for the API URL to get the contents of the repository.
   */
  contents_url: string;

  /**
   * A template for the API URL to list the contributors to the repository.
   */
  contributors_url: string;

  /**
   * The API URL to list the deployments of the repository.
   */
  deployments_url: string;

  /**
   * The API URL to list the downloads on the repository.
   */
  downloads_url: string;

  /**
   * The API URL to list the events of the repository.
   */
  events_url: string;

  /**
   * The API URL to list the forks of the repository.
   */
  forks_url: string;

  /**
   * A template for the API URL to get information about Git commits of the repository.
   */
  git_commits_url: string;

  /**
   * A template for the API URL to get information about Git refs of the repository.
   */
  git_refs_url: string;

  /**
   * A template for the API URL to get information about Git tags of the repository.
   */
  git_tags_url: string;

  /**
   * A template for the API URL to get information about issue comments on the repository.
   */
  issue_comment_url: string;

  /**
   * A template for the API URL to get information about issue events on the repository.
   */
  issue_events_url: string;

  /**
   * A template for the API URL to get information about issues on the repository.
   */
  issues_url: string;

  /**
   * A template for the API URL to get information about deploy keys on the repository.
   */
  keys_url: string;

  /**
   * A template for the API URL to get information about labels of the repository.
   */
  labels_url: string;

  /**
   * The API URL to get information about the languages of the repository.
   */
  languages_url: string;

  /**
   * The API URL to merge branches in the repository.
   */
  merges_url: string;

  /**
   * A template for the API URL to get information about milestones of the repository.
   */
  milestones_url: string;

  /**
   * A template for the API URL to get information about notifications on the repository.
   */
  notifications_url: string;

  /**
   * A template for the API URL to get information about pull requests on the repository.
   */
  pulls_url: string;

  /**
   * A template for the API URL to get information about releases on the repository.
   */
  releases_url: string;

  /**
   * The API URL to list the stargazers on the repository.
   */
  stargazers_url: string;

  /**
   * A template for the API URL to get information about statuses of a commit.
   */
  statuses_url: string;

  /**
   * The API URL to list the subscribers on the repository.
   */
  subscribers_url: string;

  /**
   * The API URL to subscribe to notifications for this repository.
   */
  subscription_url: string;

  /**
   * The API URL to get information about tags on the repository.
   */
  tags_url: string;

  /**
   * The API URL to list the teams on the repository.
   */
  teams_url: string;

  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   */
  trees_url: string;

  /**
   * The API URL to list the hooks on the repository.
   */
  hooks_url: string;
};

export type CodeScanningOrganizationAlertItems = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  fixed_at?: CodeScanningAlertFixedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  repository: SimpleRepository;
};

/**
 * The time that the alert was last updated in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type NullableAlertUpdatedAt = string | null;

/**
 * Sets the state of the secret scanning alert. Can be either \`open\` or \`resolved\`. You must provide \`resolution\` when you set the state to \`resolved\`.
 */
export type SecretScanningAlertState = \\"open\\" | \\"resolved\\";

/**
 * **Required when the \`state\` is \`resolved\`.** The reason for resolving the alert.
 */
export type SecretScanningAlertResolution =
  | \\"false_positive\\"
  | \\"wont_fix\\"
  | \\"revoked\\"
  | \\"used_in_tests\\"
  | null;

export type OrganizationSecretScanningAlert = {
  number?: AlertNumber;
  created_at?: AlertCreatedAt;
  updated_at?: NullableAlertUpdatedAt;
  url?: AlertUrl;
  html_url?: AlertHtmlUrl;

  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  state?: SecretScanningAlertState;
  resolution?: SecretScanningAlertResolution;

  /**
   * The time that the alert was resolved in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  resolved_at?: string;
  resolved_by?: NullableSimpleUser;

  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;

  /** 
* User-friendly name for the detected secret, matching the \`secret_type\`.
For a list of built-in patterns, see \\"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\\"
*/
  secret_type_display_name?: string;

  /**
   * The secret that was detected.
   */
  secret?: string;
  repository?: SimpleRepository;

  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean;
  push_protection_bypassed_by?: NullableSimpleUser;

  /**
   * The time that push protection was bypassed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  push_protection_bypassed_at?: string;
};

export type ActionsBillingUsage = {
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;

  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;

  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;

    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS?: number;

    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;

    /**
     * Total minutes used on Ubuntu 4 core runner machines.
     */
    ubuntu_4_core?: number;

    /**
     * Total minutes used on Ubuntu 8 core runner machines.
     */
    ubuntu_8_core?: number;

    /**
     * Total minutes used on Ubuntu 16 core runner machines.
     */
    ubuntu_16_core?: number;

    /**
     * Total minutes used on Ubuntu 32 core runner machines.
     */
    ubuntu_32_core?: number;

    /**
     * Total minutes used on Ubuntu 64 core runner machines.
     */
    ubuntu_64_core?: number;

    /**
     * Total minutes used on Windows 4 core runner machines.
     */
    windows_4_core?: number;

    /**
     * Total minutes used on Windows 8 core runner machines.
     */
    windows_8_core?: number;

    /**
     * Total minutes used on Windows 16 core runner machines.
     */
    windows_16_core?: number;

    /**
     * Total minutes used on Windows 32 core runner machines.
     */
    windows_32_core?: number;

    /**
     * Total minutes used on Windows 64 core runner machines.
     */
    windows_64_core?: number;

    /**
     * Total minutes used on all runner machines.
     */
    total?: number;
  };
};

export type AdvancedSecurityActiveCommittersUser = {
  user_login: string;
  last_pushed_date: string;
};

export type AdvancedSecurityActiveCommittersRepository = {
  name: string;
  advanced_security_committers: number;
  advanced_security_committers_breakdown: Array<AdvancedSecurityActiveCommittersUser>;
};

export type AdvancedSecurityActiveCommitters = {
  total_advanced_security_committers?: number;
  total_count?: number;
  repositories: Array<AdvancedSecurityActiveCommittersRepository>;
};

export type PackagesBillingUsage = {
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;

  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;

  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
};

export type CombinedBillingUsage = {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;

  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;

  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
};

/**
 * Actor
 */
export type Actor = {
  id: number;
  login: string;
  display_login?: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
};

/**
 * A collection of related issues and pull requests.
 */
export type NullableMilestone = {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;

  /**
   * The number of the milestone.
   */
  number: number;

  /**
   * The state of the milestone.
   */
  state: \\"open\\" | \\"closed\\";

  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: NullableSimpleUser;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type NullableIntegration = {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;

  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: NullableSimpleUser;

  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;

  /**
   * The set of permissions for the GitHub app
   */
  permissions: Record<string, string>;

  /**
   * The list of events for the GitHub app
   */
  events: Array<string>;

  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
};

/**
 * How the author is associated with the repository.
 */
export type AuthorAssociation =
  | \\"COLLABORATOR\\"
  | \\"CONTRIBUTOR\\"
  | \\"FIRST_TIMER\\"
  | \\"FIRST_TIME_CONTRIBUTOR\\"
  | \\"MANNEQUIN\\"
  | \\"MEMBER\\"
  | \\"NONE\\"
  | \\"OWNER\\";

export type ReactionRollup = {
  url: string;
  total_count: number;
  \\"+1\\": number;
  \\"-1\\": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type Issue = {
  id: number;
  node_id: string;

  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;

  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;

  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;

  /**
   * The reason for the current state
   */
  state_reason?: string;

  /**
   * Title of the issue
   */
  title: string;

  /**
   * Contents of the issue
   */
  body?: string;
  user: NullableSimpleUser;

  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: Array<
    | string
    | {
        id?: number;

        node_id?: string;

        url?: string;

        name?: string;

        description?: string;

        color?: string;

        default?: boolean;
      }
  >;
  assignee: NullableSimpleUser;
  assignees?: Array<SimpleUser>;
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string;
  comments: number;
  pull_request?: {
    merged_at?: string;

    diff_url: string;

    html_url: string;

    patch_url: string;

    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  draft?: boolean;
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  repository?: Repository;
  performed_via_github_app?: NullableIntegration;
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export type IssueComment = {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;

  /**
   * URL for the issue comment
   */
  url: string;

  /**
   * Contents of the issue comment
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: NullableSimpleUser;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
};

/**
 * Event
 */
export type Event = {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;

    name: string;

    url: string;
  };
  org?: Actor;
  payload: {
    action?: string;

    issue?: Issue;

    comment?: IssueComment;

    pages?: Array<{
      page_name?: string;

      title?: string;

      summary?: string;

      action?: string;

      sha?: string;

      html_url?: string;
    }>;
  };
  public: boolean;
  created_at: string;
};

/**
 * Hypermedia Link with Type
 */
export type LinkWithType = {
  href: string;
  type: string;
};

/**
 * Feed
 */
export type Feed = {
  timeline_url: string;
  user_url: string;
  current_user_public_url?: string;
  current_user_url?: string;
  current_user_actor_url?: string;
  current_user_organization_url?: string;
  current_user_organization_urls?: Array<string>;
  security_advisories_url?: string;
  _links: {
    timeline: LinkWithType;

    user: LinkWithType;

    security_advisories?: LinkWithType;

    current_user?: LinkWithType;

    current_user_public?: LinkWithType;

    current_user_actor?: LinkWithType;

    current_user_organization?: LinkWithType;

    current_user_organizations?: Array<LinkWithType>;
  };
};

/**
 * Base Gist
 */
export type BaseGist = {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: Record<
    string,
    {
      filename?: string;

      type?: string;

      language?: string;

      raw_url?: string;

      size?: number;
    }
  >;
  public: boolean;
  created_at: string;
  updated_at: string;
  description: string;
  comments: number;
  user: NullableSimpleUser;
  comments_url: string;
  owner?: SimpleUser;
  truncated?: boolean;
  forks?: Array<{}>;
  history?: Array<{}>;
};

/**
 * Public User
 */
export type PublicUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  hireable: boolean;
  bio: string;
  twitter_username?: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  plan?: {
    collaborators: number;

    name: string;

    space: number;

    private_repos: number;
  };
  suspended_at?: string;
  private_gists?: number;
  total_private_repos?: number;
  owned_private_repos?: number;
  disk_usage?: number;
  collaborators?: number;
};

/**
 * Gist History
 */
export type GistHistory = {
  user?: NullableSimpleUser;
  version?: string;
  committed_at?: string;
  change_status?: {
    total?: number;

    additions?: number;

    deletions?: number;
  };
  url?: string;
};

/**
 * Gist Simple
 */
export type GistSimple = {
  /**
   * @deprecated
   */
  forks?: Array<{
    id?: string;

    url?: string;

    user?: PublicUser;

    created_at?: string;

    updated_at?: string;
  }>;

  /**
   * @deprecated
   */
  history?: Array<GistHistory>;

  /**
   * Gist
   */
  fork_of?: {
    url: string;

    forks_url: string;

    commits_url: string;

    id: string;

    node_id: string;

    git_pull_url: string;

    git_push_url: string;

    html_url: string;

    files: Record<
      string,
      {
        filename?: string;

        type?: string;

        language?: string;

        raw_url?: string;

        size?: number;
      }
    >;

    public: boolean;

    created_at: string;

    updated_at: string;

    description: string;

    comments: number;

    user: NullableSimpleUser;

    comments_url: string;

    owner?: NullableSimpleUser;

    truncated?: boolean;

    forks?: Array<{}>;

    history?: Array<{}>;
  };
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: Record<
    string,
    {
      filename?: string;

      type?: string;

      language?: string;

      raw_url?: string;

      size?: number;

      truncated?: boolean;

      content?: string;
    } | null
  >;
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
};

/**
 * A comment made to a gist.
 */
export type GistComment = {
  id: number;
  node_id: string;
  url: string;

  /**
   * The comment text.
   */
  body: string;
  user: NullableSimpleUser;
  created_at: string;
  updated_at: string;
  author_association: AuthorAssociation;
};

/**
 * Gist Commit
 */
export type GistCommit = {
  url: string;
  version: string;
  user: NullableSimpleUser;
  change_status: {
    total?: number;

    additions?: number;

    deletions?: number;
  };
  committed_at: string;
};

/**
 * Gitignore Template
 */
export type GitignoreTemplate = {
  name: string;
  source: string;
};

/**
 * License Simple
 */
export type LicenseSimple = {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
};

/**
 * License
 */
export type License = {
  key: string;
  name: string;
  spdx_id: string;
  url: string;
  node_id: string;
  html_url: string;
  description: string;
  implementation: string;
  permissions: Array<string>;
  conditions: Array<string>;
  limitations: Array<string>;
  body: string;
  featured: boolean;
};

/**
 * Marketplace Listing Plan
 */
export type MarketplaceListingPlan = {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: Array<string>;
};

/**
 * Marketplace Purchase
 */
export type MarketplacePurchase = {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email?: string;
  email?: string;
  marketplace_pending_change?: {
    is_installed?: boolean;

    effective_date?: string;

    unit_count?: number;

    id?: number;

    plan?: MarketplaceListingPlan;
  };
  marketplace_purchase: {
    billing_cycle?: string;

    next_billing_date?: string;

    is_installed?: boolean;

    unit_count?: number;

    on_free_trial?: boolean;

    free_trial_ends_on?: string;

    updated_at?: string;

    plan?: MarketplaceListingPlan;
  };
};

/**
 * Api Overview
 */
export type ApiOverview = {
  verifiable_password_authentication: boolean;
  ssh_key_fingerprints?: {
    SHA256_RSA?: string;

    SHA256_DSA?: string;

    SHA256_ECDSA?: string;

    SHA256_ED25519?: string;
  };
  ssh_keys?: Array<string>;
  hooks?: Array<string>;
  web?: Array<string>;
  api?: Array<string>;
  git?: Array<string>;
  packages?: Array<string>;
  pages?: Array<string>;
  importer?: Array<string>;
  actions?: Array<string>;
  dependabot?: Array<string>;
};

/**
 * A git repository
 */
export type NullableRepository = {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;

  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: NullableLicenseSimple;
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;

    pull: boolean;

    triage?: boolean;

    push: boolean;

    maintain?: boolean;
  };
  owner: SimpleUser;

  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;

  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  topics?: Array<string>;

  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;

  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;

  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;

  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;

  /**
   * Whether the repository is archived.
   */
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;

  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;

    node_id?: string;

    name?: string;

    full_name?: string;

    owner?: {
      login?: string;

      id?: number;

      node_id?: string;

      avatar_url?: string;

      gravatar_id?: string;

      url?: string;

      html_url?: string;

      followers_url?: string;

      following_url?: string;

      gists_url?: string;

      starred_url?: string;

      subscriptions_url?: string;

      organizations_url?: string;

      repos_url?: string;

      events_url?: string;

      received_events_url?: string;

      type?: string;

      site_admin?: boolean;
    };

    private?: boolean;

    html_url?: string;

    description?: string;

    fork?: boolean;

    url?: string;

    archive_url?: string;

    assignees_url?: string;

    blobs_url?: string;

    branches_url?: string;

    collaborators_url?: string;

    comments_url?: string;

    commits_url?: string;

    compare_url?: string;

    contents_url?: string;

    contributors_url?: string;

    deployments_url?: string;

    downloads_url?: string;

    events_url?: string;

    forks_url?: string;

    git_commits_url?: string;

    git_refs_url?: string;

    git_tags_url?: string;

    git_url?: string;

    issue_comment_url?: string;

    issue_events_url?: string;

    issues_url?: string;

    keys_url?: string;

    labels_url?: string;

    languages_url?: string;

    merges_url?: string;

    milestones_url?: string;

    notifications_url?: string;

    pulls_url?: string;

    releases_url?: string;

    ssh_url?: string;

    stargazers_url?: string;

    statuses_url?: string;

    subscribers_url?: string;

    subscription_url?: string;

    tags_url?: string;

    teams_url?: string;

    trees_url?: string;

    clone_url?: string;

    mirror_url?: string;

    hooks_url?: string;

    svn_url?: string;

    homepage?: string;

    language?: string;

    forks_count?: number;

    stargazers_count?: number;

    watchers_count?: number;

    size?: number;

    default_branch?: string;

    open_issues_count?: number;

    is_template?: boolean;

    topics?: Array<string>;

    has_issues?: boolean;

    has_projects?: boolean;

    has_wiki?: boolean;

    has_pages?: boolean;

    has_downloads?: boolean;

    archived?: boolean;

    disabled?: boolean;

    visibility?: string;

    pushed_at?: string;

    created_at?: string;

    updated_at?: string;

    permissions?: {
      admin?: boolean;

      maintain?: boolean;

      push?: boolean;

      triage?: boolean;

      pull?: boolean;
    };

    allow_rebase_merge?: boolean;

    temp_clone_token?: string;

    allow_squash_merge?: boolean;

    allow_auto_merge?: boolean;

    delete_branch_on_merge?: boolean;

    allow_update_branch?: boolean;

    use_squash_pr_title_as_default?: boolean;

    allow_merge_commit?: boolean;

    subscribers_count?: number;

    network_count?: number;
  };
  temp_clone_token?: string;

  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;

  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;

  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;

  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;

  /**
   * Whether a squash merge commit can use the pull request title as default.
   */
  use_squash_pr_title_as_default?: boolean;

  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;

  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  starred_at?: string;
};

/**
 * Minimal Repository
 */
export type MinimalRepository = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url?: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url?: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url?: string;
  mirror_url?: string;
  hooks_url: string;
  svn_url?: string;
  homepage?: string;
  language?: string;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: Array<string>;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  pushed_at?: string;
  created_at?: string;
  updated_at?: string;
  permissions?: {
    admin?: boolean;

    maintain?: boolean;

    push?: boolean;

    triage?: boolean;

    pull?: boolean;
  };
  role_name?: string;
  template_repository?: NullableRepository;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;

    name?: string;

    spdx_id?: string;

    url?: string;

    node_id?: string;
  };
  forks?: number;
  open_issues?: number;
  watchers?: number;
  allow_forking?: boolean;
};

/**
 * Thread
 */
export type Thread = {
  id: string;
  repository: MinimalRepository;
  subject: {
    title: string;

    url: string;

    latest_comment_url: string;

    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string;
  url: string;
  subscription_url: string;
};

/**
 * Thread Subscription
 */
export type ThreadSubscription = {
  subscribed: boolean;
  ignored: boolean;
  reason: string;
  created_at: string;
  url: string;
  thread_url?: string;
  repository_url?: string;
};

/**
 * Custom repository roles created by organization administrators
 */
export type OrganizationCustomRepositoryRole = {
  id: number;
  name: string;
};

/**
 * Organization Full
 */
export type OrganizationFull = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  name?: string;
  company?: string;
  blog?: string;
  location?: string;
  email?: string;
  twitter_username?: string;
  is_verified?: boolean;
  has_organization_projects: boolean;
  has_repository_projects: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  html_url: string;
  created_at: string;
  type: string;
  total_private_repos?: number;
  owned_private_repos?: number;
  private_gists?: number;
  disk_usage?: number;
  collaborators?: number;
  billing_email?: string;
  plan?: {
    name: string;

    space: number;

    private_repos: number;

    filled_seats?: number;

    seats?: number;
  };
  default_repository_permission?: string;
  members_can_create_repositories?: boolean;
  two_factor_requirement_enabled?: boolean;
  members_allowed_repository_creation_type?: string;
  members_can_create_public_repositories?: boolean;
  members_can_create_private_repositories?: boolean;
  members_can_create_internal_repositories?: boolean;
  members_can_create_pages?: boolean;
  members_can_create_public_pages?: boolean;
  members_can_create_private_pages?: boolean;
  members_can_fork_private_repositories?: boolean;
  updated_at: string;
};

/**
 * GitHub Actions Cache Usage by repository.
 */
export type ActionsCacheUsageByRepository = {
  /**
   * The repository owner and name for the cache usage being shown.
   */
  full_name: string;

  /**
   * The sum of the size in bytes of all the active cache items in the repository.
   */
  active_caches_size_in_bytes: number;

  /**
   * The number of active caches in the repository.
   */
  active_caches_count: number;
};

/**
 * Actions OIDC Subject customization
 */
export type OidcCustomSub = {
  include_claim_keys: Array<string>;
};

/**
 * An object without any properties.
 */
export type EmptyObject = {};

/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
 */
export type EnabledRepositories = \\"all\\" | \\"none\\" | \\"selected\\";

export type ActionsOrganizationPermissions = {
  enabled_repositories: EnabledRepositories;

  /**
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when \`enabled_repositories\` is set to \`selected\`.
   */
  selected_repositories_url?: string;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};

export type RunnerGroupsOrg = {
  id: number;
  name: string;
  visibility: string;
  default: boolean;

  /**
   * Link to the selected repositories resource for this runner group. Not present unless visibility was set to \`selected\`
   */
  selected_repositories_url?: string;
  runners_url: string;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  allows_public_repositories: boolean;

  /**
   * If \`true\`, the \`restricted_to_workflows\` and \`selected_workflows\` fields cannot be modified.
   */
  workflow_restrictions_read_only?: boolean;

  /**
   * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
   */
  restricted_to_workflows?: boolean;

  /**
   * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
   */
  selected_workflows?: Array<string>;
};

/**
 * Secrets for GitHub Actions for an organization.
 */
export type OrganizationActionsSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;

  /**
   * Visibility of a secret
   */
  visibility: \\"all\\" | \\"private\\" | \\"selected\\";
  selected_repositories_url?: string;
};

/**
 * The public key used for setting Actions Secrets.
 */
export type ActionsPublicKey = {
  /**
   * The identifier for the key.
   */
  key_id: string;

  /**
   * The Base64 encoded public key.
   */
  key: string;
  id?: number;
  url?: string;
  title?: string;
  created_at?: string;
};

/**
 * A description of the machine powering a codespace.
 */
export type NullableCodespaceMachine = {
  /**
   * The name of the machine.
   */
  name: string;

  /**
   * The display name of the machine includes cores, memory, and storage.
   */
  display_name: string;

  /**
   * The operating system of the machine.
   */
  operating_system: string;

  /**
   * How much storage is available to the codespace.
   */
  storage_in_bytes: number;

  /**
   * How much memory is available to the codespace.
   */
  memory_in_bytes: number;

  /**
   * How many cores are available to the codespace.
   */
  cpus: number;

  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \\"null\\" if prebuilds are not supported or prebuild availability could not be determined. Value will be \\"none\\" if no prebuild is available. Latest values \\"ready\\" and \\"in_progress\\" indicate the prebuild availability status.
   */
  prebuild_availability: \\"none\\" | \\"ready\\" | \\"in_progress\\";
};

/**
 * A codespace.
 */
export type Codespace = {
  id: number;

  /**
   * Automatically generated name of this codespace.
   */
  name: string;

  /**
   * Display name for this codespace.
   */
  display_name?: string;

  /**
   * UUID identifying this codespace's environment.
   */
  environment_id: string;
  owner: SimpleUser;
  billable_owner: SimpleUser;
  repository: MinimalRepository;
  machine: NullableCodespaceMachine;

  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   */
  devcontainer_path?: string;

  /**
   * Whether the codespace was created from a prebuild.
   */
  prebuild: boolean;
  created_at: string;
  updated_at: string;

  /**
   * Last known time this codespace was started.
   */
  last_used_at: string;

  /**
   * State of this codespace.
   */
  state:
    | \\"Unknown\\"
    | \\"Created\\"
    | \\"Queued\\"
    | \\"Provisioning\\"
    | \\"Available\\"
    | \\"Awaiting\\"
    | \\"Unavailable\\"
    | \\"Deleted\\"
    | \\"Moved\\"
    | \\"Shutdown\\"
    | \\"Archived\\"
    | \\"Starting\\"
    | \\"ShuttingDown\\"
    | \\"Failed\\"
    | \\"Exporting\\"
    | \\"Updating\\"
    | \\"Rebuilding\\";

  /**
   * API URL for this codespace.
   */
  url: string;

  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     */
    ahead?: number;

    /**
     * The number of commits the local repository is behind the remote.
     */
    behind?: number;

    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;

    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;

    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     */
    ref?: string;
  };

  /**
   * The Azure region where this codespace is located.
   */
  location: \\"EastUs\\" | \\"SouthEastAsia\\" | \\"WestEurope\\" | \\"WestUs2\\";

  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   */
  idle_timeout_minutes: number;

  /**
   * URL to access this codespace on the web.
   */
  web_url: string;

  /**
   * API URL to access available alternate machine types for this codespace.
   */
  machines_url: string;

  /**
   * API URL to start this codespace.
   */
  start_url: string;

  /**
   * API URL to stop this codespace.
   */
  stop_url: string;

  /**
   * API URL for the Pull Request associated with this codespace, if any.
   */
  pulls_url: string;
  recent_folders: Array<string>;
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: Array<string>;
  };

  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean;

  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string;

  /**
   * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  idle_timeout_notice?: string;
};

/**
 * Credential Authorization
 */
export type CredentialAuthorization = {
  /**
   * User login that owns the underlying credential.
   */
  login: string;

  /**
   * Unique identifier for the credential.
   */
  credential_id: number;

  /**
   * Human-readable description of the credential type.
   */
  credential_type: string;

  /**
   * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
   */
  token_last_eight?: string;

  /**
   * Date when the credential was authorized for use.
   */
  credential_authorized_at: string;

  /**
   * List of oauth scopes the token has been granted.
   */
  scopes?: Array<string>;

  /**
   * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
   */
  fingerprint?: string;

  /**
   * Date when the credential was last accessed. May be null if it was never accessed
   */
  credential_accessed_at: string;
  authorized_credential_id: number;

  /**
   * The title given to the ssh key. This will only be present when the credential is an ssh key.
   */
  authorized_credential_title?: string;

  /**
   * The note given to the token. This will only be present when the credential is a token.
   */
  authorized_credential_note?: string;

  /**
   * The expiry for the token. This will only be present when the credential is a token.
   */
  authorized_credential_expires_at?: string;
};

/**
 * Secrets for GitHub Dependabot for an organization.
 */
export type OrganizationDependabotSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;

  /**
   * Visibility of a secret
   */
  visibility: \\"all\\" | \\"private\\" | \\"selected\\";
  selected_repositories_url?: string;
};

/**
 * The public key used for setting Dependabot Secrets.
 */
export type DependabotPublicKey = {
  /**
   * The identifier for the key.
   */
  key_id: string;

  /**
   * The Base64 encoded public key.
   */
  key: string;
};

/**
 * Information about an external group's usage and its members
 */
export type ExternalGroup = {
  /**
   * The internal ID of the group
   */
  group_id: number;

  /**
   * The display name for the group
   */
  group_name: string;

  /**
   * The date when the group was last updated_at
   */
  updated_at?: string;

  /**
   * An array of teams linked to this group
   */
  teams: Array<{
    /**
     * The id for a team
     */
    team_id: number;

    /**
     * The name of the team
     */
    team_name: string;
  }>;

  /**
   * An array of external members linked to this group
   */
  members: Array<{
    /**
     * The internal user ID of the identity
     */
    member_id: number;

    /**
     * The handle/login for the user
     */
    member_login: string;

    /**
     * The user display name/profile name
     */
    member_name: string;

    /**
     * An email attached to a user
     */
    member_email: string;
  }>;
};

/**
 * A list of external groups available to be connected to a team
 */
export type ExternalGroups = {
  /**
   * An array of external groups available to be mapped to a team
   */
  groups?: Array<{
    /**
     * The internal ID of the group
     */
    group_id: number;

    /**
     * The display name of the group
     */
    group_name: string;

    /**
     * The time of the last update for this group
     */
    updated_at: string;
  }>;
};

/**
 * Organization Invitation
 */
export type OrganizationInvitation = {
  id: number;
  login: string;
  email: string;
  role: string;
  created_at: string;
  failed_at?: string;
  failed_reason?: string;
  inviter: SimpleUser;
  team_count: number;
  node_id: string;
  invitation_teams_url: string;
};

/**
 * Org Hook
 */
export type OrgHook = {
  id: number;
  url: string;
  ping_url: string;
  deliveries_url?: string;
  name: string;
  events: Array<string>;
  active: boolean;
  config: {
    url?: string;

    insecure_ssl?: string;

    content_type?: string;

    secret?: string;
  };
  updated_at: string;
  created_at: string;
  type: string;
};

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 */
export type InteractionGroup = \\"existing_users\\" | \\"contributors_only\\" | \\"collaborators_only\\";

/**
 * Interaction limit settings.
 */
export type InteractionLimitResponse = {
  limit: InteractionGroup;
  origin: string;
  expires_at: string;
};

/**
 * The duration of the interaction restriction. Default: \`one_day\`.
 */
export type InteractionExpiry = \\"one_day\\" | \\"three_days\\" | \\"one_week\\" | \\"one_month\\" | \\"six_months\\";

/**
 * Limit interactions to a specific type of user for a specified duration
 */
export type InteractionLimit = {
  limit: InteractionGroup;
  expiry?: InteractionExpiry;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type NullableTeamSimple = {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;

  /**
   * URL for the team
   */
  url: string;
  members_url: string;

  /**
   * Name of the team
   */
  name: string;

  /**
   * Description of the team
   */
  description: string;

  /**
   * Permission that the team will have for its repositories
   */
  permission: string;

  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;

  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type Team = {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy?: string;
  permission: string;
  permissions?: {
    pull: boolean;

    triage: boolean;

    push: boolean;

    maintain: boolean;

    admin: boolean;
  };
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: NullableTeamSimple;
};

/**
 * Org Membership
 */
export type OrgMembership = {
  url: string;

  /**
   * The state of the member in the organization. The \`pending\` state indicates the user has not yet accepted an invitation.
   */
  state: \\"active\\" | \\"pending\\";

  /**
   * The user's membership type in the organization.
   */
  role: \\"admin\\" | \\"member\\" | \\"billing_manager\\";
  organization_url: string;
  organization: OrganizationSimple;
  user: NullableSimpleUser;
  permissions?: {
    can_create_repository: boolean;
  };
};

/**
 * A migration.
 */
export type Migration = {
  id: number;
  owner: NullableSimpleUser;
  guid: string;
  state: string;
  lock_repositories: boolean;
  exclude_metadata: boolean;
  exclude_git_data: boolean;
  exclude_attachments: boolean;
  exclude_releases: boolean;
  exclude_owner_projects: boolean;
  org_metadata_only: boolean;
  repositories: Array<Repository>;
  url: string;
  created_at: string;
  updated_at: string;
  node_id: string;
  archive_url?: string;
  exclude?: Array<{}>;
};

/**
 * Minimal Repository
 */
export type NullableMinimalRepository = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url?: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url?: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url?: string;
  mirror_url?: string;
  hooks_url: string;
  svn_url?: string;
  homepage?: string;
  language?: string;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: Array<string>;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  pushed_at?: string;
  created_at?: string;
  updated_at?: string;
  permissions?: {
    admin?: boolean;

    maintain?: boolean;

    push?: boolean;

    triage?: boolean;

    pull?: boolean;
  };
  role_name?: string;
  template_repository?: NullableRepository;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;

    name?: string;

    spdx_id?: string;

    url?: string;

    node_id?: string;
  };
  forks?: number;
  open_issues?: number;
  watchers?: number;
  allow_forking?: boolean;
};

/**
 * A software package
 */
export type Package = {
  /**
   * Unique identifier of the package.
   */
  id: number;

  /**
   * The name of the package.
   */
  name: string;
  package_type: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  url: string;
  html_url: string;

  /**
   * The number of versions of the package.
   */
  version_count: number;
  visibility: \\"private\\" | \\"public\\";
  owner?: NullableSimpleUser;
  repository?: NullableMinimalRepository;
  created_at: string;
  updated_at: string;
};

/**
 * A version of a software package
 */
export type PackageVersion = {
  /**
   * Unique identifier of the package version.
   */
  id: number;

  /**
   * The name of the package version.
   */
  name: string;
  url: string;
  package_html_url: string;
  html_url?: string;
  license?: string;
  description?: string;
  created_at: string;
  updated_at: string;
  deleted_at?: string;
  metadata?: {
    package_type: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";

    container?: {
      tags: Array<string>;
    };

    docker?: {
      tag?: Array<string>;
    };
  };
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export type Project = {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;

  /**
   * Name of the project
   */
  name: string;

  /**
   * Body of the project
   */
  body: string;
  number: number;

  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: NullableSimpleUser;
  created_at: string;
  updated_at: string;

  /**
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: \\"read\\" | \\"write\\" | \\"admin\\" | \\"none\\";

  /**
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
};

/**
 * External Groups to be mapped to a team for membership
 */
export type GroupMapping = {
  /**
   * Array of groups to be mapped to this team
   */
  groups?: Array<{
    /**
     * The ID of the group
     */
    group_id: string;

    /**
     * The name of the group
     */
    group_name: string;

    /**
     * a description of the group
     */
    group_description: string;

    /**
     * synchronization status for this group mapping
     */
    status?: string;

    /**
     * the time of the last sync for this group-mapping
     */
    synced_at?: string;
  }>;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamFull = {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;

  /**
   * URL for the team
   */
  url: string;
  html_url: string;

  /**
   * Name of the team
   */
  name: string;
  slug: string;
  description: string;

  /**
   * The level of privacy this team should have
   */
  privacy?: \\"closed\\" | \\"secret\\";

  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  members_url: string;
  repositories_url: string;
  parent?: NullableTeamSimple;
  members_count: number;
  repos_count: number;
  created_at: string;
  updated_at: string;
  organization: OrganizationFull;

  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export type TeamDiscussion = {
  author: NullableSimpleUser;

  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;

  /**
   * The unique sequence number of a team discussion.
   */
  number: number;

  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;

  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;

  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions?: ReactionRollup;
};

/**
 * A reply to a discussion within a team.
 */
export type TeamDiscussionComment = {
  author: NullableSimpleUser;

  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;

  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions?: ReactionRollup;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export type Reaction = {
  id: number;
  node_id: string;
  user: NullableSimpleUser;

  /**
   * The reaction to use
   */
  content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  created_at: string;
};

/**
 * Team Membership
 */
export type TeamMembership = {
  url: string;

  /**
   * The role of the user in the team.
   */
  role: \\"member\\" | \\"maintainer\\";

  /**
   * The state of the user's membership in the team.
   */
  state: \\"active\\" | \\"pending\\";
};

/**
 * A team's access to a project.
 */
export type TeamProject = {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string;
  number: number;
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;

  /**
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;

  /**
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  permissions: {
    read: boolean;

    write: boolean;

    admin: boolean;
  };
};

/**
 * A team's access to a repository.
 */
export type TeamRepository = {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;

  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;

    pull: boolean;

    triage?: boolean;

    push: boolean;

    maintain?: boolean;
  };
  role_name?: string;
  owner: NullableSimpleUser;

  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;

  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  topics?: Array<string>;

  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;

  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;

  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;

  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;

  /**
   * Whether the repository is archived.
   */
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;

  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  template_repository?: NullableRepository;
  temp_clone_token?: string;

  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;

  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;

  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;

  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;

  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
};

/**
 * Project cards represent a scope of work.
 */
export type ProjectCard = {
  url: string;

  /**
   * The project card's ID
   */
  id: number;
  node_id: string;
  note: string;
  creator: NullableSimpleUser;
  created_at: string;
  updated_at: string;

  /**
   * Whether or not the card is archived
   */
  archived?: boolean;
  column_name?: string;
  project_id?: string;
  column_url: string;
  content_url?: string;
  project_url: string;
};

/**
 * Project columns contain cards of work.
 */
export type ProjectColumn = {
  url: string;
  project_url: string;
  cards_url: string;

  /**
   * The unique identifier of the project column
   */
  id: number;
  node_id: string;

  /**
   * Name of the project column
   */
  name: string;
  created_at: string;
  updated_at: string;
};

/**
 * Project Collaborator Permission
 */
export type ProjectCollaboratorPermission = {
  permission: string;
  user: NullableSimpleUser;
};

export type RateLimit = {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
};

/**
 * Rate Limit Overview
 */
export type RateLimitOverview = {
  resources: {
    core: RateLimit;

    graphql?: RateLimit;

    search: RateLimit;

    source_import?: RateLimit;

    integration_manifest?: RateLimit;

    code_scanning_upload?: RateLimit;

    actions_runner_registration?: RateLimit;

    scim?: RateLimit;

    dependency_snapshots?: RateLimit;
  };
  rate: RateLimit;
};

/**
 * Code of Conduct Simple
 */
export type CodeOfConductSimple = {
  url: string;
  key: string;
  name: string;
  html_url: string;
};

export type SecurityAndAnalysis = {
  advanced_security?: {
    status?: \\"enabled\\" | \\"disabled\\";
  };
  secret_scanning?: {
    status?: \\"enabled\\" | \\"disabled\\";
  };
  secret_scanning_push_protection?: {
    status?: \\"enabled\\" | \\"disabled\\";
  };
};

/**
 * Full Repository
 */
export type FullRepository = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template?: boolean;
  topics?: Array<string>;
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions?: {
    admin: boolean;

    maintain?: boolean;

    push: boolean;

    triage?: boolean;

    pull: boolean;
  };
  allow_rebase_merge?: boolean;
  template_repository?: NullableRepository;
  temp_clone_token?: string;
  allow_squash_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  allow_merge_commit?: boolean;
  allow_update_branch?: boolean;
  use_squash_pr_title_as_default?: boolean;
  allow_forking?: boolean;
  subscribers_count: number;
  network_count: number;
  license: NullableLicenseSimple;
  organization?: NullableSimpleUser;
  parent?: Repository;
  source?: Repository;
  forks: number;
  master_branch?: string;
  open_issues: number;
  watchers: number;

  /**
   * Whether anonymous git access is allowed.
   */
  anonymous_access_enabled?: boolean;
  code_of_conduct?: CodeOfConductSimple;
  security_and_analysis?: SecurityAndAnalysis;
};

/**
 * An artifact
 */
export type Artifact = {
  id: number;
  node_id: string;

  /**
   * The name of the artifact.
   */
  name: string;

  /**
   * The size in bytes of the artifact.
   */
  size_in_bytes: number;
  url: string;
  archive_download_url: string;

  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  created_at: string;
  expires_at: string;
  updated_at: string;
  workflow_run?: {
    id?: number;

    repository_id?: number;

    head_repository_id?: number;

    head_branch?: string;

    head_sha?: string;
  };
};

/**
 * Repository actions caches
 */
export type ActionsCacheList = {
  /**
   * Total number of caches
   */
  total_count: number;

  /**
   * Array of caches
   */
  actions_caches: Array<{
    id?: number;

    ref?: string;

    key?: string;

    version?: string;

    last_accessed_at?: string;

    created_at?: string;

    size_in_bytes?: number;
  }>;
};

/**
 * Information of a job execution in a workflow run
 */
export type Job = {
  /**
   * The id of the job.
   */
  id: number;

  /**
   * The id of the associated workflow run.
   */
  run_id: number;
  run_url: string;

  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number;
  node_id: string;

  /**
   * The SHA of the commit that is being run.
   */
  head_sha: string;
  url: string;
  html_url: string;

  /**
   * The phase of the lifecycle that the job is currently in.
   */
  status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";

  /**
   * The outcome of the job.
   */
  conclusion: string;

  /**
   * The time that the job started, in ISO 8601 format.
   */
  started_at: string;

  /**
   * The time that the job finished, in ISO 8601 format.
   */
  completed_at: string;

  /**
   * The name of the job.
   */
  name: string;

  /**
   * Steps in this job.
   */
  steps?: Array<{
    /**
     * The phase of the lifecycle that the job is currently in.
     */
    status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";

    /**
     * The outcome of the job.
     */
    conclusion: string;

    /**
     * The name of the job.
     */
    name: string;

    number: number;

    /**
     * The time that the step started, in ISO 8601 format.
     */
    started_at?: string;

    /**
     * The time that the job finished, in ISO 8601 format.
     */
    completed_at?: string;
  }>;
  check_run_url: string;

  /**
   * Labels for the workflow job. Specified by the \\"runs_on\\" attribute in the action's workflow file.
   */
  labels: Array<string>;

  /**
   * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_id: number;

  /**
   * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_name: string;

  /**
   * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_group_id: number;

  /**
   * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_group_name: string;
};

/**
 * OIDC Customer Subject
 */
export type OptOutOidcCustomSub = {
  use_default: boolean;
};

/**
 * Whether GitHub Actions is enabled on the repository.
 */
export type ActionsEnabled = boolean;

export type ActionsRepositoryPermissions = {
  enabled: ActionsEnabled;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};

export type ActionsWorkflowAccessToRepository = {
  /** 
* Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
repository. \`none\` means access is only possible from workflows in this repository.
*/
  access_level: \\"none\\" | \\"organization\\" | \\"enterprise\\";
};

/**
 * A workflow referenced/reused by the initial caller workflow
 */
export type ReferencedWorkflow = {
  path: string;
  sha: string;
  ref?: string;
};

export type PullRequestMinimal = {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;

    sha: string;

    repo: {
      id: number;

      url: string;

      name: string;
    };
  };
  base: {
    ref: string;

    sha: string;

    repo: {
      id: number;

      url: string;

      name: string;
    };
  };
};

/**
 * Simple Commit
 */
export type NullableSimpleCommit = {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;

    email: string;
  };
  committer: {
    name: string;

    email: string;
  };
};

/**
 * An invocation of a workflow
 */
export type WorkflowRun = {
  /**
   * The ID of the workflow run.
   */
  id: number;

  /**
   * The name of the workflow run.
   */
  name?: string;
  node_id: string;

  /**
   * The ID of the associated check suite.
   */
  check_suite_id?: number;

  /**
   * The node ID of the associated check suite.
   */
  check_suite_node_id?: string;
  head_branch: string;

  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   */
  head_sha: string;

  /**
   * The full path of the workflow
   */
  path: string;

  /**
   * The auto incrementing run number for the workflow run.
   */
  run_number: number;

  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number;
  referenced_workflows?: Array<ReferencedWorkflow>;
  event: string;
  status: string;
  conclusion: string;

  /**
   * The ID of the parent workflow.
   */
  workflow_id: number;

  /**
   * The URL to the workflow run.
   */
  url: string;
  html_url: string;
  pull_requests: Array<PullRequestMinimal>;
  created_at: string;
  updated_at: string;
  actor?: SimpleUser;
  triggering_actor?: SimpleUser;

  /**
   * The start time of the latest run. Resets on re-run.
   */
  run_started_at?: string;

  /**
   * The URL to the jobs for the workflow run.
   */
  jobs_url: string;

  /**
   * The URL to download the logs for the workflow run.
   */
  logs_url: string;

  /**
   * The URL to the associated check suite.
   */
  check_suite_url: string;

  /**
   * The URL to the artifacts for the workflow run.
   */
  artifacts_url: string;

  /**
   * The URL to cancel the workflow run.
   */
  cancel_url: string;

  /**
   * The URL to rerun the workflow run.
   */
  rerun_url: string;

  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   */
  previous_attempt_url?: string;

  /**
   * The URL to the workflow.
   */
  workflow_url: string;
  head_commit: NullableSimpleCommit;
  repository: MinimalRepository;
  head_repository: MinimalRepository;
  head_repository_id?: number;
};

/**
 * An entry in the reviews log for environment deployments
 */
export type EnvironmentApprovals = {
  /**
   * The list of environments that were approved or rejected
   */
  environments: Array<{
    /**
     * The id of the environment.
     */
    id?: number;

    node_id?: string;

    /**
     * The name of the environment.
     */
    name?: string;

    url?: string;

    html_url?: string;

    /**
     * The time that the environment was created, in ISO 8601 format.
     */
    created_at?: string;

    /**
     * The time that the environment was last updated, in ISO 8601 format.
     */
    updated_at?: string;
  }>;

  /**
   * Whether deployment to the environment(s) was approved or rejected
   */
  state: \\"approved\\" | \\"rejected\\";
  user: SimpleUser;

  /**
   * The comment submitted with the deployment review
   */
  comment: string;
};

/**
 * The type of reviewer.
 */
export type DeploymentReviewerType = \\"User\\" | \\"Team\\";

/**
 * Details of a deployment that is waiting for protection rules to pass
 */
export type PendingDeployment = {
  environment: {
    /**
     * The id of the environment.
     */
    id?: number;

    node_id?: string;

    /**
     * The name of the environment.
     */
    name?: string;

    url?: string;

    html_url?: string;
  };

  /**
   * The set duration of the wait timer
   */
  wait_timer: number;

  /**
   * The time that the wait timer began.
   */
  wait_timer_started_at: string;

  /**
   * Whether the currently authenticated user can approve the deployment
   */
  current_user_can_approve: boolean;

  /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: Array<{
    type?: DeploymentReviewerType;

    reviewer?: SimpleUser | Team;
  }>;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export type Deployment = {
  url: string;

  /**
   * Unique identifier of the deployment
   */
  id: number;
  node_id: string;
  sha: string;

  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   */
  ref: string;

  /**
   * Parameter to specify a task to execute
   */
  task: string;
  payload: string;
  original_environment?: string;

  /**
   * Name for the target deployment environment.
   */
  environment: string;
  description: string;
  creator: NullableSimpleUser;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;

  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean;

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean;
  performed_via_github_app?: NullableIntegration;
};

/**
 * Workflow Run Usage
 */
export type WorkflowRunUsage = {
  billable: {
    UBUNTU?: {
      total_ms: number;

      jobs: number;

      job_runs?: Array<{
        job_id: number;

        duration_ms: number;
      }>;
    };

    MACOS?: {
      total_ms: number;

      jobs: number;

      job_runs?: Array<{
        job_id: number;

        duration_ms: number;
      }>;
    };

    WINDOWS?: {
      total_ms: number;

      jobs: number;

      job_runs?: Array<{
        job_id: number;

        duration_ms: number;
      }>;
    };
  };
  run_duration_ms?: number;
};

/**
 * Set secrets for GitHub Actions.
 */
export type ActionsSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
};

/**
 * A GitHub Actions workflow
 */
export type Workflow = {
  id: number;
  node_id: string;
  name: string;
  path: string;
  state: \\"active\\" | \\"deleted\\" | \\"disabled_fork\\" | \\"disabled_inactivity\\" | \\"disabled_manually\\";
  created_at: string;
  updated_at: string;
  url: string;
  html_url: string;
  badge_url: string;
  deleted_at?: string;
};

/**
 * Workflow Usage
 */
export type WorkflowUsage = {
  billable: {
    UBUNTU?: {
      total_ms?: number;
    };

    MACOS?: {
      total_ms?: number;
    };

    WINDOWS?: {
      total_ms?: number;
    };
  };
};

/**
 * An autolink reference.
 */
export type Autolink = {
  id: number;

  /**
   * The prefix of a key that is linkified.
   */
  key_prefix: string;

  /**
   * A template for the target URL that is generated if a key was found.
   */
  url_template: string;

  /**
   * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference is a legacy autolink that only matches numeric characters.
   */
  is_alphanumeric?: boolean;
};

/**
 * Protected Branch Required Status Check
 */
export type ProtectedBranchRequiredStatusCheck = {
  url?: string;
  enforcement_level?: string;
  contexts: Array<string>;
  checks: Array<{
    context: string;

    app_id: number;
  }>;
  contexts_url?: string;
  strict?: boolean;
};

/**
 * Protected Branch Admin Enforced
 */
export type ProtectedBranchAdminEnforced = {
  url: string;
  enabled: boolean;
};

/**
 * Protected Branch Pull Request Review
 */
export type ProtectedBranchPullRequestReview = {
  url?: string;
  dismissal_restrictions?: {
    /**
     * The list of users with review dismissal access.
     */
    users?: Array<SimpleUser>;

    /**
     * The list of teams with review dismissal access.
     */
    teams?: Array<Team>;

    /**
     * The list of apps with review dismissal access.
     */
    apps?: Array<Integration>;

    url?: string;

    users_url?: string;

    teams_url?: string;
  };

  /**
   * Allow specific users, teams, or apps to bypass pull request requirements.
   */
  bypass_pull_request_allowances?: {
    /**
     * The list of users allowed to bypass pull request requirements.
     */
    users?: Array<SimpleUser>;

    /**
     * The list of teams allowed to bypass pull request requirements.
     */
    teams?: Array<Team>;

    /**
     * The list of apps allowed to bypass pull request requirements.
     */
    apps?: Array<Integration>;
  };
  dismiss_stale_reviews: boolean;
  require_code_owner_reviews: boolean;
  required_approving_review_count?: number;
};

/**
 * Branch Restriction Policy
 */
export type BranchRestrictionPolicy = {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: Array<{
    login?: string;

    id?: number;

    node_id?: string;

    avatar_url?: string;

    gravatar_id?: string;

    url?: string;

    html_url?: string;

    followers_url?: string;

    following_url?: string;

    gists_url?: string;

    starred_url?: string;

    subscriptions_url?: string;

    organizations_url?: string;

    repos_url?: string;

    events_url?: string;

    received_events_url?: string;

    type?: string;

    site_admin?: boolean;
  }>;
  teams: Array<{
    id?: number;

    node_id?: string;

    url?: string;

    html_url?: string;

    name?: string;

    slug?: string;

    description?: string;

    privacy?: string;

    permission?: string;

    members_url?: string;

    repositories_url?: string;

    parent?: string;
  }>;
  apps: Array<{
    id?: number;

    slug?: string;

    node_id?: string;

    owner?: {
      login?: string;

      id?: number;

      node_id?: string;

      url?: string;

      repos_url?: string;

      events_url?: string;

      hooks_url?: string;

      issues_url?: string;

      members_url?: string;

      public_members_url?: string;

      avatar_url?: string;

      description?: string;

      gravatar_id?: string;

      html_url?: string;

      followers_url?: string;

      following_url?: string;

      gists_url?: string;

      starred_url?: string;

      subscriptions_url?: string;

      organizations_url?: string;

      received_events_url?: string;

      type?: string;

      site_admin?: boolean;
    };

    name?: string;

    description?: string;

    external_url?: string;

    html_url?: string;

    created_at?: string;

    updated_at?: string;

    permissions?: {
      metadata?: string;

      contents?: string;

      issues?: string;

      single_file?: string;
    };

    events?: Array<string>;
  }>;
};

/**
 * Branch Protection
 */
export type BranchProtection = {
  url?: string;
  enabled?: boolean;
  required_status_checks?: ProtectedBranchRequiredStatusCheck;
  enforce_admins?: ProtectedBranchAdminEnforced;
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  restrictions?: BranchRestrictionPolicy;
  required_linear_history?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  allow_deletions?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  name?: string;
  protection_url?: string;
  required_signatures?: {
    url: string;

    enabled: boolean;
  };
};

/**
 * Short Branch
 */
export type ShortBranch = {
  name: string;
  commit: {
    sha: string;

    url: string;
  };
  protected: boolean;
  protection?: BranchProtection;
  protection_url?: string;
};

/**
 * Metaproperties for Git author/committer information.
 */
export type NullableGitUser = {
  name?: string;
  email?: string;
  date?: string;
};

export type Verification = {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
};

/**
 * Diff Entry
 */
export type DiffEntry = {
  sha: string;
  filename: string;
  status: \\"added\\" | \\"removed\\" | \\"modified\\" | \\"renamed\\" | \\"copied\\" | \\"changed\\" | \\"unchanged\\";
  additions: number;
  deletions: number;
  changes: number;
  blob_url: string;
  raw_url: string;
  contents_url: string;
  patch?: string;
  previous_filename?: string;
};

/**
 * Commit
 */
export type Commit = {
  url: string;
  sha: string;
  node_id: string;
  html_url: string;
  comments_url: string;
  commit: {
    url: string;

    author: NullableGitUser;

    committer: NullableGitUser;

    message: string;

    comment_count: number;

    tree: {
      sha: string;

      url: string;
    };

    verification?: Verification;
  };
  author: NullableSimpleUser;
  committer: NullableSimpleUser;
  parents: Array<{
    sha: string;

    url: string;

    html_url?: string;
  }>;
  stats?: {
    additions?: number;

    deletions?: number;

    total?: number;
  };
  files?: Array<DiffEntry>;
};

/**
 * Branch With Protection
 */
export type BranchWithProtection = {
  name: string;
  commit: Commit;
  _links: {
    html: string;

    self: string;
  };
  protected: boolean;
  protection: BranchProtection;
  protection_url: string;
  pattern?: string;
  required_approving_review_count?: number;
};

/**
 * Status Check Policy
 */
export type StatusCheckPolicy = {
  url: string;
  strict: boolean;
  contexts: Array<string>;
  checks: Array<{
    context: string;

    app_id: number;
  }>;
  contexts_url: string;
};

/**
 * Branch protections protect branches
 */
export type ProtectedBranch = {
  url: string;
  required_status_checks?: StatusCheckPolicy;
  required_pull_request_reviews?: {
    url: string;

    dismiss_stale_reviews?: boolean;

    require_code_owner_reviews?: boolean;

    required_approving_review_count?: number;

    dismissal_restrictions?: {
      url: string;

      users_url: string;

      teams_url: string;

      users: Array<SimpleUser>;

      teams: Array<Team>;

      apps?: Array<Integration>;
    };

    bypass_pull_request_allowances?: {
      users: Array<SimpleUser>;

      teams: Array<Team>;

      apps?: Array<Integration>;
    };
  };
  required_signatures?: {
    url: string;

    enabled: boolean;
  };
  enforce_admins?: {
    url: string;

    enabled: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  restrictions?: BranchRestrictionPolicy;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
};

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export type DeploymentSimple = {
  url: string;

  /**
   * Unique identifier of the deployment
   */
  id: number;
  node_id: string;

  /**
   * Parameter to specify a task to execute
   */
  task: string;
  original_environment?: string;

  /**
   * Name for the target deployment environment.
   */
  environment: string;
  description: string;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;

  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean;

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean;
  performed_via_github_app?: NullableIntegration;
};

/**
 * A check performed on the code of a given code change
 */
export type CheckRun = {
  /**
   * The id of the check.
   */
  id: number;

  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  node_id: string;
  external_id: string;
  url: string;
  html_url: string;
  details_url: string;

  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
  conclusion:
    | \\"success\\"
    | \\"failure\\"
    | \\"neutral\\"
    | \\"cancelled\\"
    | \\"skipped\\"
    | \\"timed_out\\"
    | \\"action_required\\";
  started_at: string;
  completed_at: string;
  output: {
    title: string;

    summary: string;

    text: string;

    annotations_count: number;

    annotations_url: string;
  };

  /**
   * The name of the check.
   */
  name: string;
  check_suite: {
    id: number;
  };
  app: NullableIntegration;
  pull_requests: Array<PullRequestMinimal>;
  deployment?: DeploymentSimple;
};

/**
 * Check Annotation
 */
export type CheckAnnotation = {
  path: string;
  start_line: number;
  end_line: number;
  start_column: number;
  end_column: number;
  annotation_level: string;
  title: string;
  message: string;
  raw_details: string;
  blob_href: string;
};

/**
 * Simple Commit
 */
export type SimpleCommit = {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;

    email: string;
  };
  committer: {
    name: string;

    email: string;
  };
};

/**
 * A suite of checks performed on the code of a given code change
 */
export type CheckSuite = {
  id: number;
  node_id: string;
  head_branch: string;

  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha: string;
  status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
  conclusion:
    | \\"success\\"
    | \\"failure\\"
    | \\"neutral\\"
    | \\"cancelled\\"
    | \\"skipped\\"
    | \\"timed_out\\"
    | \\"action_required\\";
  url: string;
  before: string;
  after: string;
  pull_requests: Array<PullRequestMinimal>;
  app: NullableIntegration;
  repository: MinimalRepository;
  created_at: string;
  updated_at: string;
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
  rerequestable?: boolean;
  runs_rerequestable?: boolean;
};

/**
 * Check suite configuration preferences for a repository.
 */
export type CheckSuitePreference = {
  preferences: {
    auto_trigger_checks?: Array<{
      app_id: number;

      setting: boolean;
    }>;
  };
  repository: MinimalRepository;
};

export type CodeScanningAlertRuleSummary = {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string;

  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;

  /**
   * A set of tags applicable for the rule.
   */
  tags?: Array<string>;

  /**
   * The severity of the alert.
   */
  severity?: \\"none\\" | \\"note\\" | \\"warning\\" | \\"error\\";

  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
};

export type CodeScanningAlertItems = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  fixed_at?: CodeScanningAlertFixedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
};

export type CodeScanningAlert = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  fixed_at?: CodeScanningAlertFixedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
};

/**
 * Sets the state of the code scanning alert. You must provide \`dismissed_reason\` when you set the state to \`dismissed\`.
 */
export type CodeScanningAlertSetState = \\"open\\" | \\"dismissed\\";

/**
 * An identifier for the upload.
 */
export type CodeScanningAnalysisSarifId = string;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 */
export type CodeScanningAnalysisCommitSha = string;

/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 */
export type CodeScanningAnalysisEnvironment = string;

/**
 * The time that the analysis was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type CodeScanningAnalysisCreatedAt = string;

/**
 * The REST API URL of the analysis resource.
 */
export type CodeScanningAnalysisUrl = string;

export type CodeScanningAnalysis = {
  ref: CodeScanningRef;
  commit_sha: CodeScanningAnalysisCommitSha;
  analysis_key: CodeScanningAnalysisAnalysisKey;
  environment: CodeScanningAnalysisEnvironment;
  category?: CodeScanningAnalysisCategory;
  error: string;
  created_at: CodeScanningAnalysisCreatedAt;

  /**
   * The total number of results in the analysis.
   */
  results_count: number;

  /**
   * The total number of rules used in the analysis.
   */
  rules_count: number;

  /**
   * Unique identifier for this analysis.
   */
  id: number;
  url: CodeScanningAnalysisUrl;
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  deletable: boolean;

  /**
   * Warning generated when processing the analysis
   */
  warning: string;
};

/**
 * Successful deletion of a code scanning analysis
 */
export type CodeScanningAnalysisDeletion = {
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   */
  readonly next_analysis_url: string;

  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   */
  readonly confirm_delete_url: string;
};

/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [\`gzip\`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \\"[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\\"
 */
export type CodeScanningAnalysisSarifFile = string;

export type CodeScanningSarifsReceipt = {
  id?: CodeScanningAnalysisSarifId;

  /**
   * The REST API URL for checking the status of the upload.
   */
  readonly url?: string;
};

export type CodeScanningSarifsStatus = {
  /**
   * \`pending\` files have not yet been processed, while \`complete\` means results from the SARIF have been stored. \`failed\` files have either not been processed at all, or could only be partially processed.
   */
  processing_status?: \\"pending\\" | \\"complete\\" | \\"failed\\";

  /**
   * The REST API URL for getting the analyses associated with the upload.
   */
  readonly analyses_url?: string;

  /**
   * Any errors that ocurred during processing of the delivery.
   */
  readonly errors?: Array<string>;
};

/**
 * A list of errors found in a repo's CODEOWNERS file
 */
export type CodeownersErrors = {
  errors: Array<{
    /**
     * The line number where this errors occurs.
     */
    line: number;

    /**
     * The column number where this errors occurs.
     */
    column: number;

    /**
     * The contents of the line where the error occurs.
     */
    source?: string;

    /**
     * The type of error.
     */
    kind: string;

    /**
     * Suggested action to fix the error. This will usually be \`null\`, but is provided for some common errors.
     */
    suggestion?: string;

    /**
     * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     */
    message: string;

    /**
     * The path of the file where the error occured.
     */
    path: string;
  }>;
};

/**
 * A description of the machine powering a codespace.
 */
export type CodespaceMachine = {
  /**
   * The name of the machine.
   */
  name: string;

  /**
   * The display name of the machine includes cores, memory, and storage.
   */
  display_name: string;

  /**
   * The operating system of the machine.
   */
  operating_system: string;

  /**
   * How much storage is available to the codespace.
   */
  storage_in_bytes: number;

  /**
   * How much memory is available to the codespace.
   */
  memory_in_bytes: number;

  /**
   * How many cores are available to the codespace.
   */
  cpus: number;

  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \\"null\\" if prebuilds are not supported or prebuild availability could not be determined. Value will be \\"none\\" if no prebuild is available. Latest values \\"ready\\" and \\"in_progress\\" indicate the prebuild availability status.
   */
  prebuild_availability: \\"none\\" | \\"ready\\" | \\"in_progress\\";
};

/**
 * Set repository secrets for GitHub Codespaces.
 */
export type RepoCodespacesSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
};

/**
 * The public key used for setting Codespaces secrets.
 */
export type CodespacesPublicKey = {
  /**
   * The identifier for the key.
   */
  key_id: string;

  /**
   * The Base64 encoded public key.
   */
  key: string;
  id?: number;
  url?: string;
  title?: string;
  created_at?: string;
};

/**
 * Collaborator
 */
export type Collaborator = {
  login: string;
  id: number;
  email?: string;
  name?: string;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;

    triage?: boolean;

    push: boolean;

    maintain?: boolean;

    admin: boolean;
  };
  role_name: string;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositoryInvitation = {
  /**
   * Unique identifier of the repository invitation.
   */
  id: number;
  repository: MinimalRepository;
  invitee: NullableSimpleUser;
  inviter: NullableSimpleUser;

  /**
   * The permission associated with the invitation.
   */
  permissions: \\"read\\" | \\"write\\" | \\"admin\\" | \\"triage\\" | \\"maintain\\";
  created_at: string;

  /**
   * Whether or not the invitation has expired
   */
  expired?: boolean;

  /**
   * URL for the repository invitation
   */
  url: string;
  html_url: string;
  node_id: string;
};

/**
 * Collaborator
 */
export type NullableCollaborator = {
  login: string;
  id: number;
  email?: string;
  name?: string;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;

    triage?: boolean;

    push: boolean;

    maintain?: boolean;

    admin: boolean;
  };
  role_name: string;
};

/**
 * Repository Collaborator Permission
 */
export type RepositoryCollaboratorPermission = {
  permission: string;
  role_name: string;
  user: NullableCollaborator;
};

/**
 * Commit Comment
 */
export type CommitComment = {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string;
  position: number;
  line: number;
  commit_id: string;
  user: NullableSimpleUser;
  created_at: string;
  updated_at: string;
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
};

/**
 * Branch Short
 */
export type BranchShort = {
  name: string;
  commit: {
    sha: string;

    url: string;
  };
  protected: boolean;
};

/**
 * Hypermedia Link
 */
export type Link = {
  href: string;
};

/**
 * The status of auto merging a pull request.
 */
export type AutoMerge = {
  enabled_by: SimpleUser;

  /**
   * The merge method to use.
   */
  merge_method: \\"merge\\" | \\"squash\\" | \\"rebase\\";

  /**
   * Title for the merge commit message.
   */
  commit_title: string;

  /**
   * Commit message for the merge commit.
   */
  commit_message: string;
};

/**
 * Pull Request Simple
 */
export type PullRequestSimple = {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  number: number;
  state: string;
  locked: boolean;
  title: string;
  user: NullableSimpleUser;
  body: string;
  labels: Array<{
    id: number;

    node_id: string;

    url: string;

    name: string;

    description: string;

    color: string;

    default: boolean;
  }>;
  milestone: NullableMilestone;
  active_lock_reason?: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: NullableSimpleUser;
  assignees?: Array<SimpleUser>;
  requested_reviewers?: Array<SimpleUser>;
  requested_teams?: Array<Team>;
  head: {
    label: string;

    ref: string;

    repo: Repository;

    sha: string;

    user: NullableSimpleUser;
  };
  base: {
    label: string;

    ref: string;

    repo: Repository;

    sha: string;

    user: NullableSimpleUser;
  };
  _links: {
    comments: Link;

    commits: Link;

    statuses: Link;

    html: Link;

    issue: Link;

    review_comments: Link;

    review_comment: Link;

    self: Link;
  };
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;

  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
};

export type SimpleCommitStatus = {
  description: string;
  id: number;
  node_id: string;
  state: string;
  context: string;
  target_url: string;
  required?: boolean;
  avatar_url: string;
  url: string;
  created_at: string;
  updated_at: string;
};

/**
 * Combined Commit Status
 */
export type CombinedCommitStatus = {
  state: string;
  statuses: Array<SimpleCommitStatus>;
  sha: string;
  total_count: number;
  repository: MinimalRepository;
  commit_url: string;
  url: string;
};

/**
 * The status of a commit.
 */
export type Status = {
  url: string;
  avatar_url: string;
  id: number;
  node_id: string;
  state: string;
  description: string;
  target_url: string;
  context: string;
  created_at: string;
  updated_at: string;
  creator: NullableSimpleUser;
};

/**
 * Code of Conduct Simple
 */
export type NullableCodeOfConductSimple = {
  url: string;
  key: string;
  name: string;
  html_url: string;
};

export type NullableCommunityHealthFile = {
  url: string;
  html_url: string;
};

/**
 * Community Profile
 */
export type CommunityProfile = {
  health_percentage: number;
  description: string;
  documentation: string;
  files: {
    code_of_conduct: NullableCodeOfConductSimple;

    code_of_conduct_file: NullableCommunityHealthFile;

    license: NullableLicenseSimple;

    contributing: NullableCommunityHealthFile;

    readme: NullableCommunityHealthFile;

    issue_template: NullableCommunityHealthFile;

    pull_request_template: NullableCommunityHealthFile;
  };
  updated_at: string;
  content_reports_enabled?: boolean;
};

/**
 * Commit Comparison
 */
export type CommitComparison = {
  url: string;
  html_url: string;
  permalink_url: string;
  diff_url: string;
  patch_url: string;
  base_commit: Commit;
  merge_base_commit: Commit;
  status: \\"diverged\\" | \\"ahead\\" | \\"behind\\" | \\"identical\\";
  ahead_by: number;
  behind_by: number;
  total_commits: number;
  commits: Array<Commit>;
  files?: Array<DiffEntry>;
};

/**
 * Content Tree
 */
export type ContentTree = {
  type: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  entries?: Array<{
    type: string;

    size: number;

    name: string;

    path: string;

    content?: string;

    sha: string;

    url: string;

    git_url: string;

    html_url: string;

    download_url: string;

    _links: {
      git: string;

      html: string;

      self: string;
    };
  }>;
  _links: {
    git: string;

    html: string;

    self: string;
  };
};

/**
 * A list of directory items
 */
export type ContentDirectory = Array<{
  type: string;

  size: number;

  name: string;

  path: string;

  content?: string;

  sha: string;

  url: string;

  git_url: string;

  html_url: string;

  download_url: string;

  _links: {
    git: string;

    html: string;

    self: string;
  };
}>;

/**
 * Content File
 */
export type ContentFile = {
  type: string;
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
  target?: string;
  submodule_git_url?: string;
};

/**
 * An object describing a symlink
 */
export type ContentSymlink = {
  type: string;
  target: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
};

/**
 * An object describing a symlink
 */
export type ContentSubmodule = {
  type: string;
  submodule_git_url: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
};

/**
 * File Commit
 */
export type FileCommit = {
  content: {
    name?: string;

    path?: string;

    sha?: string;

    size?: number;

    url?: string;

    html_url?: string;

    git_url?: string;

    download_url?: string;

    type?: string;

    _links?: {
      self?: string;

      git?: string;

      html?: string;
    };
  };
  commit: {
    sha?: string;

    node_id?: string;

    url?: string;

    html_url?: string;

    author?: {
      date?: string;

      name?: string;

      email?: string;
    };

    committer?: {
      date?: string;

      name?: string;

      email?: string;
    };

    message?: string;

    tree?: {
      url?: string;

      sha?: string;
    };

    parents?: Array<{
      url?: string;

      html_url?: string;

      sha?: string;
    }>;

    verification?: {
      verified?: boolean;

      reason?: string;

      signature?: string;

      payload?: string;
    };
  };
};

/**
 * Contributor
 */
export type Contributor = {
  login?: string;
  id?: number;
  node_id?: string;
  avatar_url?: string;
  gravatar_id?: string;
  url?: string;
  html_url?: string;
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  starred_url?: string;
  subscriptions_url?: string;
  organizations_url?: string;
  repos_url?: string;
  events_url?: string;
  received_events_url?: string;
  type: string;
  site_admin?: boolean;
  contributions: number;
  email?: string;
  name?: string;
};

/**
 * Set secrets for Dependabot.
 */
export type DependabotSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
};

/**
 * A diff of the dependencies between two commits.
 */
export type DependencyGraphDiff = Array<{
  change_type: \\"added\\" | \\"removed\\";

  manifest: string;

  ecosystem: string;

  name: string;

  version: string;

  package_url: string;

  license: string;

  source_repository_url: string;

  vulnerabilities: Array<{
    severity: string;

    advisory_ghsa_id: string;

    advisory_summary: string;

    advisory_url: string;
  }>;
}>;

/**
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
export type Metadata = Record<string, string | number | boolean>;

/**
 * A single package dependency.
 */
export type Dependency = {
  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   */
  package_url?: string;
  metadata?: Metadata;

  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   */
  relationship?: \\"direct\\" | \\"indirect\\";

  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   */
  scope?: \\"runtime\\" | \\"development\\";

  /**
   * Array of package-url (PURLs) of direct child dependencies.
   */
  dependencies?: Array<string>;
};

/**
 * A collection of related dependencies declared in a file or representing a logical group of dependencies.
 */
export type Manifest = {
  /**
   * The name of the manifest.
   */
  name: string;
  file?: {
    /**
     * The path of the manifest file relative to the root of the Git repository.
     */
    source_location?: string;
  };
  metadata?: Metadata;
  resolved?: {};
};

/**
 * Create a new snapshot of a repository's dependencies.
 */
export type Snapshot = {
  /**
   * The version of the repository snapshot submission.
   */
  version: number;
  job: {
    /**
     * The external ID of the job.
     */
    id: string;

    /**
     * Correlator provides a key that is used to group snapshots submitted over time. Only the \\"latest\\" submitted snapshot for a given combination of \`job.correlator\` and \`detector.name\` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \\"wave\\" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
     */
    correlator: string;

    /**
     * The url for the job.
     */
    html_url?: string;
  };

  /**
   * The commit SHA associated with this dependency snapshot.
   */
  sha: string;

  /**
   * The repository branch that triggered this snapshot.
   */
  ref: string;

  /**
   * A description of the detector used.
   */
  detector: {
    /**
     * The name of the detector used.
     */
    name: string;

    /**
     * The version of the detector used.
     */
    version: string;

    /**
     * The url of the detector used.
     */
    url: string;
  };
  metadata?: Metadata;

  /**
   * A collection of package manifests
   */
  manifests?: Record<string, Manifest>;

  /**
   * The time at which the snapshot was scanned.
   */
  scanned: string;
};

/**
 * The status of a deployment.
 */
export type DeploymentStatus = {
  url: string;
  id: number;
  node_id: string;

  /**
   * The state of the status.
   */
  state: \\"error\\" | \\"failure\\" | \\"inactive\\" | \\"pending\\" | \\"success\\" | \\"queued\\" | \\"in_progress\\";
  creator: NullableSimpleUser;

  /**
   * A short description of the status.
   */
  description: string;

  /**
   * The environment of the deployment that the status is for.
   */
  environment?: string;

  /**
   * Deprecated: the URL to associate with this status.
   */
  target_url: string;
  created_at: string;
  updated_at: string;
  deployment_url: string;
  repository_url: string;

  /**
   * The URL for accessing your environment.
   */
  environment_url?: string;

  /**
   * The URL to associate with this status.
   */
  log_url?: string;
  performed_via_github_app?: NullableIntegration;
};

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 */
export type WaitTimer = number;

/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to \`null\`.
 */
export type DeploymentBranchPolicy = {
  /**
   * Whether only branches with branch protection rules can deploy to this environment. If \`protected_branches\` is \`true\`, \`custom_branch_policies\` must be \`false\`; if \`protected_branches\` is \`false\`, \`custom_branch_policies\` must be \`true\`.
   */
  protected_branches: boolean;

  /**
   * Whether only branches that match the specified name patterns can deploy to this environment.  If \`custom_branch_policies\` is \`true\`, \`protected_branches\` must be \`false\`; if \`custom_branch_policies\` is \`false\`, \`protected_branches\` must be \`true\`.
   */
  custom_branch_policies: boolean;
};

/**
 * Details of a deployment environment
 */
export type Environment = {
  /**
   * The id of the environment.
   */
  id: number;
  node_id: string;

  /**
   * The name of the environment.
   */
  name: string;
  url: string;
  html_url: string;

  /**
   * The time that the environment was created, in ISO 8601 format.
   */
  created_at: string;

  /**
   * The time that the environment was last updated, in ISO 8601 format.
   */
  updated_at: string;
  protection_rules?: Array<
    | {
        id: number;

        node_id: string;

        type: string;

        wait_timer?: WaitTimer;
      }
    | {
        id: number;

        node_id: string;

        type: string;

        /**
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: Array<{
          type?: DeploymentReviewerType;

          reviewer?: SimpleUser | Team;
        }>;
      }
    | {
        id: number;

        node_id: string;

        type: string;
      }
  >;
  deployment_branch_policy?: DeploymentBranchPolicy;
};

/**
 * Short Blob
 */
export type ShortBlob = {
  url: string;
  sha: string;
};

/**
 * Blob
 */
export type Blob = {
  content: string;
  encoding: string;
  url: string;
  sha: string;
  size: number;
  node_id: string;
  highlighted_content?: string;
};

/**
 * Low-level Git commit operations within a repository
 */
export type GitCommit = {
  /**
   * SHA for the commit
   */
  sha: string;
  node_id: string;
  url: string;

  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Git email address of the user
     */
    email: string;

    /**
     * Name of the git user
     */
    name: string;
  };

  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Git email address of the user
     */
    email: string;

    /**
     * Name of the git user
     */
    name: string;
  };

  /**
   * Message describing the purpose of the commit
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;
  };
  parents: Array<{
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;

    html_url: string;
  }>;
  verification: {
    verified: boolean;

    reason: string;

    signature: string;

    payload: string;
  };
  html_url: string;
};

/**
 * Git references within a repository
 */
export type GitRef = {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;

    /**
     * SHA for the reference
     */
    sha: string;

    url: string;
  };
};

/**
 * Metadata for a Git tag
 */
export type GitTag = {
  node_id: string;

  /**
   * Name of the tag
   */
  tag: string;
  sha: string;

  /**
   * URL for the tag
   */
  url: string;

  /**
   * Message describing the purpose of the tag
   */
  message: string;
  tagger: {
    date: string;

    email: string;

    name: string;
  };
  object: {
    sha: string;

    type: string;

    url: string;
  };
  verification?: Verification;
};

/**
 * The hierarchy between files in a Git repository.
 */
export type GitTree = {
  sha: string;
  url: string;
  truncated: boolean;

  /**
   * Objects specifying a tree structure
   */
  tree: Array<{
    path?: string;

    mode?: string;

    type?: string;

    sha?: string;

    size?: number;

    url?: string;
  }>;
};

export type HookResponse = {
  code: number;
  status: string;
  message: string;
};

/**
 * Webhooks for repositories.
 */
export type Hook = {
  type: string;

  /**
   * Unique identifier of the webhook.
   */
  id: number;

  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name: string;

  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active: boolean;

  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  events: Array<string>;
  config: {
    email?: string;

    password?: string;

    room?: string;

    subdomain?: string;

    url?: WebhookConfigUrl;

    insecure_ssl?: WebhookConfigInsecureSsl;

    content_type?: WebhookConfigContentType;

    digest?: string;

    secret?: WebhookConfigSecret;

    token?: string;
  };
  updated_at: string;
  created_at: string;
  url: string;
  test_url: string;
  ping_url: string;
  deliveries_url?: string;
  last_response: HookResponse;
};

/**
 * A repository import from an external source.
 */
export type Import = {
  vcs: string;
  use_lfs?: boolean;

  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  svc_root?: string;
  tfvc_project?: string;
  status:
    | \\"auth\\"
    | \\"error\\"
    | \\"none\\"
    | \\"detecting\\"
    | \\"choose\\"
    | \\"auth_failed\\"
    | \\"importing\\"
    | \\"mapping\\"
    | \\"waiting_to_push\\"
    | \\"pushing\\"
    | \\"complete\\"
    | \\"setup\\"
    | \\"unknown\\"
    | \\"detection_found_multiple\\"
    | \\"detection_found_nothing\\"
    | \\"detection_needs_auth\\";
  status_text?: string;
  failed_step?: string;
  error_message?: string;
  import_percent?: number;
  commit_count?: number;
  push_percent?: number;
  has_large_files?: boolean;
  large_files_size?: number;
  large_files_count?: number;
  project_choices?: Array<{
    vcs?: string;

    tfvc_project?: string;

    human_name?: string;
  }>;
  message?: string;
  authors_count?: number;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root?: string;
};

/**
 * Porter Author
 */
export type PorterAuthor = {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  url: string;
  import_url: string;
};

/**
 * Porter Large File
 */
export type PorterLargeFile = {
  ref_name: string;
  path: string;
  oid: string;
  size: number;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type NullableIssue = {
  id: number;
  node_id: string;

  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;

  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;

  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;

  /**
   * The reason for the current state
   */
  state_reason?: string;

  /**
   * Title of the issue
   */
  title: string;

  /**
   * Contents of the issue
   */
  body?: string;
  user: NullableSimpleUser;

  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: Array<
    | string
    | {
        id?: number;

        node_id?: string;

        url?: string;

        name?: string;

        description?: string;

        color?: string;

        default?: boolean;
      }
  >;
  assignee: NullableSimpleUser;
  assignees?: Array<SimpleUser>;
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string;
  comments: number;
  pull_request?: {
    merged_at?: string;

    diff_url: string;

    html_url: string;

    patch_url: string;

    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  draft?: boolean;
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  repository?: Repository;
  performed_via_github_app?: NullableIntegration;
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
};

/**
 * Issue Event Label
 */
export type IssueEventLabel = {
  name: string;
  color: string;
};

export type IssueEventDismissedReview = {
  state: string;
  review_id: number;
  dismissal_message: string;
  dismissal_commit_id?: string;
};

/**
 * Issue Event Milestone
 */
export type IssueEventMilestone = {
  title: string;
};

/**
 * Issue Event Project Card
 */
export type IssueEventProjectCard = {
  url: string;
  id: number;
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name?: string;
};

/**
 * Issue Event Rename
 */
export type IssueEventRename = {
  from: string;
  to: string;
};

/**
 * Issue Event
 */
export type IssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: NullableSimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  issue?: NullableIssue;
  label?: IssueEventLabel;
  assignee?: NullableSimpleUser;
  assigner?: NullableSimpleUser;
  review_requester?: NullableSimpleUser;
  requested_reviewer?: NullableSimpleUser;
  requested_team?: Team;
  dismissed_review?: IssueEventDismissedReview;
  milestone?: IssueEventMilestone;
  project_card?: IssueEventProjectCard;
  rename?: IssueEventRename;
  author_association?: AuthorAssociation;
  lock_reason?: string;
  performed_via_github_app?: NullableIntegration;
};

/**
 * Labeled Issue Event
 */
export type LabeledIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;

    color: string;
  };
};

/**
 * Unlabeled Issue Event
 */
export type UnlabeledIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;

    color: string;
  };
};

/**
 * Assigned Issue Event
 */
export type AssignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: Integration;
  assignee: SimpleUser;
  assigner: SimpleUser;
};

/**
 * Unassigned Issue Event
 */
export type UnassignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  assignee: SimpleUser;
  assigner: SimpleUser;
};

/**
 * Milestoned Issue Event
 */
export type MilestonedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
};

/**
 * Demilestoned Issue Event
 */
export type DemilestonedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
};

/**
 * Renamed Issue Event
 */
export type RenamedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  rename: {
    from: string;

    to: string;
  };
};

/**
 * Review Requested Issue Event
 */
export type ReviewRequestedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  review_requester: SimpleUser;
  requested_team?: Team;
  requested_reviewer?: SimpleUser;
};

/**
 * Review Request Removed Issue Event
 */
export type ReviewRequestRemovedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  review_requester: SimpleUser;
  requested_team?: Team;
  requested_reviewer?: SimpleUser;
};

/**
 * Review Dismissed Issue Event
 */
export type ReviewDismissedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  dismissed_review: {
    state: string;

    review_id: number;

    dismissal_message: string;

    dismissal_commit_id?: string;
  };
};

/**
 * Locked Issue Event
 */
export type LockedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  lock_reason: string;
};

/**
 * Added to Project Issue Event
 */
export type AddedToProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    project_url: string;

    column_name: string;

    previous_column_name?: string;
  };
};

/**
 * Moved Column in Project Issue Event
 */
export type MovedColumnInProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    project_url: string;

    column_name: string;

    previous_column_name?: string;
  };
};

/**
 * Removed from Project Issue Event
 */
export type RemovedFromProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    project_url: string;

    column_name: string;

    previous_column_name?: string;
  };
};

/**
 * Converted Note to Issue Issue Event
 */
export type ConvertedNoteToIssueIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: Integration;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    project_url: string;

    column_name: string;

    previous_column_name?: string;
  };
};

/**
 * Issue Event for Issue
 */
export type IssueEventForIssue =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | AssignedIssueEvent
  | UnassignedIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent;

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export type Label = {
  id: number;
  node_id: string;

  /**
   * URL for the label
   */
  url: string;

  /**
   * The name of the label.
   */
  name: string;
  description: string;

  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
};

/**
 * Timeline Comment Event
 */
export type TimelineCommentEvent = {
  event: string;
  actor: SimpleUser;

  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;

  /**
   * URL for the issue comment
   */
  url: string;

  /**
   * Contents of the issue comment
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
};

/**
 * Timeline Cross Referenced Event
 */
export type TimelineCrossReferencedEvent = {
  event: string;
  actor?: SimpleUser;
  created_at: string;
  updated_at: string;
  source: {
    type?: string;

    issue?: Issue;
  };
};

/**
 * Timeline Committed Event
 */
export type TimelineCommittedEvent = {
  event?: string;

  /**
   * SHA for the commit
   */
  sha: string;
  node_id: string;
  url: string;

  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Git email address of the user
     */
    email: string;

    /**
     * Name of the git user
     */
    name: string;
  };

  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Git email address of the user
     */
    email: string;

    /**
     * Name of the git user
     */
    name: string;
  };

  /**
   * Message describing the purpose of the commit
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;
  };
  parents: Array<{
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;

    html_url: string;
  }>;
  verification: {
    verified: boolean;

    reason: string;

    signature: string;

    payload: string;
  };
  html_url: string;
};

/**
 * Timeline Reviewed Event
 */
export type TimelineReviewedEvent = {
  event: string;

  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;

  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };

    pull_request: {
      href: string;
    };
  };
  submitted_at?: string;

  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  author_association: AuthorAssociation;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export type PullRequestReviewComment = {
  /**
   * URL for the pull request review comment
   */
  url: string;

  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;

  /**
   * The ID of the pull request review comment.
   */
  id: number;

  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;

  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;

  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;

  /**
   * The line index in the diff to which the comment applies. This field is deprecated; use \`line\` instead.
   */
  position: number;

  /**
   * The index of the original line in the diff to which the comment applies. This field is deprecated; use \`original_line\` instead.
   */
  original_position: number;

  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;

  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;

  /**
   * The comment ID to reply to.
   */
  in_reply_to_id?: number;
  user: SimpleUser;

  /**
   * The text of the comment.
   */
  body: string;
  created_at: string;
  updated_at: string;

  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;

  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  author_association: AuthorAssociation;
  _links: {
    self: {
      href: string;
    };

    html: {
      href: string;
    };

    pull_request: {
      href: string;
    };
  };

  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number;

  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line?: number;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: \\"LEFT\\" | \\"RIGHT\\";

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number;

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number;

  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side?: \\"LEFT\\" | \\"RIGHT\\";
  reactions?: ReactionRollup;
  body_html?: string;
  body_text?: string;
};

/**
 * Timeline Line Commented Event
 */
export type TimelineLineCommentedEvent = {
  event?: string;
  node_id?: string;
  comments?: Array<PullRequestReviewComment>;
};

/**
 * Timeline Commit Commented Event
 */
export type TimelineCommitCommentedEvent = {
  event?: string;
  node_id?: string;
  commit_id?: string;
  comments?: Array<CommitComment>;
};

/**
 * Timeline Assigned Issue Event
 */
export type TimelineAssignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  assignee: SimpleUser;
};

/**
 * Timeline Unassigned Issue Event
 */
export type TimelineUnassignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  assignee: SimpleUser;
};

/**
 * State Change Issue Event
 */
export type StateChangeIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  state_reason?: string;
};

/**
 * Timeline Event
 */
export type TimelineIssueEvents =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent
  | TimelineCommentEvent
  | TimelineCrossReferencedEvent
  | TimelineCommittedEvent
  | TimelineReviewedEvent
  | TimelineLineCommentedEvent
  | TimelineCommitCommentedEvent
  | TimelineAssignedIssueEvent
  | TimelineUnassignedIssueEvent
  | StateChangeIssueEvent;

/**
 * An SSH key granting access to a single repository.
 */
export type DeployKey = {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
};

/**
 * Language
 */
export type Language = Record<string, number>;

/**
 * License Content
 */
export type LicenseContent = {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string;
  git_url: string;
  download_url: string;
  type: string;
  content: string;
  encoding: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
  license: NullableLicenseSimple;
};

/**
 * Results of a successful merge upstream request
 */
export type MergedUpstream = {
  message?: string;
  merge_type?: \\"merge\\" | \\"fast-forward\\" | \\"none\\";
  base_branch?: string;
};

/**
 * A collection of related issues and pull requests.
 */
export type Milestone = {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;

  /**
   * The number of the milestone.
   */
  number: number;

  /**
   * The state of the milestone.
   */
  state: \\"open\\" | \\"closed\\";

  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: NullableSimpleUser;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
};

export type PagesSourceHash = {
  branch: string;
  path: string;
};

export type PagesHttpsCertificate = {
  state:
    | \\"new\\"
    | \\"authorization_created\\"
    | \\"authorization_pending\\"
    | \\"authorized\\"
    | \\"authorization_revoked\\"
    | \\"issued\\"
    | \\"uploaded\\"
    | \\"approved\\"
    | \\"errored\\"
    | \\"bad_authz\\"
    | \\"destroy_pending\\"
    | \\"dns_changed\\";
  description: string;

  /**
   * Array of the domain set and its alternate name (if it is configured)
   */
  domains: Array<string>;
  expires_at?: string;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export type Page = {
  /**
   * The API address for accessing this Page resource.
   */
  url: string;

  /**
   * The status of the most recent build of the Page.
   */
  status: \\"built\\" | \\"building\\" | \\"errored\\";

  /**
   * The Pages site's custom domain
   */
  cname: string;

  /**
   * The state if the domain is verified
   */
  protected_domain_state?: \\"pending\\" | \\"verified\\" | \\"unverified\\";

  /**
   * The timestamp when a pending domain becomes unverified.
   */
  pending_domain_unverified_at?: string;

  /**
   * Whether the Page has a custom 404 page.
   */
  custom_404: boolean;

  /**
   * The web address the Page can be accessed from.
   */
  html_url?: string;

  /**
   * The process in which the Page will be built.
   */
  build_type?: \\"legacy\\" | \\"workflow\\";
  source?: PagesSourceHash;

  /**
   * Whether the GitHub Pages site is publicly visible. If set to \`true\`, the site is accessible to anyone on the internet. If set to \`false\`, the site will only be accessible to users who have at least \`read\` access to the repository that published the site.
   */
  public: boolean;
  https_certificate?: PagesHttpsCertificate;

  /**
   * Whether https is enabled on the domain
   */
  https_enforced?: boolean;
};

/**
 * Page Build
 */
export type PageBuild = {
  url: string;
  status: string;
  error: {
    message: string;
  };
  pusher: NullableSimpleUser;
  commit: string;
  duration: number;
  created_at: string;
  updated_at: string;
};

/**
 * Page Build Status
 */
export type PageBuildStatus = {
  url: string;
  status: string;
};

/**
 * Pages Health Check Status
 */
export type PagesHealthCheck = {
  domain?: {
    host?: string;

    uri?: string;

    nameservers?: string;

    dns_resolves?: boolean;

    is_proxied?: boolean;

    is_cloudflare_ip?: boolean;

    is_fastly_ip?: boolean;

    is_old_ip_address?: boolean;

    is_a_record?: boolean;

    has_cname_record?: boolean;

    has_mx_records_present?: boolean;

    is_valid_domain?: boolean;

    is_apex_domain?: boolean;

    should_be_a_record?: boolean;

    is_cname_to_github_user_domain?: boolean;

    is_cname_to_pages_dot_github_dot_com?: boolean;

    is_cname_to_fastly?: boolean;

    is_pointed_to_github_pages_ip?: boolean;

    is_non_github_pages_ip_present?: boolean;

    is_pages_domain?: boolean;

    is_served_by_pages?: boolean;

    is_valid?: boolean;

    reason?: string;

    responds_to_https?: boolean;

    enforces_https?: boolean;

    https_error?: string;

    is_https_eligible?: boolean;

    caa_error?: string;
  };
  alt_domain?: {
    host?: string;

    uri?: string;

    nameservers?: string;

    dns_resolves?: boolean;

    is_proxied?: boolean;

    is_cloudflare_ip?: boolean;

    is_fastly_ip?: boolean;

    is_old_ip_address?: boolean;

    is_a_record?: boolean;

    has_cname_record?: boolean;

    has_mx_records_present?: boolean;

    is_valid_domain?: boolean;

    is_apex_domain?: boolean;

    should_be_a_record?: boolean;

    is_cname_to_github_user_domain?: boolean;

    is_cname_to_pages_dot_github_dot_com?: boolean;

    is_cname_to_fastly?: boolean;

    is_pointed_to_github_pages_ip?: boolean;

    is_non_github_pages_ip_present?: boolean;

    is_pages_domain?: boolean;

    is_served_by_pages?: boolean;

    is_valid?: boolean;

    reason?: string;

    responds_to_https?: boolean;

    enforces_https?: boolean;

    https_error?: string;

    is_https_eligible?: boolean;

    caa_error?: string;
  };
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamSimple = {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;

  /**
   * URL for the team
   */
  url: string;
  members_url: string;

  /**
   * Name of the team
   */
  name: string;

  /**
   * Description of the team
   */
  description: string;

  /**
   * Permission that the team will have for its repositories
   */
  permission: string;

  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;

  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export type PullRequest = {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;

  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number: number;

  /**
   * State of this Pull Request. Either \`open\` or \`closed\`.
   */
  state: \\"open\\" | \\"closed\\";
  locked: boolean;

  /**
   * The title of the pull request.
   */
  title: string;
  user: NullableSimpleUser;
  body: string;
  labels: Array<{
    id: number;

    node_id: string;

    url: string;

    name: string;

    description: string;

    color: string;

    default: boolean;
  }>;
  milestone: NullableMilestone;
  active_lock_reason?: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: NullableSimpleUser;
  assignees?: Array<SimpleUser>;
  requested_reviewers?: Array<SimpleUser>;
  requested_teams?: Array<TeamSimple>;
  head: {
    label: string;

    ref: string;

    repo: {
      archive_url: string;

      assignees_url: string;

      blobs_url: string;

      branches_url: string;

      collaborators_url: string;

      comments_url: string;

      commits_url: string;

      compare_url: string;

      contents_url: string;

      contributors_url: string;

      deployments_url: string;

      description: string;

      downloads_url: string;

      events_url: string;

      fork: boolean;

      forks_url: string;

      full_name: string;

      git_commits_url: string;

      git_refs_url: string;

      git_tags_url: string;

      hooks_url: string;

      html_url: string;

      id: number;

      node_id: string;

      issue_comment_url: string;

      issue_events_url: string;

      issues_url: string;

      keys_url: string;

      labels_url: string;

      languages_url: string;

      merges_url: string;

      milestones_url: string;

      name: string;

      notifications_url: string;

      owner: {
        avatar_url: string;

        events_url: string;

        followers_url: string;

        following_url: string;

        gists_url: string;

        gravatar_id: string;

        html_url: string;

        id: number;

        node_id: string;

        login: string;

        organizations_url: string;

        received_events_url: string;

        repos_url: string;

        site_admin: boolean;

        starred_url: string;

        subscriptions_url: string;

        type: string;

        url: string;
      };

      private: boolean;

      pulls_url: string;

      releases_url: string;

      stargazers_url: string;

      statuses_url: string;

      subscribers_url: string;

      subscription_url: string;

      tags_url: string;

      teams_url: string;

      trees_url: string;

      url: string;

      clone_url: string;

      default_branch: string;

      forks: number;

      forks_count: number;

      git_url: string;

      has_downloads: boolean;

      has_issues: boolean;

      has_projects: boolean;

      has_wiki: boolean;

      has_pages: boolean;

      homepage: string;

      language: string;

      master_branch?: string;

      archived: boolean;

      disabled: boolean;

      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;

      mirror_url: string;

      open_issues: number;

      open_issues_count: number;

      permissions?: {
        admin: boolean;

        maintain?: boolean;

        push: boolean;

        triage?: boolean;

        pull: boolean;
      };

      temp_clone_token?: string;

      allow_merge_commit?: boolean;

      allow_squash_merge?: boolean;

      allow_rebase_merge?: boolean;

      license: {
        key: string;

        name: string;

        url: string;

        spdx_id: string;

        node_id: string;
      };

      pushed_at: string;

      size: number;

      ssh_url: string;

      stargazers_count: number;

      svn_url: string;

      topics?: Array<string>;

      watchers: number;

      watchers_count: number;

      created_at: string;

      updated_at: string;

      allow_forking?: boolean;

      is_template?: boolean;
    };

    sha: string;

    user: {
      avatar_url: string;

      events_url: string;

      followers_url: string;

      following_url: string;

      gists_url: string;

      gravatar_id: string;

      html_url: string;

      id: number;

      node_id: string;

      login: string;

      organizations_url: string;

      received_events_url: string;

      repos_url: string;

      site_admin: boolean;

      starred_url: string;

      subscriptions_url: string;

      type: string;

      url: string;
    };
  };
  base: {
    label: string;

    ref: string;

    repo: {
      archive_url: string;

      assignees_url: string;

      blobs_url: string;

      branches_url: string;

      collaborators_url: string;

      comments_url: string;

      commits_url: string;

      compare_url: string;

      contents_url: string;

      contributors_url: string;

      deployments_url: string;

      description: string;

      downloads_url: string;

      events_url: string;

      fork: boolean;

      forks_url: string;

      full_name: string;

      git_commits_url: string;

      git_refs_url: string;

      git_tags_url: string;

      hooks_url: string;

      html_url: string;

      id: number;

      is_template?: boolean;

      node_id: string;

      issue_comment_url: string;

      issue_events_url: string;

      issues_url: string;

      keys_url: string;

      labels_url: string;

      languages_url: string;

      merges_url: string;

      milestones_url: string;

      name: string;

      notifications_url: string;

      owner: {
        avatar_url: string;

        events_url: string;

        followers_url: string;

        following_url: string;

        gists_url: string;

        gravatar_id: string;

        html_url: string;

        id: number;

        node_id: string;

        login: string;

        organizations_url: string;

        received_events_url: string;

        repos_url: string;

        site_admin: boolean;

        starred_url: string;

        subscriptions_url: string;

        type: string;

        url: string;
      };

      private: boolean;

      pulls_url: string;

      releases_url: string;

      stargazers_url: string;

      statuses_url: string;

      subscribers_url: string;

      subscription_url: string;

      tags_url: string;

      teams_url: string;

      trees_url: string;

      url: string;

      clone_url: string;

      default_branch: string;

      forks: number;

      forks_count: number;

      git_url: string;

      has_downloads: boolean;

      has_issues: boolean;

      has_projects: boolean;

      has_wiki: boolean;

      has_pages: boolean;

      homepage: string;

      language: string;

      master_branch?: string;

      archived: boolean;

      disabled: boolean;

      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;

      mirror_url: string;

      open_issues: number;

      open_issues_count: number;

      permissions?: {
        admin: boolean;

        maintain?: boolean;

        push: boolean;

        triage?: boolean;

        pull: boolean;
      };

      temp_clone_token?: string;

      allow_merge_commit?: boolean;

      allow_squash_merge?: boolean;

      allow_rebase_merge?: boolean;

      license: NullableLicenseSimple;

      pushed_at: string;

      size: number;

      ssh_url: string;

      stargazers_count: number;

      svn_url: string;

      topics?: Array<string>;

      watchers: number;

      watchers_count: number;

      created_at: string;

      updated_at: string;

      allow_forking?: boolean;
    };

    sha: string;

    user: {
      avatar_url: string;

      events_url: string;

      followers_url: string;

      following_url: string;

      gists_url: string;

      gravatar_id: string;

      html_url: string;

      id: number;

      node_id: string;

      login: string;

      organizations_url: string;

      received_events_url: string;

      repos_url: string;

      site_admin: boolean;

      starred_url: string;

      subscriptions_url: string;

      type: string;

      url: string;
    };
  };
  _links: {
    comments: Link;

    commits: Link;

    statuses: Link;

    html: Link;

    issue: Link;

    review_comments: Link;

    review_comment: Link;

    self: Link;
  };
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;

  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
  merged: boolean;
  mergeable: boolean;
  rebaseable?: boolean;
  mergeable_state: string;
  merged_by: NullableSimpleUser;
  comments: number;
  review_comments: number;

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify: boolean;
  commits: number;
  additions: number;
  deletions: number;
  changed_files: number;
};

/**
 * Pull Request Merge Result
 */
export type PullRequestMergeResult = {
  sha: string;
  merged: boolean;
  message: string;
};

/**
 * Pull Request Review Request
 */
export type PullRequestReviewRequest = {
  users: Array<SimpleUser>;
  teams: Array<Team>;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export type PullRequestReview = {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: NullableSimpleUser;

  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };

    pull_request: {
      href: string;
    };
  };
  submitted_at?: string;

  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  author_association: AuthorAssociation;
};

/**
 * Legacy Review Comment
 */
export type ReviewComment = {
  url: string;
  pull_request_review_id: number;
  id: number;
  node_id: string;
  diff_hunk: string;
  path: string;
  position: number;
  original_position: number;
  commit_id: string;
  original_commit_id: string;
  in_reply_to_id?: number;
  user: NullableSimpleUser;
  body: string;
  created_at: string;
  updated_at: string;
  html_url: string;
  pull_request_url: string;
  author_association: AuthorAssociation;
  _links: {
    self: Link;

    html: Link;

    pull_request: Link;
  };
  body_text?: string;
  body_html?: string;
  reactions?: ReactionRollup;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  side?: \\"LEFT\\" | \\"RIGHT\\";

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: \\"LEFT\\" | \\"RIGHT\\";

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number;

  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number;

  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number;

  /**
   * The original first line of the range for a multi-line comment.
   */
  original_start_line?: number;
};

/**
 * Data related to a release.
 */
export type ReleaseAsset = {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;

  /**
   * The file name of the asset.
   */
  name: string;
  label: string;

  /**
   * State of the release asset.
   */
  state: \\"uploaded\\" | \\"open\\";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: NullableSimpleUser;
};

/**
 * A release.
 */
export type Release = {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  id: number;
  node_id: string;

  /**
   * The name of the tag.
   */
  tag_name: string;

  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  name: string;
  body?: string;

  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;

  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: string;
  published_at: string;
  author: SimpleUser;
  assets: Array<ReleaseAsset>;
  body_html?: string;
  body_text?: string;
  mentions_count?: number;

  /**
   * The URL of the release discussion.
   */
  discussion_url?: string;
  reactions?: ReactionRollup;
};

/**
 * Generated name and body describing a release
 */
export type ReleaseNotesContent = {
  /**
   * The generated name of the release
   */
  name: string;

  /**
   * The generated body describing the contents of the release supporting markdown formatting
   */
  body: string;
};

export type SecretScanningAlert = {
  number?: AlertNumber;
  created_at?: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  url?: AlertUrl;
  html_url?: AlertHtmlUrl;

  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  state?: SecretScanningAlertState;
  resolution?: SecretScanningAlertResolution;

  /**
   * The time that the alert was resolved in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  resolved_at?: string;
  resolved_by?: NullableSimpleUser;

  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;

  /** 
* User-friendly name for the detected secret, matching the \`secret_type\`.
For a list of built-in patterns, see \\"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\\"
*/
  secret_type_display_name?: string;

  /**
   * The secret that was detected.
   */
  secret?: string;

  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean;
  push_protection_bypassed_by?: NullableSimpleUser;

  /**
   * The time that push protection was bypassed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  push_protection_bypassed_at?: string;
};

/**
 * Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
 */
export type SecretScanningLocationCommit = {
  /**
   * The file path in the repository
   */
  path: string;

  /**
   * Line number at which the secret starts in the file
   */
  start_line: number;

  /**
   * Line number at which the secret ends in the file
   */
  end_line: number;

  /**
   * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
   */
  start_column: number;

  /**
   * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
   */
  end_column: number;

  /**
   * SHA-1 hash ID of the associated blob
   */
  blob_sha: string;

  /**
   * The API URL to get the associated blob resource
   */
  blob_url: string;

  /**
   * SHA-1 hash ID of the associated commit
   */
  commit_sha: string;

  /**
   * The API URL to get the associated commit resource
   */
  commit_url: string;
};

export type SecretScanningLocation = {
  /**
   * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
   */
  type: \\"commit\\";
  details: SecretScanningLocationCommit;
};

/**
 * Stargazer
 */
export type Stargazer = {
  starred_at: string;
  user: NullableSimpleUser;
};

/**
 * Code Frequency Stat
 */
export type CodeFrequencyStat = Array<number>;

/**
 * Commit Activity
 */
export type CommitActivity = {
  days: Array<number>;
  total: number;
  week: number;
};

/**
 * Contributor Activity
 */
export type ContributorActivity = {
  author: NullableSimpleUser;
  total: number;
  weeks: Array<{
    w?: number;

    a?: number;

    d?: number;

    c?: number;
  }>;
};

export type ParticipationStats = {
  all: Array<number>;
  owner: Array<number>;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositorySubscription = {
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed: boolean;

  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string;
  created_at: string;
  url: string;
  repository_url: string;
};

/**
 * Tag
 */
export type Tag = {
  name: string;
  commit: {
    sha: string;

    url: string;
  };
  zipball_url: string;
  tarball_url: string;
  node_id: string;
};

/**
 * Tag protection
 */
export type TagProtection = {
  id?: number;
  created_at?: string;
  updated_at?: string;
  enabled?: boolean;
  pattern: string;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export type Topic = {
  names: Array<string>;
};

export type Traffic = {
  timestamp: string;
  uniques: number;
  count: number;
};

/**
 * Clone Traffic
 */
export type CloneTraffic = {
  count: number;
  uniques: number;
  clones: Array<Traffic>;
};

/**
 * Content Traffic
 */
export type ContentTraffic = {
  path: string;
  title: string;
  count: number;
  uniques: number;
};

/**
 * Referrer Traffic
 */
export type ReferrerTraffic = {
  referrer: string;
  count: number;
  uniques: number;
};

/**
 * View Traffic
 */
export type ViewTraffic = {
  count: number;
  uniques: number;
  views: Array<Traffic>;
};

export type ScimGroupListEnterprise = {
  schemas: Array<string>;
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: Array<{
    schemas: Array<string>;

    id: string;

    externalId?: string;

    displayName?: string;

    members?: Array<{
      value?: string;

      $ref?: string;

      display?: string;
    }>;

    meta?: {
      resourceType?: string;

      created?: string;

      lastModified?: string;

      location?: string;
    };
  }>;
};

export type ScimEnterpriseGroup = {
  schemas: Array<string>;
  id: string;
  externalId?: string;
  displayName?: string;
  members?: Array<{
    value?: string;

    $ref?: string;

    display?: string;
  }>;
  meta?: {
    resourceType?: string;

    created?: string;

    lastModified?: string;

    location?: string;
  };
};

export type ScimUserListEnterprise = {
  schemas: Array<string>;
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: Array<{
    schemas: Array<string>;

    id: string;

    externalId?: string;

    userName?: string;

    name?: {
      givenName?: string;

      familyName?: string;
    };

    emails?: Array<{
      value?: string;

      primary?: boolean;

      type?: string;
    }>;

    groups?: Array<{
      value?: string;
    }>;

    active?: boolean;

    meta?: {
      resourceType?: string;

      created?: string;

      lastModified?: string;

      location?: string;
    };
  }>;
};

export type ScimEnterpriseUser = {
  schemas: Array<string>;
  id: string;
  externalId?: string;
  userName?: string;
  name?: {
    givenName?: string;

    familyName?: string;
  };
  emails?: Array<{
    value?: string;

    type?: string;

    primary?: boolean;
  }>;
  groups?: Array<{
    value?: string;
  }>;
  active?: boolean;
  meta?: {
    resourceType?: string;

    created?: string;

    lastModified?: string;

    location?: string;
  };
};

/**
 * SCIM /Users provisioning endpoints
 */
export type ScimUser = {
  /**
   * SCIM schema used.
   */
  schemas: Array<string>;

  /**
   * Unique identifier of an external identity
   */
  id: string;

  /**
   * The ID of the User.
   */
  externalId: string;

  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;

  /**
   * The name of the user, suitable for display to end-users
   */
  displayName?: string;
  name: {
    givenName: string;

    familyName: string;

    formatted?: string;
  };

  /**
   * user emails
   */
  emails: Array<{
    value: string;

    primary?: boolean;
  }>;

  /**
   * The active status of the User.
   */
  active: boolean;
  meta: {
    resourceType?: string;

    created?: string;

    lastModified?: string;

    location?: string;
  };

  /**
   * The ID of the organization.
   */
  organization_id?: number;

  /**
   * Set of operations to be performed
   */
  operations?: Array<{
    op: \\"add\\" | \\"remove\\" | \\"replace\\";

    path?: string;

    value?: string;
  }>;

  /**
   * associated groups
   */
  groups?: Array<{}>;
};

/**
 * SCIM User List
 */
export type ScimUserList = {
  /**
   * SCIM schema used.
   */
  schemas: Array<string>;
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: Array<ScimUser>;
};

export type SearchResultTextMatches = Array<{
  object_url?: string;

  object_type?: string;

  property?: string;

  fragment?: string;

  matches?: Array<{
    text?: string;

    indices?: Array<number>;
  }>;
}>;

/**
 * Code Search Result Item
 */
export type CodeSearchResultItem = {
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  repository: MinimalRepository;
  score: number;
  file_size?: number;
  language?: string;
  last_modified_at?: string;
  line_numbers?: Array<string>;
  text_matches?: SearchResultTextMatches;
};

/**
 * Commit Search Result Item
 */
export type CommitSearchResultItem = {
  url: string;
  sha: string;
  html_url: string;
  comments_url: string;
  commit: {
    author: {
      name: string;

      email: string;

      date: string;
    };

    committer: NullableGitUser;

    comment_count: number;

    message: string;

    tree: {
      sha: string;

      url: string;
    };

    url: string;

    verification?: Verification;
  };
  author: NullableSimpleUser;
  committer: NullableGitUser;
  parents: Array<{
    url?: string;

    html_url?: string;

    sha?: string;
  }>;
  repository: MinimalRepository;
  score: number;
  node_id: string;
  text_matches?: SearchResultTextMatches;
};

/**
 * Issue Search Result Item
 */
export type IssueSearchResultItem = {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  locked: boolean;
  active_lock_reason?: string;
  assignees?: Array<SimpleUser>;
  user: NullableSimpleUser;
  labels: Array<{
    id?: number;

    node_id?: string;

    url?: string;

    name?: string;

    color?: string;

    default?: boolean;

    description?: string;
  }>;
  state: string;
  state_reason?: string;
  assignee: NullableSimpleUser;
  milestone: NullableMilestone;
  comments: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  text_matches?: SearchResultTextMatches;
  pull_request?: {
    merged_at?: string;

    diff_url: string;

    html_url: string;

    patch_url: string;

    url: string;
  };
  body?: string;
  score: number;
  author_association: AuthorAssociation;
  draft?: boolean;
  repository?: Repository;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
};

/**
 * Label Search Result Item
 */
export type LabelSearchResultItem = {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
  description: string;
  score: number;
  text_matches?: SearchResultTextMatches;
};

/**
 * Repo Search Result Item
 */
export type RepoSearchResultItem = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: NullableSimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  homepage: string;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string;
  forks_count: number;
  open_issues_count: number;
  master_branch?: string;
  default_branch: string;
  score: number;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  forks: number;
  open_issues: number;
  watchers: number;
  topics?: Array<string>;
  mirror_url: string;
  has_issues: boolean;
  has_projects: boolean;
  has_pages: boolean;
  has_wiki: boolean;
  has_downloads: boolean;
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  license: NullableLicenseSimple;
  permissions?: {
    admin: boolean;

    maintain?: boolean;

    push: boolean;

    triage?: boolean;

    pull: boolean;
  };
  text_matches?: SearchResultTextMatches;
  temp_clone_token?: string;
  allow_merge_commit?: boolean;
  allow_squash_merge?: boolean;
  allow_rebase_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  allow_forking?: boolean;
  is_template?: boolean;
};

/**
 * Topic Search Result Item
 */
export type TopicSearchResultItem = {
  name: string;
  display_name: string;
  short_description: string;
  description: string;
  created_by: string;
  released: string;
  created_at: string;
  updated_at: string;
  featured: boolean;
  curated: boolean;
  score: number;
  repository_count?: number;
  logo_url?: string;
  text_matches?: SearchResultTextMatches;
  related?: Array<{
    topic_relation?: {
      id?: number;

      name?: string;

      topic_id?: number;

      relation_type?: string;
    };
  }>;
  aliases?: Array<{
    topic_relation?: {
      id?: number;

      name?: string;

      topic_id?: number;

      relation_type?: string;
    };
  }>;
};

/**
 * User Search Result Item
 */
export type UserSearchResultItem = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  received_events_url: string;
  type: string;
  score: number;
  following_url: string;
  gists_url: string;
  starred_url: string;
  events_url: string;
  public_repos?: number;
  public_gists?: number;
  followers?: number;
  following?: number;
  created_at?: string;
  updated_at?: string;
  name?: string;
  bio?: string;
  email?: string;
  location?: string;
  site_admin: boolean;
  hireable?: boolean;
  text_matches?: SearchResultTextMatches;
  blog?: string;
  company?: string;
  suspended_at?: string;
};

/**
 * Private User
 */
export type PrivateUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  hireable: boolean;
  bio: string;
  twitter_username?: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  private_gists: number;
  total_private_repos: number;
  owned_private_repos: number;
  disk_usage: number;
  collaborators: number;
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;

    name: string;

    space: number;

    private_repos: number;
  };
  suspended_at?: string;
  business_plus?: boolean;
  ldap_dn?: string;
};

/**
 * Secrets for a GitHub Codespace.
 */
export type CodespacesSecret = {
  /**
   * The name of the secret
   */
  name: string;

  /**
   * Secret created at
   */
  created_at: string;

  /**
   * Secret last updated at
   */
  updated_at: string;

  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: \\"all\\" | \\"private\\" | \\"selected\\";

  /**
   * API URL at which the list of repositories this secret is vicible can be retrieved
   */
  selected_repositories_url: string;
};

/**
 * The public key used for setting user Codespaces' Secrets.
 */
export type CodespacesUserPublicKey = {
  /**
   * The identifier for the key.
   */
  key_id: string;

  /**
   * The Base64 encoded public key.
   */
  key: string;
};

/**
 * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
export type CodespaceExportDetails = {
  /**
   * State of the latest export
   */
  state?: string;

  /**
   * Completion time of the last export operation
   */
  completed_at?: string;

  /**
   * Name of the exported branch
   */
  branch?: string;

  /**
   * Git commit SHA of the exported branch
   */
  sha?: string;

  /**
   * Id for the export details
   */
  id?: string;

  /**
   * Url for fetching export details
   */
  export_url?: string;

  /**
   * Web url for the exported branch
   */
  html_url?: string;
};

/**
 * Email
 */
export type Email = {
  email: string;
  primary: boolean;
  verified: boolean;
  visibility: string;
};

/**
 * A unique encryption key
 */
export type GpgKey = {
  id: number;
  name?: string;
  primary_key_id: number;
  key_id: string;
  public_key: string;
  emails: Array<{
    email?: string;

    verified?: boolean;
  }>;
  subkeys: Array<{
    id?: number;

    primary_key_id?: number;

    key_id?: string;

    public_key?: string;

    emails?: Array<{}>;

    subkeys?: Array<{}>;

    can_sign?: boolean;

    can_encrypt_comms?: boolean;

    can_encrypt_storage?: boolean;

    can_certify?: boolean;

    created_at?: string;

    expires_at?: string;

    raw_key?: string;

    revoked?: boolean;
  }>;
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  can_certify: boolean;
  created_at: string;
  expires_at: string;
  revoked: boolean;
  raw_key: string;
};

/**
 * Key
 */
export type Key = {
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: string;
  verified: boolean;
  read_only: boolean;
};

export type MarketplaceAccount = {
  url: string;
  id: number;
  type: string;
  node_id?: string;
  login: string;
  email?: string;
  organization_billing_email?: string;
};

/**
 * User Marketplace Purchase
 */
export type UserMarketplacePurchase = {
  billing_cycle: string;
  next_billing_date: string;
  unit_count: number;
  on_free_trial: boolean;
  free_trial_ends_on: string;
  updated_at: string;
  account: MarketplaceAccount;
  plan: MarketplaceListingPlan;
};

/**
 * Starred Repository
 */
export type StarredRepository = {
  starred_at: string;
  repo: Repository;
};

/**
 * Hovercard
 */
export type Hovercard = {
  contexts: Array<{
    message: string;

    octicon: string;
  }>;
};

/**
 * Key Simple
 */
export type KeySimple = {
  id: number;
  key: string;
};
",
  "actions.ts" => "import {
  ActionsCacheList,
  ActionsCacheUsageByRepository,
  ActionsCacheUsageOrgEnterprise,
  ActionsEnabled,
  ActionsGetDefaultWorkflowPermissions,
  ActionsOidcCustomIssuerPolicyForEnterprise,
  ActionsOrganizationPermissions,
  ActionsPublicKey,
  ActionsRepositoryPermissions,
  ActionsSecret,
  ActionsSetDefaultWorkflowPermissions,
  ActionsWorkflowAccessToRepository,
  AllowedActions,
  Artifact,
  AuthenticationToken,
  CodeScanningRef,
  Deployment,
  EmptyObject,
  EnabledRepositories,
  EnvironmentApprovals,
  Job,
  MinimalRepository,
  OptOutOidcCustomSub,
  OrganizationActionsSecret,
  PendingDeployment,
  Repository,
  Runner,
  RunnerApplication,
  RunnerGroupsOrg,
  RunnerLabel,
  SelectedActions,
  Workflow,
  WorkflowRun,
  WorkflowRunUsage,
  WorkflowUsage,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get GitHub Actions cache usage for an enterprise
 * Gets the total GitHub Actions cache usage for an enterprise.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const getActionsCacheUsageForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  ActionsCacheUsageOrgEnterprise
> = {
  id: \\"actions/get-actions-cache-usage-for-enterprise\\",
};

/**
 * Set the GitHub Actions OIDC custom issuer policy for an enterprise
 * Sets the GitHub Actions OpenID Connect (OIDC) custom issuer policy for an enterprise.
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 * GitHub Apps must have the \`enterprise_administration:write\` permission to use this endpoint.
 */
export const setActionsOidcCustomIssuerPolicyForEnterprise: ApiHeroEndpoint<
  { enterprise: string; body: ActionsOidcCustomIssuerPolicyForEnterprise },
  void
> = {
  id: \\"actions/set-actions-oidc-custom-issuer-policy-for-enterprise\\",
};

/**
 * Get default workflow permissions for an enterprise
 * Gets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an enterprise,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * \\"[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 * GitHub Apps must have the \`enterprise_administration:write\` permission to use this endpoint.
 */
export const getGithubActionsDefaultWorkflowPermissionsEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  ActionsGetDefaultWorkflowPermissions
> = {
  id: \\"actions/get-github-actions-default-workflow-permissions-enterprise\\",
};

/**
 * Set default workflow permissions for an enterprise
 * Sets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an enterprise, and sets
 * whether GitHub Actions can submit approving pull request reviews. For more information, see
 * \\"[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 * GitHub Apps must have the \`enterprise_administration:write\` permission to use this endpoint.
 */
export const setGithubActionsDefaultWorkflowPermissionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; body: ActionsSetDefaultWorkflowPermissions },
  void
> = {
  id: \\"actions/set-github-actions-default-workflow-permissions-enterprise\\",
};

/**
 * Get GitHub Actions cache usage for an organization
 * Gets the total GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the \`read:org\` scope to use this endpoint. GitHub Apps must have the \`organization_admistration:read\` permission to use this endpoint.
 */
export const getActionsCacheUsageForOrg: ApiHeroEndpoint<
  { org: string },
  ActionsCacheUsageOrgEnterprise
> = {
  id: \\"actions/get-actions-cache-usage-for-org\\",
};

/**
 * List repositories with GitHub Actions cache usage for an organization
 * Lists repositories and their GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the \`read:org\` scope to use this endpoint. GitHub Apps must have the \`organization_admistration:read\` permission to use this endpoint.
 */
export const getActionsCacheUsageByRepoForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  {
    total_count: number;

    repository_cache_usages: Array<ActionsCacheUsageByRepository>;
  }
> = {
  id: \\"actions/get-actions-cache-usage-by-repo-for-org\\",
};

/**
 * Get GitHub Actions permissions for an organization
 * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const getGithubActionsPermissionsOrganization: ApiHeroEndpoint<
  { org: string },
  ActionsOrganizationPermissions
> = {
  id: \\"actions/get-github-actions-permissions-organization\\",
};

/**
 * Set GitHub Actions permissions for an organization
 * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as \`allowed_actions\` to \`selected\` actions and reusable workflows, then you cannot override them for the organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setGithubActionsPermissionsOrganization: ApiHeroEndpoint<
  {
    org: string;
    body: {
      enabled_repositories: EnabledRepositories;

      allowed_actions?: AllowedActions;
    };
  },
  void
> = {
  id: \\"actions/set-github-actions-permissions-organization\\",
};

/**
 * List selected repositories enabled for GitHub Actions in an organization
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const listSelectedRepositoriesEnabledGithubActionsOrganization: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  {
    total_count: number;

    repositories: Array<Repository>;
  }
> = {
  id: \\"actions/list-selected-repositories-enabled-github-actions-organization\\",
};

/**
 * Set selected repositories enabled for GitHub Actions in an organization
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setSelectedRepositoriesEnabledGithubActionsOrganization: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * List of repository IDs to enable for GitHub Actions.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-selected-repositories-enabled-github-actions-organization\\",
};

/**
 * Enable a selected repository for GitHub Actions in an organization
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const enableSelectedRepositoryGithubActionsOrganization: ApiHeroEndpoint<
  { org: string; repositoryId: number },
  void
> = {
  id: \\"actions/enable-selected-repository-github-actions-organization\\",
};

/**
 * Disable a selected repository for GitHub Actions in an organization
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const disableSelectedRepositoryGithubActionsOrganization: ApiHeroEndpoint<
  { org: string; repositoryId: number },
  void
> = {
  id: \\"actions/disable-selected-repository-github-actions-organization\\",
};

/**
 * Get allowed actions and reusable workflows for an organization
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const getAllowedActionsOrganization: ApiHeroEndpoint<{ org: string }, SelectedActions> = {
  id: \\"actions/get-allowed-actions-organization\\",
};

/**
 * Set allowed actions and reusable workflows for an organization
 * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * If the organization belongs to an enterprise that has \`selected\` actions and reusable workflows set at the enterprise level, then you cannot override any of the enterprise's allowed actions and reusable workflows settings.
 *
 * To use the \`patterns_allowed\` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the \`patterns_allowed\` setting only applies to public repositories in the organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setAllowedActionsOrganization: ApiHeroEndpoint<
  { org: string; body?: SelectedActions },
  void
> = {
  id: \\"actions/set-allowed-actions-organization\\",
};

/**
 * Get default workflow permissions for an organization
 * Gets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an organization,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * \\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const getGithubActionsDefaultWorkflowPermissionsOrganization: ApiHeroEndpoint<
  { org: string },
  ActionsGetDefaultWorkflowPermissions
> = {
  id: \\"actions/get-github-actions-default-workflow-permissions-organization\\",
};

/**
 * Set default workflow permissions for an organization
 * Sets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an organization, and sets if GitHub Actions
 * can submit approving pull request reviews. For more information, see
 * \\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setGithubActionsDefaultWorkflowPermissionsOrganization: ApiHeroEndpoint<
  { org: string; body?: ActionsSetDefaultWorkflowPermissions },
  void
> = {
  id: \\"actions/set-github-actions-default-workflow-permissions-organization\\",
};

/**
 * List self-hosted runner groups for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listSelfHostedRunnerGroupsForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number; visibleToRepository?: string },
  {
    total_count: number;

    runner_groups: Array<RunnerGroupsOrg>;
  }
> = {
  id: \\"actions/list-self-hosted-runner-groups-for-org\\",
};

/**
 * Create a self-hosted runner group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Creates a new self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const createSelfHostedRunnerGroupForOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * Name of the runner group.
       */
      name: string;

      /**
       * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
       */
      visibility?: \\"selected\\" | \\"all\\" | \\"private\\";

      /**
       * List of repository IDs that can access the runner group.
       */
      selected_repository_ids?: Array<number>;

      /**
       * List of runner IDs to add to the runner group.
       */
      runners?: Array<number>;

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;
    };
  },
  RunnerGroupsOrg
> = {
  id: \\"actions/create-self-hosted-runner-group-for-org\\",
};

/**
 * Get a self-hosted runner group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Gets a specific self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const getSelfHostedRunnerGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number },
  RunnerGroupsOrg
> = {
  id: \\"actions/get-self-hosted-runner-group-for-org\\",
};

/**
 * Delete a self-hosted runner group from an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Deletes a self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerGroupFromOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number },
  void
> = {
  id: \\"actions/delete-self-hosted-runner-group-from-org\\",
};

/**
 * Update a self-hosted runner group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Updates the \`name\` and \`visibility\` of a self-hosted runner group in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const updateSelfHostedRunnerGroupForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerGroupId: number;
    body: {
      /**
       * Name of the runner group.
       */
      name: string;

      /**
       * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
       */
      visibility?: \\"selected\\" | \\"all\\" | \\"private\\";

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;
    };
  },
  RunnerGroupsOrg
> = {
  id: \\"actions/update-self-hosted-runner-group-for-org\\",
};

/**
 * List repository access to a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Lists the repositories with access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"actions/list-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * Set repository access for a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const setRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerGroupId: number;
    body: {
      /**
       * List of repository IDs that can access the runner group.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * Add repository access to a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\`
 * scope to use this endpoint.
 */
export const addRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; repositoryId: number },
  void
> = {
  id: \\"actions/add-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * Remove repository access to a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; repositoryId: number },
  void
> = {
  id: \\"actions/remove-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * List self-hosted runners in a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Lists self-hosted runners that are in a specific organization group.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listSelfHostedRunnersInGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; perPage?: number; page?: number },
  {
    total_count: number;

    runners: Array<Runner>;
  }
> = {
  id: \\"actions/list-self-hosted-runners-in-group-for-org\\",
};

/**
 * Set self-hosted runners in a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Replaces the list of self-hosted runners that are part of an organization runner group.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const setSelfHostedRunnersInGroupForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerGroupId: number;
    body: {
      /**
       * List of runner IDs to add to the runner group.
       */
      runners: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-self-hosted-runners-in-group-for-org\\",
};

/**
 * Add a self-hosted runner to a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Adds a self-hosted runner to a runner group configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\`
 * scope to use this endpoint.
 */
export const addSelfHostedRunnerToGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; runnerId: number },
  void
> = {
  id: \\"actions/add-self-hosted-runner-to-group-for-org\\",
};

/**
 * Remove a self-hosted runner from a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeSelfHostedRunnerFromGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; runnerId: number },
  void
> = {
  id: \\"actions/remove-self-hosted-runner-from-group-for-org\\",
};

/**
 * List self-hosted runners for an organization
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listSelfHostedRunnersForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  {
    total_count: number;

    runners: Array<Runner>;
  }
> = {
  id: \\"actions/list-self-hosted-runners-for-org\\",
};

/**
 * List runner applications for an organization
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listRunnerApplicationsForOrg: ApiHeroEndpoint<
  { org: string },
  Array<RunnerApplication>
> = {
  id: \\"actions/list-runner-applications-for-org\\",
};

/**
 * Create a registration token for an organization
 * Returns a token that you can pass to the \`config\` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * \`\`\`
 */
export const createRegistrationTokenForOrg: ApiHeroEndpoint<{ org: string }, AuthenticationToken> =
  {
    id: \\"actions/create-registration-token-for-org\\",
  };

/**
 * Create a remove token for an organization
 * Returns a token that you can pass to the \`config\` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace \`TOKEN\` with the remove token provided by this
 * endpoint.
 *
 * \`\`\`
 * ./config.sh remove --token TOKEN
 * \`\`\`
 */
export const createRemoveTokenForOrg: ApiHeroEndpoint<{ org: string }, AuthenticationToken> = {
  id: \\"actions/create-remove-token-for-org\\",
};

/**
 * Get a self-hosted runner for an organization
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const getSelfHostedRunnerForOrg: ApiHeroEndpoint<{ org: string; runnerId: number }, Runner> =
  {
    id: \\"actions/get-self-hosted-runner-for-org\\",
  };

/**
 * Delete a self-hosted runner from an organization
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerFromOrg: ApiHeroEndpoint<
  { org: string; runnerId: number },
  void
> = {
  id: \\"actions/delete-self-hosted-runner-from-org\\",
};

/**
 * List labels for a self-hosted runner for an organization
 * Lists all labels for a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listLabelsForSelfHostedRunnerForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/list-labels-for-self-hosted-runner-for-org\\",
};

/**
 * Add custom labels to a self-hosted runner for an organization
 * Add custom labels to a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const addCustomLabelsToSelfHostedRunnerForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to add to the runner.
       */
      labels: Array<string>;
    };
  },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/add-custom-labels-to-self-hosted-runner-for-org\\",
};

/**
 * Set custom labels for a self-hosted runner for an organization
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const setCustomLabelsForSelfHostedRunnerForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
       */
      labels: Array<string>;
    };
  },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/set-custom-labels-for-self-hosted-runner-for-org\\",
};

/**
 * Remove all custom labels from a self-hosted runner for an organization
 * Remove all custom labels from a self-hosted runner configured in an
 * organization. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeAllCustomLabelsFromSelfHostedRunnerForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/remove-all-custom-labels-from-self-hosted-runner-for-org\\",
};

/**
 * Remove a custom label from a self-hosted runner for an organization
 * Remove a custom label from a self-hosted runner configured
 * in an organization. Returns the remaining labels from the runner.
 *
 * This endpoint returns a \`404 Not Found\` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeCustomLabelFromSelfHostedRunnerForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number; name: string },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/remove-custom-label-from-self-hosted-runner-for-org\\",
};

/**
 * List organization secrets
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const listOrgSecrets: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  {
    total_count: number;

    secrets: Array<OrganizationActionsSecret>;
  }
> = {
  id: \\"actions/list-org-secrets\\",
};

/**
 * Get an organization public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const getOrgPublicKey: ApiHeroEndpoint<{ org: string }, ActionsPublicKey> = {
  id: \\"actions/get-org-public-key\\",
};

/**
 * Get an organization secret
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const getOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string },
  OrganizationActionsSecret
> = {
  id: \\"actions/get-org-secret\\",
};

/**
 * Create or update an organization secret
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
       */
      encrypted_value?: string;

      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;

      /**
       * Which type of organization repositories have access to the organization secret. \`selected\` means only the repositories specified by \`selected_repository_ids\` can access the secret.
       */
      visibility: \\"all\\" | \\"private\\" | \\"selected\\";

      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids?: Array<number>;
    };
  },
  EmptyObject
> = {
  id: \\"actions/create-or-update-org-secret\\",
};

/**
 * Delete an organization secret
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const deleteOrgSecret: ApiHeroEndpoint<{ org: string; secretName: string }, void> = {
  id: \\"actions/delete-org-secret\\",
};

/**
 * List selected repositories for an organization secret
 * Lists all repositories that have been selected when the \`visibility\` for repository access to a secret is set to \`selected\`. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const listSelectedReposForOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"actions/list-selected-repos-for-org-secret\\",
};

/**
 * Set selected repositories for an organization secret
 * Replaces all repositories for an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const setSelectedReposForOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-selected-repos-for-org-secret\\",
};

/**
 * Add selected repository to an organization secret
 * Adds a repository to an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const addSelectedRepoToOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; repositoryId: number },
  void
> = {
  id: \\"actions/add-selected-repo-to-org-secret\\",
};

/**
 * Remove selected repository from an organization secret
 * Removes a repository from an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const removeSelectedRepoFromOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; repositoryId: number },
  void
> = {
  id: \\"actions/remove-selected-repo-from-org-secret\\",
};

/**
 * List artifacts for a repository
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listArtifactsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    artifacts: Array<Artifact>;
  }
> = {
  id: \\"actions/list-artifacts-for-repo\\",
};

/**
 * Get an artifact
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getArtifact: ApiHeroEndpoint<
  { owner: string; repo: string; artifactId: number },
  Artifact
> = {
  id: \\"actions/get-artifact\\",
};

/**
 * Delete an artifact
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteArtifact: ApiHeroEndpoint<
  { owner: string; repo: string; artifactId: number },
  void
> = {
  id: \\"actions/delete-artifact\\",
};

/**
 * Download an artifact
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for \`Location:\` in
 * the response header to find the URL for the download. The \`:archive_format\` must be \`zip\`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope.
 * GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const downloadArtifact: ApiHeroEndpoint<
  { owner: string; repo: string; artifactId: number; archiveFormat: string },
  void
> = {
  id: \\"actions/download-artifact\\",
};

/**
 * Get GitHub Actions cache usage for a repository
 * Gets GitHub Actions cache usage for a repository.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getActionsCacheUsage: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsCacheUsageByRepository
> = {
  id: \\"actions/get-actions-cache-usage\\",
};

/**
 * List GitHub Actions caches for a repository
 * Lists the GitHub Actions caches for a repository.
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 * GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getActionsCacheList: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    perPage?: number;
    page?: number;
    ref?: CodeScanningRef;
    key?: string;
    sort?: \\"created_at\\" | \\"last_accessed_at\\" | \\"size_in_bytes\\";
    direction?: \\"asc\\" | \\"desc\\";
  },
  ActionsCacheList
> = {
  id: \\"actions/get-actions-cache-list\\",
};

/**
 * Delete GitHub Actions caches for a repository (using a cache key)
 * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 *
 * GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteActionsCacheByKey: ApiHeroEndpoint<
  { owner: string; repo: string; key: string; ref?: CodeScanningRef },
  ActionsCacheList
> = {
  id: \\"actions/delete-actions-cache-by-key\\",
};

/**
 * Delete a GitHub Actions cache for a repository (using a cache ID)
 * Deletes a GitHub Actions cache for a repository, using a cache ID.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 *
 * GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteActionsCacheById: ApiHeroEndpoint<
  { owner: string; repo: string; cacheId: number },
  void
> = {
  id: \\"actions/delete-actions-cache-by-id\\",
};

/**
 * Get a job for a workflow run
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getJobForWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; jobId: number },
  Job
> = {
  id: \\"actions/get-job-for-workflow-run\\",
};

/**
 * Download job logs for a workflow run
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for \`Location:\` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must
 * have the \`actions:read\` permission to use this endpoint.
 */
export const downloadJobLogsForWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; jobId: number },
  void
> = {
  id: \\"actions/download-job-logs-for-workflow-run\\",
};

/**
 * Re-run a job from a workflow run
 * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const reRunJobForWorkflowRun: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    jobId: number;
    body?: {
      /**
       * Whether to enable debug logging for the re-run.
       */
      enable_debug_logging?: boolean;
    } | null;
  },
  EmptyObject
> = {
  id: \\"actions/re-run-job-for-workflow-run\\",
};

/**
 * Get the opt-out flag of an OIDC subject claim customization for a repository
 * Gets the \`opt-out\` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint. GitHub Apps must have the \`organization_administration:read\` permission to use this endpoint.
 */
export const getCustomOidcSubClaimForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  OptOutOidcCustomSub
> = {
  id: \\"actions/get-custom-oidc-sub-claim-for-repo\\",
};

/**
 * Set the opt-out flag of an OIDC subject claim customization for a repository
 * Sets the \`opt-out\` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const setCustomOidcSubClaimForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; body: OptOutOidcCustomSub },
  EmptyObject
> = {
  id: \\"actions/set-custom-oidc-sub-claim-for-repo\\",
};

/**
 * Get GitHub Actions permissions for a repository
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const getGithubActionsPermissionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsRepositoryPermissions
> = {
  id: \\"actions/get-github-actions-permissions-repository\\",
};

/**
 * Set GitHub Actions permissions for a repository
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
 *
 * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as \`allowed_actions\` to \`selected\` actions and reusable workflows, then you cannot override them for the repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const setGithubActionsPermissionsRepository: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      enabled: ActionsEnabled;

      allowed_actions?: AllowedActions;
    };
  },
  void
> = {
  id: \\"actions/set-github-actions-permissions-repository\\",
};

/**
 * Get the level of access for workflows outside of the repository
 * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to internal repositories. For more information, see \\"[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the
 * repository \`administration\` permission to use this endpoint.
 */
export const getWorkflowAccessToRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsWorkflowAccessToRepository
> = {
  id: \\"actions/get-workflow-access-to-repository\\",
};

/**
 * Set the level of access for workflows outside of the repository
 * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to internal repositories. For more information, see \\"[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the
 * repository \`administration\` permission to use this endpoint.
 */
export const setWorkflowAccessToRepository: ApiHeroEndpoint<
  { owner: string; repo: string; body: ActionsWorkflowAccessToRepository },
  void
> = {
  id: \\"actions/set-workflow-access-to-repository\\",
};

/**
 * Get allowed actions and reusable workflows for a repository
 * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const getAllowedActionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  SelectedActions
> = {
  id: \\"actions/get-allowed-actions-repository\\",
};

/**
 * Set allowed actions and reusable workflows for a repository
 * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\\"
 *
 * If the repository belongs to an organization or enterprise that has \`selected\` actions and reusable workflows set at the organization or enterprise levels, then you cannot override any of the allowed actions and reusable workflows settings.
 *
 * To use the \`patterns_allowed\` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the \`patterns_allowed\` setting only applies to public repositories.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const setAllowedActionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string; body?: SelectedActions },
  void
> = {
  id: \\"actions/set-allowed-actions-repository\\",
};

/**
 * Get default workflow permissions for a repository
 * Gets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in a repository,
 * as well as if GitHub Actions can submit approving pull request reviews.
 * For more information, see \\"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the repository \`administration\` permission to use this API.
 */
export const getGithubActionsDefaultWorkflowPermissionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsGetDefaultWorkflowPermissions
> = {
  id: \\"actions/get-github-actions-default-workflow-permissions-repository\\",
};

/**
 * Set default workflow permissions for a repository
 * Sets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in a repository, and sets if GitHub Actions
 * can submit approving pull request reviews.
 * For more information, see \\"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the repository \`administration\` permission to use this API.
 */
export const setGithubActionsDefaultWorkflowPermissionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string; body: ActionsSetDefaultWorkflowPermissions },
  void
> = {
  id: \\"actions/set-github-actions-default-workflow-permissions-repository\\",
};

/**
 * List self-hosted runners for a repository
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const listSelfHostedRunnersForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    runners: Array<Runner>;
  }
> = {
  id: \\"actions/list-self-hosted-runners-for-repo\\",
};

/**
 * List runner applications for a repository
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const listRunnerApplicationsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<RunnerApplication>
> = {
  id: \\"actions/list-runner-applications-for-repo\\",
};

/**
 * Create a registration token for a repository
 * Returns a token that you can pass to the \`config\` script. The token expires after one hour. You must authenticate
 * using an access token with the \`repo\` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * \`\`\`
 */
export const createRegistrationTokenForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  AuthenticationToken
> = {
  id: \\"actions/create-registration-token-for-repo\\",
};

/**
 * Create a remove token for a repository
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh remove --token TOKEN
 * \`\`\`
 */
export const createRemoveTokenForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  AuthenticationToken
> = {
  id: \\"actions/create-remove-token-for-repo\\",
};

/**
 * Get a self-hosted runner for a repository
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const getSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  Runner
> = {
  id: \\"actions/get-self-hosted-runner-for-repo\\",
};

/**
 * Delete a self-hosted runner from a repository
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the \`repo\`
 * scope to use this endpoint.
 */
export const deleteSelfHostedRunnerFromRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  void
> = {
  id: \\"actions/delete-self-hosted-runner-from-repo\\",
};

/**
 * List labels for a self-hosted runner for a repository
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const listLabelsForSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/list-labels-for-self-hosted-runner-for-repo\\",
};

/**
 * Add custom labels to a self-hosted runner for a repository
 * Add custom labels to a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const addCustomLabelsToSelfHostedRunnerForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to add to the runner.
       */
      labels: Array<string>;
    };
  },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/add-custom-labels-to-self-hosted-runner-for-repo\\",
};

/**
 * Set custom labels for a self-hosted runner for a repository
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const setCustomLabelsForSelfHostedRunnerForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
       */
      labels: Array<string>;
    };
  },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/set-custom-labels-for-self-hosted-runner-for-repo\\",
};

/**
 * Remove all custom labels from a self-hosted runner for a repository
 * Remove all custom labels from a self-hosted runner configured in a
 * repository. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const removeAllCustomLabelsFromSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/remove-all-custom-labels-from-self-hosted-runner-for-repo\\",
};

/**
 * Remove a custom label from a self-hosted runner for a repository
 * Remove a custom label from a self-hosted runner configured
 * in a repository. Returns the remaining labels from the runner.
 *
 * This endpoint returns a \`404 Not Found\` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const removeCustomLabelFromSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number; name: string },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"actions/remove-custom-label-from-self-hosted-runner-for-repo\\",
};

/**
 * List workflow runs for a repository
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listWorkflowRunsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    actor?: string;
    branch?: string;
    event?: string;
    status?:
      | \\"completed\\"
      | \\"action_required\\"
      | \\"cancelled\\"
      | \\"failure\\"
      | \\"neutral\\"
      | \\"skipped\\"
      | \\"stale\\"
      | \\"success\\"
      | \\"timed_out\\"
      | \\"in_progress\\"
      | \\"queued\\"
      | \\"requested\\"
      | \\"waiting\\";
    perPage?: number;
    page?: number;
    created?: string;
    excludePullRequests?: boolean;
    checkSuiteId?: number;
  },
  {
    total_count: number;

    workflow_runs: Array<WorkflowRun>;
  }
> = {
  id: \\"actions/list-workflow-runs-for-repo\\",
};

/**
 * Get a workflow run
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number; excludePullRequests?: boolean },
  WorkflowRun
> = {
  id: \\"actions/get-workflow-run\\",
};

/**
 * Delete a workflow run
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:write\` permission to use
 * this endpoint.
 */
export const deleteWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  void
> = {
  id: \\"actions/delete-workflow-run\\",
};

/**
 * Get the review history for a workflow run
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getReviewsForRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  Array<EnvironmentApprovals>
> = {
  id: \\"actions/get-reviews-for-run\\",
};

/**
 * Approve a workflow run for a fork pull request
 * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const approveWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  EmptyObject
> = {
  id: \\"actions/approve-workflow-run\\",
};

/**
 * List workflow run artifacts
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listWorkflowRunArtifacts: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number; perPage?: number; page?: number },
  {
    total_count: number;

    artifacts: Array<Artifact>;
  }
> = {
  id: \\"actions/list-workflow-run-artifacts\\",
};

/**
 * Get a workflow run attempt
 * Gets a specific workflow run attempt. Anyone with read access to the repository
 * can use this endpoint. If the repository is private you must use an access token
 * with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to
 * use this endpoint.
 */
export const getWorkflowRunAttempt: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    attemptNumber: number;
    excludePullRequests?: boolean;
  },
  WorkflowRun
> = {
  id: \\"actions/get-workflow-run-attempt\\",
};

/**
 * List jobs for a workflow run attempt
 * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const listJobsForWorkflowRunAttempt: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    attemptNumber: number;
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    jobs: Array<Job>;
  }
> = {
  id: \\"actions/list-jobs-for-workflow-run-attempt\\",
};

/**
 * Download workflow run attempt logs
 * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
 * 1 minute. Look for \`Location:\` in the response header to find the URL for the download. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope.
 * GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const downloadWorkflowRunAttemptLogs: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number; attemptNumber: number },
  void
> = {
  id: \\"actions/download-workflow-run-attempt-logs\\",
};

/**
 * Cancel a workflow run
 * Cancels a workflow run using its \`id\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const cancelWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  {}
> = {
  id: \\"actions/cancel-workflow-run\\",
};

/**
 * List jobs for a workflow run
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const listJobsForWorkflowRun: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    filter?: \\"latest\\" | \\"all\\";
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    jobs: Array<Job>;
  }
> = {
  id: \\"actions/list-jobs-for-workflow-run\\",
};

/**
 * Download workflow run logs
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * \`Location:\` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have
 * the \`actions:read\` permission to use this endpoint.
 */
export const downloadWorkflowRunLogs: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  void
> = {
  id: \\"actions/download-workflow-run-logs\\",
};

/**
 * Delete workflow run logs
 * Deletes all logs for a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteWorkflowRunLogs: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  void
> = {
  id: \\"actions/delete-workflow-run-logs\\",
};

/**
 * Get pending deployments for a workflow run
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getPendingDeploymentsForRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  Array<PendingDeployment>
> = {
  id: \\"actions/get-pending-deployments-for-run\\",
};

/**
 * Review pending deployments for a workflow run
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const reviewPendingDeploymentsForRun: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    body: {
      /**
       * The list of environment ids to approve or reject
       */
      environment_ids: Array<number>;

      /**
       * Whether to approve or reject deployment to the specified environments.
       */
      state: \\"approved\\" | \\"rejected\\";

      /**
       * A comment to accompany the deployment review
       */
      comment: string;
    };
  },
  Array<Deployment>
> = {
  id: \\"actions/review-pending-deployments-for-run\\",
};

/**
 * Re-run a workflow
 * Re-runs your workflow run using its \`id\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const reRunWorkflow: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    body?: {
      /**
       * Whether to enable debug logging for the re-run.
       */
      enable_debug_logging?: boolean;
    } | null;
  },
  {}
> = {
  id: \\"actions/re-run-workflow\\",
};

/**
 * Re-run failed jobs from a workflow run
 * Re-run all of the failed jobs and their dependent jobs in a workflow run using the \`id\` of the workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const reRunWorkflowFailedJobs: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    body?: {
      /**
       * Whether to enable debug logging for the re-run.
       */
      enable_debug_logging?: boolean;
    } | null;
  },
  EmptyObject
> = {
  id: \\"actions/re-run-workflow-failed-jobs\\",
};

/**
 * Get workflow run usage
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflowRunUsage: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  WorkflowRunUsage
> = {
  id: \\"actions/get-workflow-run-usage\\",
};

/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const listRepoSecrets: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    secrets: Array<ActionsSecret>;
  }
> = {
  id: \\"actions/list-repo-secrets\\",
};

/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getRepoPublicKey: ApiHeroEndpoint<{ owner: string; repo: string }, ActionsPublicKey> =
  {
    id: \\"actions/get-repo-public-key\\",
  };

/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  ActionsSecret
> = {
  id: \\"actions/get-repo-secret\\",
};

/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateRepoSecret: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    secretName: string;
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
       */
      encrypted_value?: string;

      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;
    };
  },
  {}
> = {
  id: \\"actions/create-or-update-repo-secret\\",
};

/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const deleteRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  void
> = {
  id: \\"actions/delete-repo-secret\\",
};

/**
 * List repository workflows
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listRepoWorkflows: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    workflows: Array<Workflow>;
  }
> = {
  id: \\"actions/list-repo-workflows\\",
};

/**
 * Get a workflow
 * Gets a specific workflow. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflow: ApiHeroEndpoint<
  { owner: string; repo: string; workflowId: number | string },
  Workflow
> = {
  id: \\"actions/get-workflow\\",
};

/**
 * Disable a workflow
 * Disables a workflow and sets the \`state\` of the workflow to \`disabled_manually\`. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const disableWorkflow: ApiHeroEndpoint<
  { owner: string; repo: string; workflowId: number | string },
  void
> = {
  id: \\"actions/disable-workflow\\",
};

/**
 * Create a workflow dispatch event
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`.
 *
 * You must configure your GitHub Actions workflow to run when the [\`workflow_dispatch\` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The \`inputs\` are configured in the workflow file. For more information about how to configure the \`workflow_dispatch\` event in the workflow file, see \\"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint. For more information, see \\"[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\\"
 */
export const createWorkflowDispatch: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    workflowId: number | string;
    body: {
      /**
       * The git reference for the workflow. The reference can be a branch or tag name.
       */
      ref: string;

      /**
       * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when \`inputs\` are omitted.
       */
      inputs?: Record<string, string>;
    };
  },
  void
> = {
  id: \\"actions/create-workflow-dispatch\\",
};

/**
 * Enable a workflow
 * Enables a workflow and sets the \`state\` of the workflow to \`active\`. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const enableWorkflow: ApiHeroEndpoint<
  { owner: string; repo: string; workflowId: number | string },
  void
> = {
  id: \\"actions/enable-workflow\\",
};

/**
 * List workflow runs
 * List all workflow runs for a workflow. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope.
 */
export const listWorkflowRuns: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    workflowId: number | string;
    actor?: string;
    branch?: string;
    event?: string;
    status?:
      | \\"completed\\"
      | \\"action_required\\"
      | \\"cancelled\\"
      | \\"failure\\"
      | \\"neutral\\"
      | \\"skipped\\"
      | \\"stale\\"
      | \\"success\\"
      | \\"timed_out\\"
      | \\"in_progress\\"
      | \\"queued\\"
      | \\"requested\\"
      | \\"waiting\\";
    perPage?: number;
    page?: number;
    created?: string;
    excludePullRequests?: boolean;
    checkSuiteId?: number;
  },
  {
    total_count: number;

    workflow_runs: Array<WorkflowRun>;
  }
> = {
  id: \\"actions/list-workflow-runs\\",
};

/**
 * Get workflow usage
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflowUsage: ApiHeroEndpoint<
  { owner: string; repo: string; workflowId: number | string },
  WorkflowUsage
> = {
  id: \\"actions/get-workflow-usage\\",
};

/**
 * List environment secrets
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const listEnvironmentSecrets: ApiHeroEndpoint<
  { repositoryId: number; environmentName: string; perPage?: number; page?: number },
  {
    total_count: number;

    secrets: Array<ActionsSecret>;
  }
> = {
  id: \\"actions/list-environment-secrets\\",
};

/**
 * Get an environment public key
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getEnvironmentPublicKey: ApiHeroEndpoint<
  { repositoryId: number; environmentName: string },
  ActionsPublicKey
> = {
  id: \\"actions/get-environment-public-key\\",
};

/**
 * Get an environment secret
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getEnvironmentSecret: ApiHeroEndpoint<
  { repositoryId: number; environmentName: string; secretName: string },
  ActionsSecret
> = {
  id: \\"actions/get-environment-secret\\",
};

/**
 * Create or update an environment secret
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateEnvironmentSecret: ApiHeroEndpoint<
  {
    repositoryId: number;
    environmentName: string;
    secretName: string;
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
       */
      encrypted_value: string;

      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id: string;
    };
  },
  EmptyObject
> = {
  id: \\"actions/create-or-update-environment-secret\\",
};

/**
 * Delete an environment secret
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const deleteEnvironmentSecret: ApiHeroEndpoint<
  { repositoryId: number; environmentName: string; secretName: string },
  void
> = {
  id: \\"actions/delete-environment-secret\\",
};
",
  "activity.ts" => "import {
  Event,
  Feed,
  MinimalRepository,
  Repository,
  RepositorySubscription,
  SimpleUser,
  Stargazer,
  StarredRepository,
  Thread,
  ThreadSubscription,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List public events
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const listPublicEvents: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-events\\",
};

/**
 * Get feeds
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const getFeeds: ApiHeroEndpoint<never, Feed> = {
  id: \\"activity/get-feeds\\",
};

/**
 * List public events for a network of repositories
 */
export const listPublicEventsForRepoNetwork: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-events-for-repo-network\\",
};

/**
 * List notifications for the authenticated user
 * List all notifications for the current user, sorted by most recently updated.
 */
export const listNotificationsForAuthenticatedUser: ApiHeroEndpoint<
  {
    all?: boolean;
    participating?: boolean;
    since?: string;
    before?: string;
    perPage?: number;
    page?: number;
  },
  Array<Thread>
> = {
  id: \\"activity/list-notifications-for-authenticated-user\\",
};

/**
 * Mark notifications as read
 * Marks all notifications as \\"read\\" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a \`202 Accepted\` status and GitHub will run an asynchronous process to mark notifications as \\"read.\\" To check whether any \\"unread\\" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter \`all=false\`.
 */
export const markNotificationsAsRead: ApiHeroEndpoint<
  {
    body?: {
      /**
       * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. Default: The current timestamp.
       */
      last_read_at?: string;

      /**
       * Whether the notification has been read.
       */
      read?: boolean;
    };
  },
  {
    message?: string;
  }
> = {
  id: \\"activity/mark-notifications-as-read\\",
};

/**
 * Get a thread
 */
export const getThread: ApiHeroEndpoint<{ threadId: number }, Thread> = {
  id: \\"activity/get-thread\\",
};

/**
 * Mark a thread as read
 */
export const markThreadAsRead: ApiHeroEndpoint<{ threadId: number }, any> = {
  id: \\"activity/mark-thread-as-read\\",
};

/**
 * Get a thread subscription for the authenticated user
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const getThreadSubscriptionForAuthenticatedUser: ApiHeroEndpoint<
  { threadId: number },
  ThreadSubscription
> = {
  id: \\"activity/get-thread-subscription-for-authenticated-user\\",
};

/**
 * Set a thread subscription
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const setThreadSubscription: ApiHeroEndpoint<
  {
    threadId: number;
    body?: {
      /**
       * Whether to block all notifications from a thread.
       */
      ignored?: boolean;
    };
  },
  ThreadSubscription
> = {
  id: \\"activity/set-thread-subscription\\",
};

/**
 * Delete a thread subscription
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set \`ignore\` to \`true\`.
 */
export const deleteThreadSubscription: ApiHeroEndpoint<{ threadId: number }, void> = {
  id: \\"activity/delete-thread-subscription\\",
};

/**
 * List public organization events
 */
export const listPublicOrgEvents: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-org-events\\",
};

/**
 * List repository events
 */
export const listRepoEvents: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-repo-events\\",
};

/**
 * List repository notifications for the authenticated user
 * List all notifications for the current user.
 */
export const listRepoNotificationsForAuthenticatedUser: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    all?: boolean;
    participating?: boolean;
    since?: string;
    before?: string;
    perPage?: number;
    page?: number;
  },
  Array<Thread>
> = {
  id: \\"activity/list-repo-notifications-for-authenticated-user\\",
};

/**
 * Mark repository notifications as read
 * Marks all notifications in a repository as \\"read\\" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a \`202 Accepted\` status and GitHub will run an asynchronous process to mark notifications as \\"read.\\" To check whether any \\"unread\\" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter \`all=false\`.
 */
export const markRepoNotificationsAsRead: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. Default: The current timestamp.
       */
      last_read_at?: string;
    };
  },
  {
    message?: string;

    url?: string;
  }
> = {
  id: \\"activity/mark-repo-notifications-as-read\\",
};

/**
 * List stargazers
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const listStargazersForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<SimpleUser> | Array<Stargazer>
> = {
  id: \\"activity/list-stargazers-for-repo\\",
};

/**
 * List watchers
 * Lists the people watching the specified repository.
 */
export const listWatchersForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"activity/list-watchers-for-repo\\",
};

/**
 * Get a repository subscription
 */
export const getRepoSubscription: ApiHeroEndpoint<
  { owner: string; repo: string },
  RepositorySubscription
> = {
  id: \\"activity/get-repo-subscription\\",
};

/**
 * Set a repository subscription
 * If you would like to watch a repository, set \`subscribed\` to \`true\`. If you would like to ignore notifications made within a repository, set \`ignored\` to \`true\`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const setRepoSubscription: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * Determines if notifications should be received from this repository.
       */
      subscribed?: boolean;

      /**
       * Determines if all notifications should be blocked from this repository.
       */
      ignored?: boolean;
    };
  },
  RepositorySubscription
> = {
  id: \\"activity/set-repo-subscription\\",
};

/**
 * Delete a repository subscription
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const deleteRepoSubscription: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"activity/delete-repo-subscription\\",
};

/**
 * List repositories starred by the authenticated user
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const listReposStarredByAuthenticatedUser: ApiHeroEndpoint<
  { sort?: \\"created\\" | \\"updated\\"; direction?: \\"asc\\" | \\"desc\\"; perPage?: number; page?: number },
  Array<Repository>
> = {
  id: \\"activity/list-repos-starred-by-authenticated-user\\",
};

/**
 * Check if a repository is starred by the authenticated user
 */
export const checkRepoIsStarredByAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string },
  void
> = {
  id: \\"activity/check-repo-is-starred-by-authenticated-user\\",
};

/**
 * Star a repository for the authenticated user
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const starRepoForAuthenticatedUser: ApiHeroEndpoint<{ owner: string; repo: string }, void> =
  {
    id: \\"activity/star-repo-for-authenticated-user\\",
  };

/**
 * Unstar a repository for the authenticated user
 */
export const unstarRepoForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string },
  void
> = {
  id: \\"activity/unstar-repo-for-authenticated-user\\",
};

/**
 * List repositories watched by the authenticated user
 * Lists repositories the authenticated user is watching.
 */
export const listWatchedReposForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<MinimalRepository>
> = {
  id: \\"activity/list-watched-repos-for-authenticated-user\\",
};

/**
 * List events for the authenticated user
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const listEventsForAuthenticatedUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-events-for-authenticated-user\\",
};

/**
 * List organization events for the authenticated user
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const listOrgEventsForAuthenticatedUser: ApiHeroEndpoint<
  { username: string; org: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-org-events-for-authenticated-user\\",
};

/**
 * List public events for a user
 */
export const listPublicEventsForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-events-for-user\\",
};

/**
 * List events received by the authenticated user
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const listReceivedEventsForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-received-events-for-user\\",
};

/**
 * List public events received by a user
 */
export const listReceivedPublicEventsForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<Event>
> = {
  id: \\"activity/list-received-public-events-for-user\\",
};

/**
 * List repositories starred by a user
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const listReposStarredByUser: ApiHeroEndpoint<
  {
    username: string;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<StarredRepository> | Array<Repository>
> = {
  id: \\"activity/list-repos-starred-by-user\\",
};

/**
 * List repositories watched by a user
 * Lists repositories a user is watching.
 */
export const listReposWatchedByUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<MinimalRepository>
> = {
  id: \\"activity/list-repos-watched-by-user\\",
};
",
  "apps.ts" => "import {
  AppPermissions,
  Authorization,
  HookDelivery,
  HookDeliveryItem,
  Installation,
  InstallationToken,
  Integration,
  MarketplaceListingPlan,
  MarketplacePurchase,
  Repository,
  UserMarketplacePurchase,
  WebhookConfig,
  WebhookConfigContentType,
  WebhookConfigInsecureSsl,
  WebhookConfigSecret,
  WebhookConfigUrl,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get the authenticated app
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the \`installations_count\` in the response. For more details about your app's installations, see the \\"[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)\\" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getAuthenticated: ApiHeroEndpoint<never, Integration> = {
  id: \\"apps/get-authenticated\\",
};

/**
 * Create a GitHub App from a manifest
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary \`code\` used to retrieve the GitHub App's \`id\`, \`pem\` (private key), and \`webhook_secret\`.
 */
export const createFromManifest: ApiHeroEndpoint<
  { code: string },
  Integration & {
    client_id: string;

    client_secret: string;

    webhook_secret: string;

    pem: string;
  }
> = {
  id: \\"apps/create-from-manifest\\",
};

/**
 * Get a webhook configuration for an app
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \\"[Creating a GitHub App](/developers/apps/creating-a-github-app).\\"
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getWebhookConfigForApp: ApiHeroEndpoint<never, WebhookConfig> = {
  id: \\"apps/get-webhook-config-for-app\\",
};

/**
 * Update a webhook configuration for an app
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \\"[Creating a GitHub App](/developers/apps/creating-a-github-app).\\"
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const updateWebhookConfigForApp: ApiHeroEndpoint<
  {
    body: {
      url?: WebhookConfigUrl;

      content_type?: WebhookConfigContentType;

      secret?: WebhookConfigSecret;

      insecure_ssl?: WebhookConfigInsecureSsl;
    };
  },
  WebhookConfig
> = {
  id: \\"apps/update-webhook-config-for-app\\",
};

/**
 * List deliveries for an app webhook
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const listWebhookDeliveries: ApiHeroEndpoint<
  { perPage?: number; cursor?: string },
  Array<HookDeliveryItem>
> = {
  id: \\"apps/list-webhook-deliveries\\",
};

/**
 * Get a delivery for an app webhook
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getWebhookDelivery: ApiHeroEndpoint<{ deliveryId: number }, HookDelivery> = {
  id: \\"apps/get-webhook-delivery\\",
};

/**
 * Redeliver a delivery for an app webhook
 * Redeliver a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const redeliverWebhookDelivery: ApiHeroEndpoint<{ deliveryId: number }, {}> = {
  id: \\"apps/redeliver-webhook-delivery\\",
};

/**
 * List installations for the authenticated app
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the \`permissions\` key.
 */
export const listInstallations: ApiHeroEndpoint<
  { perPage?: number; page?: number; since?: string; outdated?: string },
  Array<Installation>
> = {
  id: \\"apps/list-installations\\",
};

/**
 * Get an installation for the authenticated app
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getInstallation: ApiHeroEndpoint<{ installationId: number }, Installation> = {
  id: \\"apps/get-installation\\",
};

/**
 * Delete an installation for the authenticated app
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \\"[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)\\" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const deleteInstallation: ApiHeroEndpoint<{ installationId: number }, void> = {
  id: \\"apps/delete-installation\\",
};

/**
 * Create an installation access token for an app
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of \`401 - Unauthorized\`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the \`repository_ids\` when creating the token. When you omit \`repository_ids\`, the response does not contain the \`repositories\` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const createInstallationAccessToken: ApiHeroEndpoint<
  {
    installationId: number;
    body?: {
      /**
       * List of repository names that the token should have access to
       */
      repositories?: Array<string>;

      /**
       * List of repository IDs that the token should have access to
       */
      repository_ids?: Array<number>;

      permissions?: AppPermissions;
    };
  },
  InstallationToken
> = {
  id: \\"apps/create-installation-access-token\\",
};

/**
 * Suspend an app installation
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const suspendInstallation: ApiHeroEndpoint<{ installationId: number }, void> = {
  id: \\"apps/suspend-installation\\",
};

/**
 * Unsuspend an app installation
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const unsuspendInstallation: ApiHeroEndpoint<{ installationId: number }, void> = {
  id: \\"apps/unsuspend-installation\\",
};

/**
 * Delete an app authorization
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. You must also provide a valid OAuth \`access_token\` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const deleteAuthorization: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       */
      access_token: string;
    };
  },
  void
> = {
  id: \\"apps/delete-authorization\\",
};

/**
 * Check a token
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application \`client_id\` and the password is its \`client_secret\`. Invalid tokens will return \`404 NOT FOUND\`.
 */
export const checkToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The access_token of the OAuth application.
       */
      access_token: string;
    };
  },
  Authorization
> = {
  id: \\"apps/check-token\\",
};

/**
 * Delete an app token
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password.
 */
export const deleteToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       */
      access_token: string;
    };
  },
  void
> = {
  id: \\"apps/delete-token\\",
};

/**
 * Reset a token
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \\"token\\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
 */
export const resetToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The access_token of the OAuth application.
       */
      access_token: string;
    };
  },
  Authorization
> = {
  id: \\"apps/reset-token\\",
};

/**
 * Create a scoped access token
 * Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
 */
export const scopeToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       */
      access_token: string;

      /**
       * The name of the user or organization to scope the user-to-server access token to. **Required** unless \`target_id\` is specified.
       */
      target?: string;

      /**
       * The ID of the user or organization to scope the user-to-server access token to. **Required** unless \`target\` is specified.
       */
      target_id?: number;

      /**
       * The list of repository names to scope the user-to-server access token to. \`repositories\` may not be specified if \`repository_ids\` is specified.
       */
      repositories?: Array<string>;

      /**
       * The list of repository IDs to scope the user-to-server access token to. \`repository_ids\` may not be specified if \`repositories\` is specified.
       */
      repository_ids?: Array<number>;

      permissions?: AppPermissions;
    };
  },
  Authorization
> = {
  id: \\"apps/scope-token\\",
};

/**
 * Get an app
 * **Note**: The \`:app_slug\` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., \`https://github.com/settings/apps/:app_slug\`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const getBySlug: ApiHeroEndpoint<{ appSlug: string }, Integration> = {
  id: \\"apps/get-by-slug\\",
};

/**
 * List repositories accessible to the app installation
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const listReposAccessibleToInstallation: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  {
    total_count: number;

    repositories: Array<Repository>;

    repository_selection?: string;
  }
> = {
  id: \\"apps/list-repos-accessible-to-installation\\",
};

/**
 * Revoke an installation access token
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \\"[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)\\" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const revokeInstallationAccessToken: ApiHeroEndpoint<never, void> = {
  id: \\"apps/revoke-installation-access-token\\",
};

/**
 * Get a subscription plan for an account
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const getSubscriptionPlanForAccount: ApiHeroEndpoint<
  { accountId: number },
  MarketplacePurchase
> = {
  id: \\"apps/get-subscription-plan-for-account\\",
};

/**
 * List plans
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listPlans: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<MarketplaceListingPlan>
> = {
  id: \\"apps/list-plans\\",
};

/**
 * List accounts for a plan
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listAccountsForPlan: ApiHeroEndpoint<
  {
    planId: number;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<MarketplacePurchase>
> = {
  id: \\"apps/list-accounts-for-plan\\",
};

/**
 * Get a subscription plan for an account (stubbed)
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const getSubscriptionPlanForAccountStubbed: ApiHeroEndpoint<
  { accountId: number },
  MarketplacePurchase
> = {
  id: \\"apps/get-subscription-plan-for-account-stubbed\\",
};

/**
 * List plans (stubbed)
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listPlansStubbed: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<MarketplaceListingPlan>
> = {
  id: \\"apps/list-plans-stubbed\\",
};

/**
 * List accounts for a plan (stubbed)
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listAccountsForPlanStubbed: ApiHeroEndpoint<
  {
    planId: number;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<MarketplacePurchase>
> = {
  id: \\"apps/list-accounts-for-plan-stubbed\\",
};

/**
 * Get an organization installation for the authenticated app
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getOrgInstallation: ApiHeroEndpoint<{ org: string }, Installation> = {
  id: \\"apps/get-org-installation\\",
};

/**
 * Get a repository installation for the authenticated app
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getRepoInstallation: ApiHeroEndpoint<{ owner: string; repo: string }, Installation> = {
  id: \\"apps/get-repo-installation\\",
};

/**
 * List app installations accessible to the user access token
 * Lists installations of your GitHub App that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the \`permissions\` key.
 */
export const listInstallationsForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  {
    total_count: number;

    installations: Array<Installation>;
  }
> = {
  id: \\"apps/list-installations-for-authenticated-user\\",
};

/**
 * List repositories accessible to the user access token
 * List repositories that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the \`permissions\` key.
 */
export const listInstallationReposForAuthenticatedUser: ApiHeroEndpoint<
  { installationId: number; perPage?: number; page?: number },
  {
    total_count: number;

    repository_selection?: string;

    repositories: Array<Repository>;
  }
> = {
  id: \\"apps/list-installation-repos-for-authenticated-user\\",
};

/**
 * Add a repository to an app installation
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const addRepoToInstallationForAuthenticatedUser: ApiHeroEndpoint<
  { installationId: number; repositoryId: number },
  void
> = {
  id: \\"apps/add-repo-to-installation-for-authenticated-user\\",
};

/**
 * Remove a repository from an app installation
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const removeRepoFromInstallationForAuthenticatedUser: ApiHeroEndpoint<
  { installationId: number; repositoryId: number },
  void
> = {
  id: \\"apps/remove-repo-from-installation-for-authenticated-user\\",
};

/**
 * List subscriptions for the authenticated user
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const listSubscriptionsForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<UserMarketplacePurchase>
> = {
  id: \\"apps/list-subscriptions-for-authenticated-user\\",
};

/**
 * List subscriptions for the authenticated user (stubbed)
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const listSubscriptionsForAuthenticatedUserStubbed: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<UserMarketplacePurchase>
> = {
  id: \\"apps/list-subscriptions-for-authenticated-user-stubbed\\",
};

/**
 * Get a user installation for the authenticated app
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getUserInstallation: ApiHeroEndpoint<{ username: string }, Installation> = {
  id: \\"apps/get-user-installation\\",
};
",
  "billing.ts" => "import {
  ActionsBillingUsage,
  AdvancedSecurityActiveCommitters,
  CombinedBillingUsage,
  PackagesBillingUsage,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get GitHub Actions billing for an enterprise
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * The authenticated user must be an enterprise admin.
 */
export const getGithubActionsBillingGhe: ApiHeroEndpoint<
  { enterprise: string },
  ActionsBillingUsage
> = {
  id: \\"billing/get-github-actions-billing-ghe\\",
};

/**
 * Get GitHub Advanced Security active committers for an enterprise
 * Gets the GitHub Advanced Security active committers for an enterprise per repository.
 *
 * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the \`total_advanced_security_committers\` is not the sum of active_users for each repository.
 *
 * The total number of repositories with committer information is tracked by the \`total_count\` field.
 */
export const getGithubAdvancedSecurityBillingGhe: ApiHeroEndpoint<
  { enterprise: string; perPage?: number; page?: number },
  AdvancedSecurityActiveCommitters
> = {
  id: \\"billing/get-github-advanced-security-billing-ghe\\",
};

/**
 * Get GitHub Packages billing for an enterprise
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * The authenticated user must be an enterprise admin.
 */
export const getGithubPackagesBillingGhe: ApiHeroEndpoint<
  { enterprise: string },
  PackagesBillingUsage
> = {
  id: \\"billing/get-github-packages-billing-ghe\\",
};

/**
 * Get shared storage billing for an enterprise
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * The authenticated user must be an enterprise admin.
 */
export const getSharedStorageBillingGhe: ApiHeroEndpoint<
  { enterprise: string },
  CombinedBillingUsage
> = {
  id: \\"billing/get-shared-storage-billing-ghe\\",
};

/**
 * Get GitHub Actions billing for an organization
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * Access tokens must have the \`repo\` or \`admin:org\` scope.
 */
export const getGithubActionsBillingOrg: ApiHeroEndpoint<{ org: string }, ActionsBillingUsage> = {
  id: \\"billing/get-github-actions-billing-org\\",
};

/**
 * Get GitHub Advanced Security active committers for an organization
 * Gets the GitHub Advanced Security active committers for an organization per repository.
 *
 * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the \`total_advanced_security_committers\` is not the sum of advanced_security_committers for each repository.
 *
 * If this organization defers to an enterprise for billing, the \`total_advanced_security_committers\` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
 *
 * The total number of repositories with committer information is tracked by the \`total_count\` field.
 */
export const getGithubAdvancedSecurityBillingOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  AdvancedSecurityActiveCommitters
> = {
  id: \\"billing/get-github-advanced-security-billing-org\\",
};

/**
 * Get GitHub Packages billing for an organization
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`repo\` or \`admin:org\` scope.
 */
export const getGithubPackagesBillingOrg: ApiHeroEndpoint<{ org: string }, PackagesBillingUsage> = {
  id: \\"billing/get-github-packages-billing-org\\",
};

/**
 * Get shared storage billing for an organization
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`repo\` or \`admin:org\` scope.
 */
export const getSharedStorageBillingOrg: ApiHeroEndpoint<{ org: string }, CombinedBillingUsage> = {
  id: \\"billing/get-shared-storage-billing-org\\",
};

/**
 * Get GitHub Actions billing for a user
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * Access tokens must have the \`user\` scope.
 */
export const getGithubActionsBillingUser: ApiHeroEndpoint<
  { username: string },
  ActionsBillingUsage
> = {
  id: \\"billing/get-github-actions-billing-user\\",
};

/**
 * Get GitHub Packages billing for a user
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`user\` scope.
 */
export const getGithubPackagesBillingUser: ApiHeroEndpoint<
  { username: string },
  PackagesBillingUsage
> = {
  id: \\"billing/get-github-packages-billing-user\\",
};

/**
 * Get shared storage billing for a user
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`user\` scope.
 */
export const getSharedStorageBillingUser: ApiHeroEndpoint<
  { username: string },
  CombinedBillingUsage
> = {
  id: \\"billing/get-shared-storage-billing-user\\",
};
",
  "checks.ts" => "import {
  CheckAnnotation,
  CheckRun,
  CheckSuite,
  CheckSuitePreference,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Create a check run
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the \`checks:write\` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const create: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the check. For example, \\"code-coverage\\".
       */
      name: string;

      /**
       * The SHA of the commit.
       */
      head_sha: string;

      /**
       * The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
       */
      details_url?: string;

      /**
       * A reference for the run on the integrator's system.
       */
      external_id?: string;

      /**
       * The current status.
       */
      status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";

      /**
       * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      started_at?: string;

      /**
       * **Required if you provide \`completed_at\` or a \`status\` of \`completed\`**. The final conclusion of the check.
       **Note:** Providing \`conclusion\` will automatically set the \`status\` parameter to \`completed\`. You cannot change a check run conclusion to \`stale\`, only GitHub can set this.
       */
      conclusion?:
        | \\"action_required\\"
        | \\"cancelled\\"
        | \\"failure\\"
        | \\"neutral\\"
        | \\"success\\"
        | \\"skipped\\"
        | \\"stale\\"
        | \\"timed_out\\";

      /**
       * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      completed_at?: string;

      /**
       * Check runs can accept a variety of data in the \`output\` object, including a \`title\` and \`summary\` and can optionally provide descriptive details about the run. See the [\`output\` object](https://docs.github.com/rest/reference/checks#output-object) description.
       */
      output?: {
        /**
         * The title of the check run.
         */
        title: string;

        /**
         * The summary of the check run. This parameter supports Markdown.
         */
        summary: string;

        /**
         * The details of the check run. This parameter supports Markdown.
         */
        text?: string;

        /**
         * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \\"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\\". See the [\`annotations\` object](https://docs.github.com/rest/reference/checks#annotations-object) description for details about how to use this parameter.
         */
        annotations?: Array<{
          /**
           * The path of the file to add an annotation to. For example, \`assets/css/main.css\`.
           */
          path: string;

          /**
           * The start line of the annotation.
           */
          start_line: number;

          /**
           * The end line of the annotation.
           */
          end_line: number;

          /**
           * The start column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          start_column?: number;

          /**
           * The end column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          end_column?: number;

          /**
           * The level of the annotation.
           */
          annotation_level: \\"notice\\" | \\"warning\\" | \\"failure\\";

          /**
           * A short description of the feedback for these lines of code. The maximum size is 64 KB.
           */
          message: string;

          /**
           * The title that represents the annotation. The maximum size is 255 characters.
           */
          title?: string;

          /**
           * Details about this annotation. The maximum size is 64 KB.
           */
          raw_details?: string;
        }>;

        /**
         * Adds images to the output displayed in the GitHub pull request UI. See the [\`images\` object](https://docs.github.com/rest/reference/checks#images-object) description for details.
         */
        images?: Array<{
          /**
           * The alternative text for the image.
           */
          alt: string;

          /**
           * The full URL of the image.
           */
          image_url: string;

          /**
           * A short image description.
           */
          caption?: string;
        }>;
      };

      /**
       * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [\`check_run.requested_action\` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a \`label\`, \`identifier\` and \`description\`. A maximum of three actions are accepted. See the [\`actions\` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \\"[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions).\\"
       */
      actions?: Array<{
        /**
         * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
         */
        label: string;

        /**
         * A short explanation of what this action would do. The maximum size is 40 characters.
         */
        description: string;

        /**
         * A reference for the action on the integrator's system. The maximum size is 20 characters.
         */
        identifier: string;
      }>;
    };
  },
  CheckRun
> = {
  id: \\"checks/create\\",
};

/**
 * Get a check run
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Gets a single check run using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
 */
export const getChecks: ApiHeroEndpoint<
  { owner: string; repo: string; checkRunId: number },
  CheckRun
> = {
  id: \\"checks/get\\",
};

/**
 * Update a check run
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the \`checks:write\` permission to edit check runs.
 */
export const update: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    checkRunId: number;
    body: {
      /**
       * The name of the check. For example, \\"code-coverage\\".
       */
      name?: string;

      /**
       * The URL of the integrator's site that has the full details of the check.
       */
      details_url?: string;

      /**
       * A reference for the run on the integrator's system.
       */
      external_id?: string;

      /**
       * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      started_at?: string;

      /**
       * The current status.
       */
      status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";

      /**
       * **Required if you provide \`completed_at\` or a \`status\` of \`completed\`**. The final conclusion of the check.
       **Note:** Providing \`conclusion\` will automatically set the \`status\` parameter to \`completed\`. You cannot change a check run conclusion to \`stale\`, only GitHub can set this.
       */
      conclusion?:
        | \\"action_required\\"
        | \\"cancelled\\"
        | \\"failure\\"
        | \\"neutral\\"
        | \\"success\\"
        | \\"skipped\\"
        | \\"stale\\"
        | \\"timed_out\\";

      /**
       * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      completed_at?: string;

      /**
       * Check runs can accept a variety of data in the \`output\` object, including a \`title\` and \`summary\` and can optionally provide descriptive details about the run. See the [\`output\` object](https://docs.github.com/rest/reference/checks#output-object-1) description.
       */
      output?: {
        /**
         * **Required**.
         */
        title?: string;

        /**
         * Can contain Markdown.
         */
        summary: string;

        /**
         * Can contain Markdown.
         */
        text?: string;

        /**
         * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \\"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\\". See the [\`annotations\` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
         */
        annotations?: Array<{
          /**
           * The path of the file to add an annotation to. For example, \`assets/css/main.css\`.
           */
          path: string;

          /**
           * The start line of the annotation.
           */
          start_line: number;

          /**
           * The end line of the annotation.
           */
          end_line: number;

          /**
           * The start column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          start_column?: number;

          /**
           * The end column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          end_column?: number;

          /**
           * The level of the annotation.
           */
          annotation_level: \\"notice\\" | \\"warning\\" | \\"failure\\";

          /**
           * A short description of the feedback for these lines of code. The maximum size is 64 KB.
           */
          message: string;

          /**
           * The title that represents the annotation. The maximum size is 255 characters.
           */
          title?: string;

          /**
           * Details about this annotation. The maximum size is 64 KB.
           */
          raw_details?: string;
        }>;

        /**
         * Adds images to the output displayed in the GitHub pull request UI. See the [\`images\` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
         */
        images?: Array<{
          /**
           * The alternative text for the image.
           */
          alt: string;

          /**
           * The full URL of the image.
           */
          image_url: string;

          /**
           * A short image description.
           */
          caption?: string;
        }>;
      };

      /**
       * Possible further actions the integrator can perform, which a user may trigger. Each action includes a \`label\`, \`identifier\` and \`description\`. A maximum of three actions are accepted. See the [\`actions\` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \\"[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions).\\"
       */
      actions?: Array<{
        /**
         * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
         */
        label: string;

        /**
         * A short explanation of what this action would do. The maximum size is 40 characters.
         */
        description: string;

        /**
         * A reference for the action on the integrator's system. The maximum size is 20 characters.
         */
        identifier: string;
      }>;
    };
  },
  CheckRun
> = {
  id: \\"checks/update\\",
};

/**
 * List check run annotations
 * Lists annotations for a check run using the annotation \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the \`repo\` scope to get annotations for a check run in a private repository.
 */
export const listAnnotations: ApiHeroEndpoint<
  { owner: string; repo: string; checkRunId: number; perPage?: number; page?: number },
  Array<CheckAnnotation>
> = {
  id: \\"checks/list-annotations\\",
};

/**
 * Rerequest a check run
 * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [\`check_run\` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action \`rerequested\`. When a check run is \`rerequested\`, its \`status\` is reset to \`queued\` and the \`conclusion\` is cleared.
 *
 * To rerequest a check run, your GitHub App must have the \`checks:read\` permission on a private repository or pull access to a public repository.
 */
export const rerequestRun: ApiHeroEndpoint<
  { owner: string; repo: string; checkRunId: number },
  {}
> = {
  id: \\"checks/rerequest-run\\",
};

/**
 * Create a check suite
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \\"[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\\". Your GitHub App must have the \`checks:write\` permission to create check suites.
 */
export const createSuite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The sha of the head commit.
       */
      head_sha: string;
    };
  },
  CheckSuite
> = {
  id: \\"checks/create-suite\\",
};

/**
 * Update repository preferences for check suites
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const setSuitesPreferences: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [\`auto_trigger_checks\` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
       */
      auto_trigger_checks?: Array<{
        /**
         * The \`id\` of the GitHub App.
         */
        app_id: number;

        /**
         * Set to \`true\` to enable automatic creation of CheckSuite events upon pushes to the repository, or \`false\` to disable them.
         */
        setting: boolean;
      }>;
    };
  },
  CheckSuitePreference
> = {
  id: \\"checks/set-suites-preferences\\",
};

/**
 * Get a check suite
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`.
 *
 * Gets a single check suite using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the \`repo\` scope to get check suites in a private repository.
 */
export const getSuite: ApiHeroEndpoint<
  { owner: string; repo: string; checkSuiteId: number },
  CheckSuite
> = {
  id: \\"checks/get-suite\\",
};

/**
 * List check runs in a check suite
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Lists check runs for a check suite using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
 */
export const listForSuite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    checkSuiteId: number;
    checkName?: string;
    status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
    filter?: \\"latest\\" | \\"all\\";
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    check_runs: Array<CheckRun>;
  }
> = {
  id: \\"checks/list-for-suite\\",
};

/**
 * Rerequest a check suite
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [\`check_suite\` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action \`rerequested\`. When a check suite is \`rerequested\`, its \`status\` is reset to \`queued\` and the \`conclusion\` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the \`checks:read\` permission on a private repository or pull access to a public repository.
 */
export const rerequestSuite: ApiHeroEndpoint<
  { owner: string; repo: string; checkSuiteId: number },
  {}
> = {
  id: \\"checks/rerequest-suite\\",
};

/**
 * List check runs for a Git reference
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Lists check runs for a commit ref. The \`ref\` can be a SHA, branch name, or a tag name. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
 */
export const listForRef: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    ref: string;
    checkName?: string;
    status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
    filter?: \\"latest\\" | \\"all\\";
    perPage?: number;
    page?: number;
    appId?: number;
  },
  {
    total_count: number;

    check_runs: Array<CheckRun>;
  }
> = {
  id: \\"checks/list-for-ref\\",
};

/**
 * List check suites for a Git reference
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`.
 *
 * Lists check suites for a commit \`ref\`. The \`ref\` can be a SHA, branch name, or a tag name. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the \`repo\` scope to get check suites in a private repository.
 */
export const listSuitesForRef: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    ref: string;
    appId?: number;
    checkName?: string;
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    check_suites: Array<CheckSuite>;
  }
> = {
  id: \\"checks/list-suites-for-ref\\",
};
",
  "code-scanning.ts" => "import {
  AlertNumber,
  CodeScanningAlert,
  CodeScanningAlertDismissedComment,
  CodeScanningAlertDismissedReason,
  CodeScanningAlertInstance,
  CodeScanningAlertItems,
  CodeScanningAlertSetState,
  CodeScanningAlertState,
  CodeScanningAnalysis,
  CodeScanningAnalysisCommitSha,
  CodeScanningAnalysisDeletion,
  CodeScanningAnalysisSarifFile,
  CodeScanningAnalysisSarifId,
  CodeScanningAnalysisToolGuid,
  CodeScanningAnalysisToolName,
  CodeScanningOrganizationAlertItems,
  CodeScanningRef,
  CodeScanningSarifsReceipt,
  CodeScanningSarifsStatus,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List code scanning alerts for an enterprise
 * Lists code scanning alerts for the default branch for all eligible repositories in an enterprise. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \\"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\\"
 *
 * To use this endpoint, you must be a member of the enterprise,
 * and you must use an access token with the \`repo\` scope or \`security_events\` scope.
 */
export const listAlertsForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    toolName?: CodeScanningAnalysisToolName;
    toolGuid?: CodeScanningAnalysisToolGuid;
    before?: string;
    after?: string;
    page?: number;
    perPage?: number;
    direction?: \\"asc\\" | \\"desc\\";
    state?: CodeScanningAlertState;
    sort?: \\"created\\" | \\"updated\\";
  },
  Array<CodeScanningOrganizationAlertItems>
> = {
  id: \\"code-scanning/list-alerts-for-enterprise\\",
};

/**
 * List code scanning alerts for an organization
 * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \\"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\\"
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the \`repo\` scope or \`security_events\` scope.
 *
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 */
export const listAlertsForOrg: ApiHeroEndpoint<
  {
    org: string;
    toolName?: CodeScanningAnalysisToolName;
    toolGuid?: CodeScanningAnalysisToolGuid;
    before?: string;
    after?: string;
    page?: number;
    perPage?: number;
    direction?: \\"asc\\" | \\"desc\\";
    state?: CodeScanningAlertState;
    sort?: \\"created\\" | \\"updated\\";
  },
  Array<CodeScanningOrganizationAlertItems>
> = {
  id: \\"code-scanning/list-alerts-for-org\\",
};

/**
 * List code scanning alerts for a repository
 * Lists code scanning alerts.
 *
 * To use this endpoint, you must use an access token with the \`security_events\` scope or, for alerts from public repositories only, an access token with the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`security_events\` read
 * permission to use this endpoint.
 *
 * The response includes a \`most_recent_instance\` object.
 * This provides details of the most recent instance of this alert
 * for the default branch (or for the specified Git reference if you used \`ref\` in the request).
 */
export const listAlertsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    toolName?: CodeScanningAnalysisToolName;
    toolGuid?: CodeScanningAnalysisToolGuid;
    page?: number;
    perPage?: number;
    ref?: CodeScanningRef;
    direction?: \\"asc\\" | \\"desc\\";
    sort?: \\"created\\" | \\"updated\\";
    state?: CodeScanningAlertState;
  },
  Array<CodeScanningAlertItems>
> = {
  id: \\"code-scanning/list-alerts-for-repo\\",
};

/**
 * Get a code scanning alert
 * Gets a single code scanning alert. You must use an access token with the \`security_events\` scope to use this endpoint with private repos, the \`public_repo\` scope also grants permission to read security events on public repos only. GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by \`instances_url\`.
 */
export const getAlert: ApiHeroEndpoint<
  { owner: string; repo: string; alertNumber: AlertNumber },
  CodeScanningAlert
> = {
  id: \\"code-scanning/get-alert\\",
};

/**
 * Update a code scanning alert
 * Updates the status of a single code scanning alert. You must use an access token with the \`security_events\` scope to use this endpoint with private repositories. You can also use tokens with the \`public_repo\` scope for public repositories only. GitHub Apps must have the \`security_events\` write permission to use this endpoint.
 */
export const updateAlert: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    alertNumber: AlertNumber;
    body: {
      state: CodeScanningAlertSetState;

      dismissed_reason?: CodeScanningAlertDismissedReason;

      dismissed_comment?: CodeScanningAlertDismissedComment;
    };
  },
  CodeScanningAlert
> = {
  id: \\"code-scanning/update-alert\\",
};

/**
 * List instances of a code scanning alert
 * Lists all instances of the specified code scanning alert.
 * You must use an access token with the \`security_events\` scope to use this endpoint with private repos,
 * the \`public_repo\` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 */
export const listAlertInstances: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    alertNumber: AlertNumber;
    page?: number;
    perPage?: number;
    ref?: CodeScanningRef;
  },
  Array<CodeScanningAlertInstance>
> = {
  id: \\"code-scanning/list-alert-instances\\",
};

/**
 * List code scanning analyses for a repository
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the \`page\` and \`per_page\` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The \`rules_count\` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and \`0\` is returned in this field.
 *
 * You must use an access token with the \`security_events\` scope to use this endpoint with private repos,
 * the \`public_repo\` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The \`tool_name\` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the \`tool\` field.
 */
export const listRecentAnalyses: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    toolName?: CodeScanningAnalysisToolName;
    toolGuid?: CodeScanningAnalysisToolGuid;
    page?: number;
    perPage?: number;
    ref?: CodeScanningRef;
    sarifId?: CodeScanningAnalysisSarifId;
  },
  Array<CodeScanningAnalysis>
> = {
  id: \\"code-scanning/list-recent-analyses\\",
};

/**
 * Get a code scanning analysis for a repository
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the \`security_events\` scope to use this endpoint with private repos,
 * the \`public_repo\` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The \`rules_count\` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and \`0\` is returned in this field.
 *
 * If you use the Accept header \`application/sarif+json\`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 */
export const getAnalysis: ApiHeroEndpoint<
  { owner: string; repo: string; analysisId: number },
  CodeScanningAnalysis
> = {
  id: \\"code-scanning/get-analysis\\",
};

/**
 * Delete a code scanning analysis from a repository
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the \`repo\` scope. For public repositories,
 * you must use an access token with \`public_repo\` scope.
 * GitHub Apps must have the \`security_events\` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * \`\`\`
 * \\"deletable\\": true
 * \`\`\`
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * \`ref\`
 * * \`tool\`
 * * \`analysis_key\`
 * * \`environment\`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * \`\`\`
 * Analysis specified is not deletable.
 * \`\`\`
 *
 * The response from a successful \`DELETE\` operation provides you with
 * two alternative URLs for deleting the next analysis in the set:
 * \`next_analysis_url\` and \`confirm_delete_url\`.
 * Use the \`next_analysis_url\` URL if you want to avoid accidentally deleting the final analysis
 * in a set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the \`confirm_delete_url\` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set, the value of \`next_analysis_url\` and \`confirm_delete_url\`
 * in the 200 response is \`null\`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find an analysis that's identified as deletable.
 * Each set of analyses always has one that's identified as deletable.
 * Having found the deletable analysis for one of the two sets,
 * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
 * Then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 * **Inner loop**:
 * * Delete the identified analysis.
 * * Parse the response for the value of \`confirm_delete_url\` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the \`confirm_delete_url\` value. Alternatively, you could use the \`next_analysis_url\` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const deleteAnalysis: ApiHeroEndpoint<
  { owner: string; repo: string; analysisId: number; confirmDelete?: string | null },
  CodeScanningAnalysisDeletion
> = {
  id: \\"code-scanning/delete-analysis\\",
};

/**
 * Upload an analysis as SARIF data
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the \`security_events\` scope to use this endpoint for private repositories. You can also use tokens with the \`public_repo\` scope for public repositories only. GitHub Apps must have the \`security_events\` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 * - If you upload to a pull request, for example \`--ref refs/pull/42/merge\` or \`--ref refs/pull/42/head\`, then the results appear as alerts in a pull request check. For more information, see \\"[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\\"
 * - If you upload to a branch, for example \`--ref refs/heads/my-branch\`, then the results appear in the **Security** tab for your repository. For more information, see \\"[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\\"
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using \`gzip\`, and then encode it as a Base64 format string. For example:
 *
 * \`\`\`
 * gzip -c analysis-data.sarif | base64 -w0
 * \`\`\`
 *
 * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
 *
 * The \`202 Accepted\`, response includes an \`id\` value.
 * You can use this ID to check the status of the upload by using this for the \`/sarifs/{sarif_id}\` endpoint.
 * For more information, see \\"[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).\\"
 */
export const uploadSarif: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      commit_sha: CodeScanningAnalysisCommitSha;

      ref: CodeScanningRef;

      sarif: CodeScanningAnalysisSarifFile;

      /** 
* The base directory used in the analysis, as it appears in the SARIF file.
This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
*/
      checkout_uri?: string;

      /**
       * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      started_at?: string;

      /**
       * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \\"API\\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the \`tool_guid\` parameter of operations such as \`GET /repos/{owner}/{repo}/code-scanning/alerts\`.
       */
      tool_name?: string;
    };
  },
  CodeScanningSarifsReceipt
> = {
  id: \\"code-scanning/upload-sarif\\",
};

/**
 * Get information about a SARIF upload
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \\"[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository).\\" You must use an access token with the \`security_events\` scope to use this endpoint with private repos, the \`public_repo\` scope also grants permission to read security events on public repos only. GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 */
export const getSarif: ApiHeroEndpoint<
  { owner: string; repo: string; sarifId: string },
  CodeScanningSarifsStatus
> = {
  id: \\"code-scanning/get-sarif\\",
};
",
  "codes-of-conduct.ts" => "import { CodeOfConduct, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get all codes of conduct
 */
export const getAllCodesOfConduct: ApiHeroEndpoint<never, Array<CodeOfConduct>> = {
  id: \\"codes-of-conduct/get-all-codes-of-conduct\\",
};

/**
 * Get a code of conduct
 */
export const getConductCode: ApiHeroEndpoint<{ key: string }, CodeOfConduct> = {
  id: \\"codes-of-conduct/get-conduct-code\\",
};
",
  "codespaces.ts" => "import {
  Codespace,
  CodespaceExportDetails,
  CodespaceMachine,
  CodespacesPublicKey,
  CodespacesSecret,
  CodespacesUserPublicKey,
  MinimalRepository,
  RepoCodespacesSecret,
  SimpleUser,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List codespaces for the organization
 * Lists the codespaces associated to a specified organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listInOrganization: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  {
    total_count: number;

    codespaces: Array<Codespace>;
  }
> = {
  id: \\"codespaces/list-in-organization\\",
};

/**
 * Delete a codespace from the organization
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const deleteFromOrganization: ApiHeroEndpoint<
  { org: string; username: string; codespaceName: string },
  {}
> = {
  id: \\"codespaces/delete-from-organization\\",
};

/**
 * Stop a codespace for an organization user
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const stopInOrganization: ApiHeroEndpoint<
  { org: string; username: string; codespaceName: string },
  Codespace
> = {
  id: \\"codespaces/stop-in-organization\\",
};

/**
 * List codespaces in a repository for the authenticated user
 * Lists the codespaces associated to a specified repository and the authenticated user.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces\` repository permission to use this endpoint.
 */
export const listInRepositoryForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    codespaces: Array<Codespace>;
  }
> = {
  id: \\"codespaces/list-in-repository-for-authenticated-user\\",
};

/**
 * Create a codespace in a repository
 * Creates a codespace owned by the authenticated user in the specified repository.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const createWithRepoForAuthenticatedUser: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Git ref (typically a branch name) for this codespace
       */
      ref?: string;

      /**
       * Location for this codespace. Assigned by IP if not provided
       */
      location?: string;

      /**
       * IP for location auto-detection when proxying a request
       */
      client_ip?: string;

      /**
       * Machine type to use for this codespace
       */
      machine?: string;

      /**
       * Path to devcontainer.json config to use for this codespace
       */
      devcontainer_path?: string;

      /**
       * Whether to authorize requested permissions from devcontainer.json
       */
      multi_repo_permissions_opt_out?: boolean;

      /**
       * Working directory for this codespace
       */
      working_directory?: string;

      /**
       * Time in minutes before codespace stops from inactivity
       */
      idle_timeout_minutes?: number;

      /**
       * Display name for this codespace
       */
      display_name?: string;

      /**
       * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
       */
      retention_period_minutes?: number;
    } | null;
  },
  Codespace
> = {
  id: \\"codespaces/create-with-repo-for-authenticated-user\\",
};

/**
 * List devcontainer configurations in a repository for the authenticated user
 * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
 * specify launchpoint configurations for codespaces created within the repository.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_metadata\` repository permission to use this endpoint.
 */
export const listDevcontainersInRepositoryForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    devcontainers: Array<{
      path: string;

      name?: string;
    }>;
  }
> = {
  id: \\"codespaces/list-devcontainers-in-repository-for-authenticated-user\\",
};

/**
 * List available machine types for a repository
 * List the machine types available for a given repository based on its configuration.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_metadata\` repository permission to use this endpoint.
 */
export const repoMachinesForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; location?: string; clientIp?: string },
  {
    total_count: number;

    machines: Array<CodespaceMachine>;
  }
> = {
  id: \\"codespaces/repo-machines-for-authenticated-user\\",
};

/**
 * Get default attributes for a codespace
 * Gets the default attributes for codespaces created by the user with the repository.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const preFlightWithRepoForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; ref?: string; clientIp?: string },
  {
    billable_owner?: SimpleUser;

    defaults?: {
      location: string;

      devcontainer_path: string;
    };
  }
> = {
  id: \\"codespaces/pre-flight-with-repo-for-authenticated-user\\",
};

/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const listRepoSecrets: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    secrets: Array<RepoCodespacesSecret>;
  }
> = {
  id: \\"codespaces/list-repo-secrets\\",
};

/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const getRepoPublicKey: ApiHeroEndpoint<
  { owner: string; repo: string },
  CodespacesPublicKey
> = {
  id: \\"codespaces/get-repo-public-key\\",
};

/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const getRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  RepoCodespacesSecret
> = {
  id: \\"codespaces/get-repo-secret\\",
};

/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository
 * permission to use this endpoint.
 *
 * #### Example of encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example of encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example of encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example of encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateRepoSecret: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    secretName: string;
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.
       */
      encrypted_value?: string;

      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;
    };
  },
  {}
> = {
  id: \\"codespaces/create-or-update-repo-secret\\",
};

/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const deleteRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  void
> = {
  id: \\"codespaces/delete-repo-secret\\",
};

/**
 * Create a codespace from a pull request
 * Creates a codespace owned by the authenticated user for the specified pull request.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const createWithPrForAuthenticatedUser: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body: {
      /**
       * Location for this codespace. Assigned by IP if not provided
       */
      location?: string;

      /**
       * IP for location auto-detection when proxying a request
       */
      client_ip?: string;

      /**
       * Machine type to use for this codespace
       */
      machine?: string;

      /**
       * Path to devcontainer.json config to use for this codespace
       */
      devcontainer_path?: string;

      /**
       * Whether to authorize requested permissions from devcontainer.json
       */
      multi_repo_permissions_opt_out?: boolean;

      /**
       * Working directory for this codespace
       */
      working_directory?: string;

      /**
       * Time in minutes before codespace stops from inactivity
       */
      idle_timeout_minutes?: number;

      /**
       * Display name for this codespace
       */
      display_name?: string;

      /**
       * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
       */
      retention_period_minutes?: number;
    } | null;
  },
  Codespace
> = {
  id: \\"codespaces/create-with-pr-for-authenticated-user\\",
};

/**
 * List codespaces for the authenticated user
 * Lists the authenticated user's codespaces.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces\` repository permission to use this endpoint.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number; repositoryId?: number },
  {
    total_count: number;

    codespaces: Array<Codespace>;
  }
> = {
  id: \\"codespaces/list-for-authenticated-user\\",
};

/**
 * Create a codespace for the authenticated user
 * Creates a new codespace, owned by the authenticated user.
 *
 * This endpoint requires either a \`repository_id\` OR a \`pull_request\` but not both.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const createForAuthenticatedUser: ApiHeroEndpoint<
  {
    body:
      | {
          /**
           * Repository id for this codespace
           */
          repository_id: number;

          /**
           * Git ref (typically a branch name) for this codespace
           */
          ref?: string;

          /**
           * Location for this codespace. Assigned by IP if not provided
           */
          location?: string;

          /**
           * IP for location auto-detection when proxying a request
           */
          client_ip?: string;

          /**
           * Machine type to use for this codespace
           */
          machine?: string;

          /**
           * Path to devcontainer.json config to use for this codespace
           */
          devcontainer_path?: string;

          /**
           * Whether to authorize requested permissions from devcontainer.json
           */
          multi_repo_permissions_opt_out?: boolean;

          /**
           * Working directory for this codespace
           */
          working_directory?: string;

          /**
           * Time in minutes before codespace stops from inactivity
           */
          idle_timeout_minutes?: number;

          /**
           * Display name for this codespace
           */
          display_name?: string;

          /**
           * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
           */
          retention_period_minutes?: number;
        }
      | {
          /**
           * Pull request number for this codespace
           */
          pull_request: {
            /**
             * Pull request number
             */
            pull_request_number: number;

            /**
             * Repository id for this codespace
             */
            repository_id: number;
          };

          /**
           * Location for this codespace. Assigned by IP if not provided
           */
          location?: string;

          /**
           * Machine type to use for this codespace
           */
          machine?: string;

          /**
           * Path to devcontainer.json config to use for this codespace
           */
          devcontainer_path?: string;

          /**
           * Working directory for this codespace
           */
          working_directory?: string;

          /**
           * Time in minutes before codespace stops from inactivity
           */
          idle_timeout_minutes?: number;
        };
  },
  Codespace
> = {
  id: \\"codespaces/create-for-authenticated-user\\",
};

/**
 * List secrets for the authenticated user
 * Lists all secrets available for a user's Codespaces without revealing their
 * encrypted values.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const listSecretsForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  {
    total_count: number;

    secrets: Array<CodespacesSecret>;
  }
> = {
  id: \\"codespaces/list-secrets-for-authenticated-user\\",
};

/**
 * Get public key for the authenticated user
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const getPublicKeyForAuthenticatedUser: ApiHeroEndpoint<never, CodespacesUserPublicKey> = {
  id: \\"codespaces/get-public-key-for-authenticated-user\\",
};

/**
 * Get a secret for the authenticated user
 * Gets a secret available to a user's codespaces without revealing its encrypted value.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const getSecretForAuthenticatedUser: ApiHeroEndpoint<
  { secretName: string },
  CodespacesSecret
> = {
  id: \\"codespaces/get-secret-for-authenticated-user\\",
};

/**
 * Create or update a secret for the authenticated user
 * Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission and \`codespaces_secrets\` repository permission on all referenced repositories to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateSecretForAuthenticatedUser: ApiHeroEndpoint<
  {
    secretName: string;
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
       */
      encrypted_value?: string;

      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id: string;

      /**
       * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
       */
      selected_repository_ids?: Array<string>;
    };
  },
  {}
> = {
  id: \\"codespaces/create-or-update-secret-for-authenticated-user\\",
};

/**
 * Delete a secret for the authenticated user
 * Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const deleteSecretForAuthenticatedUser: ApiHeroEndpoint<{ secretName: string }, void> = {
  id: \\"codespaces/delete-secret-for-authenticated-user\\",
};

/**
 * List selected repositories for a user secret
 * List the repositories that have been granted the ability to use a user's codespace secret.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission and write access to the \`codespaces_secrets\` repository permission on all referenced repositories to use this endpoint.
 */
export const listRepositoriesForSecretForAuthenticatedUser: ApiHeroEndpoint<
  { secretName: string },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"codespaces/list-repositories-for-secret-for-authenticated-user\\",
};

/**
 * Set selected repositories for a user secret
 * Select the repositories that will use a user's codespace secret.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission and write access to the \`codespaces_secrets\` repository permission on all referenced repositories to use this endpoint.
 */
export const setRepositoriesForSecretForAuthenticatedUser: ApiHeroEndpoint<
  {
    secretName: string;
    body: {
      /**
       * An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"codespaces/set-repositories-for-secret-for-authenticated-user\\",
};

/**
 * Add a selected repository to a user secret
 * Adds a repository to the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission and write access to the \`codespaces_secrets\` repository permission on the referenced repository to use this endpoint.
 */
export const addRepositoryForSecretForAuthenticatedUser: ApiHeroEndpoint<
  { secretName: string; repositoryId: number },
  void
> = {
  id: \\"codespaces/add-repository-for-secret-for-authenticated-user\\",
};

/**
 * Remove a selected repository from a user secret
 * Removes a repository from the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const removeRepositoryForSecretForAuthenticatedUser: ApiHeroEndpoint<
  { secretName: string; repositoryId: number },
  void
> = {
  id: \\"codespaces/remove-repository-for-secret-for-authenticated-user\\",
};

/**
 * Get a codespace for the authenticated user
 * Gets information about a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces\` repository permission to use this endpoint.
 */
export const getForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, Codespace> = {
  id: \\"codespaces/get-for-authenticated-user\\",
};

/**
 * Delete a codespace for the authenticated user
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const deleteForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, {}> = {
  id: \\"codespaces/delete-for-authenticated-user\\",
};

/**
 * Update a codespace for the authenticated user
 * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
 *
 * If you specify a new machine type it will be applied the next time your codespace is started.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const updateForAuthenticatedUser: ApiHeroEndpoint<
  {
    codespaceName: string;
    body?: {
      /**
       * A valid machine to transition this codespace to.
       */
      machine?: string;

      /**
       * Display name for this codespace
       */
      display_name?: string;

      /**
       * Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
       */
      recent_folders?: Array<string>;
    };
  },
  Codespace
> = {
  id: \\"codespaces/update-for-authenticated-user\\",
};

/**
 * Export a codespace for the authenticated user
 * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
 *
 * You must authenticate using a personal access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const exportForAuthenticatedUser: ApiHeroEndpoint<
  { codespaceName: string },
  CodespaceExportDetails
> = {
  id: \\"codespaces/export-for-authenticated-user\\",
};

/**
 * Get details about a codespace export
 * Gets information about an export of a codespace.
 *
 * You must authenticate using a personal access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const getExportDetailsForAuthenticatedUser: ApiHeroEndpoint<
  { codespaceName: string; exportId: string },
  CodespaceExportDetails
> = {
  id: \\"codespaces/get-export-details-for-authenticated-user\\",
};

/**
 * List machine types for a codespace
 * List the machine types a codespace can transition to use.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_metadata\` repository permission to use this endpoint.
 */
export const codespaceMachinesForAuthenticatedUser: ApiHeroEndpoint<
  { codespaceName: string },
  {
    total_count: number;

    machines: Array<CodespaceMachine>;
  }
> = {
  id: \\"codespaces/codespace-machines-for-authenticated-user\\",
};

/**
 * Start a codespace for the authenticated user
 * Starts a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const startForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, Codespace> = {
  id: \\"codespaces/start-for-authenticated-user\\",
};

/**
 * Stop a codespace for the authenticated user
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const stopForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, Codespace> = {
  id: \\"codespaces/stop-for-authenticated-user\\",
};
",
  "emojis.ts" => "/**
 * Get emojis
 * Lists all the emojis available to use on GitHub.
 */
export const getEmojis: ApiHeroEndpoint<never, Record<string, string>> = {
  id: \\"emojis/get\\",
};
",
  "enterprise-admin.ts" => "import {
  ActionsEnterprisePermissions,
  AllowedActions,
  AuditLogEvent,
  AuthenticationToken,
  EnabledOrganizations,
  OrganizationSimple,
  Runner,
  RunnerApplication,
  RunnerGroupsEnterprise,
  RunnerLabel,
  ScimEnterpriseGroup,
  ScimEnterpriseUser,
  ScimGroupListEnterprise,
  ScimUserListEnterprise,
  SelectedActions,
  ServerStatistics,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get GitHub Enterprise Server statistics
 * Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.
 *
 * To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \\"[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\\" in the GitHub Enterprise Server documentation.
 *
 * You'll need to use a personal access token:
 * - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the \`read:enterprise\` permission.
 * - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the \`read:org\` permission.
 *
 * For more information on creating a personal access token, see \\"[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\\"
 */
export const getServerStatistics: ApiHeroEndpoint<
  { enterpriseOrOrg: string; dateStart?: string; dateEnd?: string },
  ServerStatistics
> = {
  id: \\"enterprise-admin/get-server-statistics\\",
};

/**
 * Get GitHub Actions permissions for an enterprise
 * Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const getGithubActionsPermissionsEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  ActionsEnterprisePermissions
> = {
  id: \\"enterprise-admin/get-github-actions-permissions-enterprise\\",
};

/**
 * Set GitHub Actions permissions for an enterprise
 * Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const setGithubActionsPermissionsEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      enabled_organizations: EnabledOrganizations;

      allowed_actions?: AllowedActions;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-github-actions-permissions-enterprise\\",
};

/**
 * List selected organizations enabled for GitHub Actions in an enterprise
 * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const listSelectedOrganizationsEnabledGithubActionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; perPage?: number; page?: number },
  {
    total_count: number;

    organizations: Array<OrganizationSimple>;
  }
> = {
  id: \\"enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise\\",
};

/**
 * Set selected organizations enabled for GitHub Actions in an enterprise
 * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const setSelectedOrganizationsEnabledGithubActionsEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      /**
       * List of organization IDs to enable for GitHub Actions.
       */
      selected_organization_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise\\",
};

/**
 * Enable a selected organization for GitHub Actions in an enterprise
 * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const enableSelectedOrganizationGithubActionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; orgId: number },
  void
> = {
  id: \\"enterprise-admin/enable-selected-organization-github-actions-enterprise\\",
};

/**
 * Disable a selected organization for GitHub Actions in an enterprise
 * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const disableSelectedOrganizationGithubActionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; orgId: number },
  void
> = {
  id: \\"enterprise-admin/disable-selected-organization-github-actions-enterprise\\",
};

/**
 * Get allowed actions and reusable workflows for an enterprise
 * Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const getAllowedActionsEnterprise: ApiHeroEndpoint<{ enterprise: string }, SelectedActions> =
  {
    id: \\"enterprise-admin/get-allowed-actions-enterprise\\",
  };

/**
 * Set allowed actions and reusable workflows for an enterprise
 * Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const setAllowedActionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; body: SelectedActions },
  void
> = {
  id: \\"enterprise-admin/set-allowed-actions-enterprise\\",
};

/**
 * List self-hosted runner groups for an enterprise
 * Lists all self-hosted runner groups for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listSelfHostedRunnerGroupsForEnterprise: ApiHeroEndpoint<
  { enterprise: string; perPage?: number; page?: number; visibleToOrganization?: string },
  {
    total_count: number;

    runner_groups: Array<RunnerGroupsEnterprise>;
  }
> = {
  id: \\"enterprise-admin/list-self-hosted-runner-groups-for-enterprise\\",
};

/**
 * Create a self-hosted runner group for an enterprise
 * Creates a new self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const createSelfHostedRunnerGroupForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      /**
       * Name of the runner group.
       */
      name: string;

      /**
       * Visibility of a runner group. You can select all organizations or select individual organization.
       */
      visibility?: \\"selected\\" | \\"all\\";

      /**
       * List of organization IDs that can access the runner group.
       */
      selected_organization_ids?: Array<number>;

      /**
       * List of runner IDs to add to the runner group.
       */
      runners?: Array<number>;

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;
    };
  },
  RunnerGroupsEnterprise
> = {
  id: \\"enterprise-admin/create-self-hosted-runner-group-for-enterprise\\",
};

/**
 * Get a self-hosted runner group for an enterprise
 * Gets a specific self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const getSelfHostedRunnerGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number },
  RunnerGroupsEnterprise
> = {
  id: \\"enterprise-admin/get-self-hosted-runner-group-for-enterprise\\",
};

/**
 * Delete a self-hosted runner group from an enterprise
 * Deletes a self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerGroupFromEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number },
  void
> = {
  id: \\"enterprise-admin/delete-self-hosted-runner-group-from-enterprise\\",
};

/**
 * Update a self-hosted runner group for an enterprise
 * Updates the \`name\` and \`visibility\` of a self-hosted runner group in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const updateSelfHostedRunnerGroupForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerGroupId: number;
    body?: {
      /**
       * Name of the runner group.
       */
      name?: string;

      /**
       * Visibility of a runner group. You can select all organizations or select individual organizations.
       */
      visibility?: \\"selected\\" | \\"all\\";

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;
    };
  },
  RunnerGroupsEnterprise
> = {
  id: \\"enterprise-admin/update-self-hosted-runner-group-for-enterprise\\",
};

/**
 * List organization access to a self-hosted runner group in an enterprise
 * Lists the organizations with access to a self-hosted runner group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; perPage?: number; page?: number },
  {
    total_count: number;

    organizations: Array<OrganizationSimple>;
  }
> = {
  id: \\"enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise\\",
};

/**
 * Set organization access for a self-hosted runner group in an enterprise
 * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const setOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerGroupId: number;
    body: {
      /**
       * List of organization IDs that can access the runner group.
       */
      selected_organization_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise\\",
};

/**
 * Add organization access to a self-hosted runner group in an enterprise
 * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const addOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; orgId: number },
  void
> = {
  id: \\"enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise\\",
};

/**
 * Remove organization access to a self-hosted runner group in an enterprise
 * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; orgId: number },
  void
> = {
  id: \\"enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise\\",
};

/**
 * List self-hosted runners in a group for an enterprise
 * Lists the self-hosted runners that are in a specific enterprise group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listSelfHostedRunnersInGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; perPage?: number; page?: number },
  {
    total_count: number;

    runners: Array<Runner>;
  }
> = {
  id: \\"enterprise-admin/list-self-hosted-runners-in-group-for-enterprise\\",
};

/**
 * Set self-hosted runners in a group for an enterprise
 * Replaces the list of self-hosted runners that are part of an enterprise runner group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const setSelfHostedRunnersInGroupForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerGroupId: number;
    body: {
      /**
       * List of runner IDs to add to the runner group.
       */
      runners: Array<number>;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-self-hosted-runners-in-group-for-enterprise\\",
};

/**
 * Add a self-hosted runner to a group for an enterprise
 * Adds a self-hosted runner to a runner group configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\`
 * scope to use this endpoint.
 */
export const addSelfHostedRunnerToGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; runnerId: number },
  void
> = {
  id: \\"enterprise-admin/add-self-hosted-runner-to-group-for-enterprise\\",
};

/**
 * Remove a self-hosted runner from a group for an enterprise
 * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeSelfHostedRunnerFromGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; runnerId: number },
  void
> = {
  id: \\"enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise\\",
};

/**
 * List self-hosted runners for an enterprise
 * Lists all self-hosted runners configured for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listSelfHostedRunnersForEnterprise: ApiHeroEndpoint<
  { enterprise: string; perPage?: number; page?: number },
  {
    total_count?: number;

    runners?: Array<Runner>;
  }
> = {
  id: \\"enterprise-admin/list-self-hosted-runners-for-enterprise\\",
};

/**
 * List runner applications for an enterprise
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listRunnerApplicationsForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  Array<RunnerApplication>
> = {
  id: \\"enterprise-admin/list-runner-applications-for-enterprise\\",
};

/**
 * Create a registration token for an enterprise
 * Returns a token that you can pass to the \`config\` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
 * \`\`\`
 */
export const createRegistrationTokenForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  AuthenticationToken
> = {
  id: \\"enterprise-admin/create-registration-token-for-enterprise\\",
};

/**
 * Create a remove token for an enterprise
 * Returns a token that you can pass to the \`config\` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an enterprise, replace \`TOKEN\` with the remove token provided by this
 * endpoint.
 *
 * \`\`\`
 * ./config.sh remove --token TOKEN
 * \`\`\`
 */
export const createRemoveTokenForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  AuthenticationToken
> = {
  id: \\"enterprise-admin/create-remove-token-for-enterprise\\",
};

/**
 * Get a self-hosted runner for an enterprise
 * Gets a specific self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const getSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  Runner
> = {
  id: \\"enterprise-admin/get-self-hosted-runner-for-enterprise\\",
};

/**
 * Delete a self-hosted runner from an enterprise
 * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerFromEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  void
> = {
  id: \\"enterprise-admin/delete-self-hosted-runner-from-enterprise\\",
};

/**
 * List labels for a self-hosted runner for an enterprise
 * Lists all labels for a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listLabelsForSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"enterprise-admin/list-labels-for-self-hosted-runner-for-enterprise\\",
};

/**
 * Add custom labels to a self-hosted runner for an enterprise
 * Add custom labels to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const addCustomLabelsToSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to add to the runner.
       */
      labels: Array<string>;
    };
  },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"enterprise-admin/add-custom-labels-to-self-hosted-runner-for-enterprise\\",
};

/**
 * Set custom labels for a self-hosted runner for an enterprise
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const setCustomLabelsForSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
       */
      labels: Array<string>;
    };
  },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"enterprise-admin/set-custom-labels-for-self-hosted-runner-for-enterprise\\",
};

/**
 * Remove all custom labels from a self-hosted runner for an enterprise
 * Remove all custom labels from a self-hosted runner configured in an
 * enterprise. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"enterprise-admin/remove-all-custom-labels-from-self-hosted-runner-for-enterprise\\",
};

/**
 * Remove a custom label from a self-hosted runner for an enterprise
 * Remove a custom label from a self-hosted runner configured
 * in an enterprise. Returns the remaining labels from the runner.
 *
 * This endpoint returns a \`404 Not Found\` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeCustomLabelFromSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number; name: string },
  {
    total_count: number;

    labels: Array<RunnerLabel>;
  }
> = {
  id: \\"enterprise-admin/remove-custom-label-from-self-hosted-runner-for-enterprise\\",
};

/**
 * Get the audit log for an enterprise
 * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the \`admin:enterprise\` scope.
 */
export const getAuditLog: ApiHeroEndpoint<
  {
    enterprise: string;
    phrase?: string;
    include?: \\"web\\" | \\"git\\" | \\"all\\";
    after?: string;
    before?: string;
    order?: \\"desc\\" | \\"asc\\";
    page?: number;
    perPage?: number;
  },
  Array<AuditLogEvent>
> = {
  id: \\"enterprise-admin/get-audit-log\\",
};

/**
 * List provisioned SCIM groups for an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const listProvisionedGroupsEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    startIndex?: number;
    count?: number;
    filter?: string;
    excludedAttributes?: string;
  },
  ScimGroupListEnterprise
> = {
  id: \\"enterprise-admin/list-provisioned-groups-enterprise\\",
};

/**
 * Provision a SCIM enterprise group and invite users
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
 */
export const provisionAndInviteEnterpriseGroup: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The name of the SCIM group. This must match the GitHub organization that the group maps to.
       */
      displayName: string;

      members?: Array<{
        /**
         * The SCIM user ID for a user.
         */
        value: string;
      }>;
    };
  },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/provision-and-invite-enterprise-group\\",
};

/**
 * Get SCIM provisioning information for an enterprise group
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const getProvisioningInformationForEnterpriseGroup: ApiHeroEndpoint<
  { enterprise: string; scimGroupId: string; excludedAttributes?: string },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/get-provisioning-information-for-enterprise-group\\",
};

/**
 * Set SCIM information for a provisioned enterprise group
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
 */
export const setInformationForProvisionedEnterpriseGroup: ApiHeroEndpoint<
  {
    enterprise: string;
    scimGroupId: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The name of the SCIM group. This must match the GitHub organization that the group maps to.
       */
      displayName: string;

      members?: Array<{
        /**
         * The SCIM user ID for a user.
         */
        value: string;
      }>;
    };
  },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/set-information-for-provisioned-enterprise-group\\",
};

/**
 * Delete a SCIM group from an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const deleteScimGroupFromEnterprise: ApiHeroEndpoint<
  { enterprise: string; scimGroupId: string },
  void
> = {
  id: \\"enterprise-admin/delete-scim-group-from-enterprise\\",
};

/**
 * Update an attribute for a SCIM enterprise group
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 */
export const updateAttributeForEnterpriseGroup: ApiHeroEndpoint<
  {
    enterprise: string;
    scimGroupId: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
       */
      Operations: Array<{
        op: \\"add\\" | \\"Add\\" | \\"remove\\" | \\"Remove\\" | \\"replace\\" | \\"Replace\\";

        path?: string;

        /**
         * Can be any value - string, number, array or object.
         */
        value?: {};
      }>;
    };
  },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/update-attribute-for-enterprise-group\\",
};

/**
 * List SCIM provisioned identities for an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 * - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
 * - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 * - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a \`null\` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
 *
 * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the \`null\` external identity entry is created and the user is prompted to sign in to their GitHub account:
 * - If the user signs in, their GitHub account is linked to this entry.
 * - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity \`null\` entry remains in place.
 */
export const listProvisionedIdentitiesEnterprise: ApiHeroEndpoint<
  { enterprise: string; startIndex?: number; count?: number; filter?: string },
  ScimUserListEnterprise
> = {
  id: \\"enterprise-admin/list-provisioned-identities-enterprise\\",
};

/**
 * Provision and invite a SCIM enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision enterprise membership for a user, and send organization invitation emails to the email address.
 *
 * You can optionally include the groups a user will be invited to join. If you do not provide a list of \`groups\`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
 */
export const provisionAndInviteEnterpriseUser: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The username for the user.
       */
      userName: string;

      name: {
        /**
         * The first name of the user.
         */
        givenName: string;

        /**
         * The last name of the user.
         */
        familyName: string;
      };

      /**
       * List of user emails.
       */
      emails: Array<{
        /**
         * The email address.
         */
        value: string;

        /**
         * The type of email address.
         */
        type: string;

        /**
         * Whether this email address is the primary address.
         */
        primary: boolean;
      }>;

      /**
       * List of SCIM group IDs the user is a member of.
       */
      groups?: Array<{
        value?: string;
      }>;
    };
  },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/provision-and-invite-enterprise-user\\",
};

/**
 * Get SCIM provisioning information for an enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const getProvisioningInformationForEnterpriseUser: ApiHeroEndpoint<
  { enterprise: string; scimUserId: string },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/get-provisioning-information-for-enterprise-user\\",
};

/**
 * Set SCIM information for a provisioned enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: \`userName\`, \`name\`, and \`emails\`.
 *
 * **Warning:** Setting \`active: false\` removes the user from the enterprise, deletes the external identity, and deletes the associated \`{scim_user_id}\`.
 */
export const setInformationForProvisionedEnterpriseUser: ApiHeroEndpoint<
  {
    enterprise: string;
    scimUserId: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The username for the user.
       */
      userName: string;

      name: {
        /**
         * The first name of the user.
         */
        givenName: string;

        /**
         * The last name of the user.
         */
        familyName: string;
      };

      /**
       * List of user emails.
       */
      emails: Array<{
        /**
         * The email address.
         */
        value: string;

        /**
         * The type of email address.
         */
        type: string;

        /**
         * Whether this email address is the primary address.
         */
        primary: boolean;
      }>;

      /**
       * List of SCIM group IDs the user is a member of.
       */
      groups?: Array<{
        value?: string;
      }>;
    };
  },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/set-information-for-provisioned-enterprise-user\\",
};

/**
 * Delete a SCIM user from an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const deleteUserFromEnterprise: ApiHeroEndpoint<
  { enterprise: string; scimUserId: string },
  void
> = {
  id: \\"enterprise-admin/delete-user-from-enterprise\\",
};

/**
 * Update an attribute for a SCIM enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific \`Operations\` JSON format that contains at least one of the \`add\`, \`remove\`, or \`replace\` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM \`path\` selectors that include filters are not supported. For example, a \`path\` selector defined as \`\\"path\\": \\"emails[type eq \\\\\\"work\\\\\\"]\\"\` will not work.
 *
 * **Warning:** If you set \`active:false\` using the \`replace\` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated \`:scim_user_id\`.
 *
 * \`\`\`
 * {
 * \\"Operations\\":[{
 * \\"op\\":\\"replace\\",
 * \\"value\\":{
 * \\"active\\":false
 * }
 * }]
 * }
 * \`\`\`
 */
export const updateAttributeForEnterpriseUser: ApiHeroEndpoint<
  {
    enterprise: string;
    scimUserId: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
       */
      Operations: Array<{}>;
    };
  },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/update-attribute-for-enterprise-user\\",
};
",
  "dependabot.ts" => "import {
  DependabotPublicKey,
  DependabotSecret,
  EmptyObject,
  MinimalRepository,
  OrganizationDependabotSecret,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List organization secrets
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const listOrgSecrets: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  {
    total_count: number;

    secrets: Array<OrganizationDependabotSecret>;
  }
> = {
  id: \\"dependabot/list-org-secrets\\",
};

/**
 * Get an organization public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const getOrgPublicKey: ApiHeroEndpoint<{ org: string }, DependabotPublicKey> = {
  id: \\"dependabot/get-org-public-key\\",
};

/**
 * Get an organization secret
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const getOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string },
  OrganizationDependabotSecret
> = {
  id: \\"dependabot/get-org-secret\\",
};

/**
 * Create or update an organization secret
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
       */
      encrypted_value?: string;

      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;

      /**
       * Which type of organization repositories have access to the organization secret. \`selected\` means only the repositories specified by \`selected_repository_ids\` can access the secret.
       */
      visibility: \\"all\\" | \\"private\\" | \\"selected\\";

      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids?: Array<string>;
    };
  },
  EmptyObject
> = {
  id: \\"dependabot/create-or-update-org-secret\\",
};

/**
 * Delete an organization secret
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const deleteOrgSecret: ApiHeroEndpoint<{ org: string; secretName: string }, void> = {
  id: \\"dependabot/delete-org-secret\\",
};

/**
 * List selected repositories for an organization secret
 * Lists all repositories that have been selected when the \`visibility\` for repository access to a secret is set to \`selected\`. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const listSelectedReposForOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"dependabot/list-selected-repos-for-org-secret\\",
};

/**
 * Set selected repositories for an organization secret
 * Replaces all repositories for an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const setSelectedReposForOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"dependabot/set-selected-repos-for-org-secret\\",
};

/**
 * Add selected repository to an organization secret
 * Adds a repository to an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const addSelectedRepoToOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; repositoryId: number },
  void
> = {
  id: \\"dependabot/add-selected-repo-to-org-secret\\",
};

/**
 * Remove selected repository from an organization secret
 * Removes a repository from an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const removeSelectedRepoFromOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; repositoryId: number },
  void
> = {
  id: \\"dependabot/remove-selected-repo-from-org-secret\\",
};

/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const listRepoSecrets: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    total_count: number;

    secrets: Array<DependabotSecret>;
  }
> = {
  id: \\"dependabot/list-repo-secrets\\",
};

/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const getRepoPublicKey: ApiHeroEndpoint<
  { owner: string; repo: string },
  DependabotPublicKey
> = {
  id: \\"dependabot/get-repo-public-key\\",
};

/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const getRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  DependabotSecret
> = {
  id: \\"dependabot/get-repo-secret\\",
};

/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateRepoSecret: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    secretName: string;
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.
       */
      encrypted_value?: string;

      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;
    };
  },
  EmptyObject
> = {
  id: \\"dependabot/create-or-update-repo-secret\\",
};

/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const deleteRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  void
> = {
  id: \\"dependabot/delete-repo-secret\\",
};
",
  "dependency-graph.ts" => "import { DependencyGraphDiff, Snapshot, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get a diff of the dependencies between commits
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
 */
export const diffRange: ApiHeroEndpoint<
  { owner: string; repo: string; basehead: string; name?: string },
  DependencyGraphDiff
> = {
  id: \\"dependency-graph/diff-range\\",
};

/**
 * Create a snapshot of dependencies for a repository
 * Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the \`repo\` scope to use this endpoint for a repository that the requesting user has access to.
 */
export const createRepositorySnapshot: ApiHeroEndpoint<
  { owner: string; repo: string; body: Snapshot },
  {
    /**
     * ID of the created snapshot.
     */
    id: number;

    /**
     * The time at which the snapshot was created.
     */
    created_at: string;

    /**
     * Either \\"SUCCESS\\", \\"ACCEPTED\\", or \\"INVALID\\". \\"SUCCESS\\" indicates that the snapshot was successfully created and the repository's dependencies were updated. \\"ACCEPTED\\" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. \\"INVALID\\" indicates that the snapshot was malformed.
     */
    result: string;

    /**
     * A message providing further details about the result, such as why the dependencies were not updated.
     */
    message: string;
  }
> = {
  id: \\"dependency-graph/create-repository-snapshot\\",
};
",
  "gists.ts" => "import { BaseGist, GistComment, GistCommit, GistSimple, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List gists for the authenticated user
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const list: ApiHeroEndpoint<
  { since?: string; perPage?: number; page?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list\\",
};

/**
 * Create a gist
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files \\"gistfile\\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const create: ApiHeroEndpoint<
  {
    body: {
      /**
       * Description of the gist
       */
      description?: string;

      /**
       * Names and content for the files that make up the gist
       */
      files: Record<
        string,
        {
          /**
           * Content of the file
           */
          content: string;
        }
      >;

      public?: boolean | \\"true\\" | \\"false\\";
    };
  },
  GistSimple
> = {
  id: \\"gists/create\\",
};

/**
 * List public gists
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const listPublic: ApiHeroEndpoint<
  { since?: string; perPage?: number; page?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list-public\\",
};

/**
 * List starred gists
 * List the authenticated user's starred gists:
 */
export const listStarred: ApiHeroEndpoint<
  { since?: string; perPage?: number; page?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list-starred\\",
};

/**
 * Get a gist
 */
export const getGists: ApiHeroEndpoint<{ gistId: string }, GistSimple> = {
  id: \\"gists/get\\",
};

/**
 * Delete a gist
 */
export const deleteGists: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/delete\\",
};

/**
 * Update a gist
 * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const update: ApiHeroEndpoint<
  {
    gistId: string;
    body: {
      /**
       * Description of the gist
       */
      description?: string;

      /**
       * Names of files to be updated
       */
      files?: Record<
        string,
        {
          /**
           * The new content of the file
           */
          content?: string;

          /**
           * The new filename for the file
           */
          filename?: string;
        }
      >;
    };
  },
  GistSimple
> = {
  id: \\"gists/update\\",
};

/**
 * List gist comments
 */
export const listComments: ApiHeroEndpoint<
  { gistId: string; perPage?: number; page?: number },
  Array<GistComment>
> = {
  id: \\"gists/list-comments\\",
};

/**
 * Create a gist comment
 */
export const createComment: ApiHeroEndpoint<
  {
    gistId: string;
    body: {
      /**
       * The comment text.
       */
      body: string;
    };
  },
  GistComment
> = {
  id: \\"gists/create-comment\\",
};

/**
 * Get a gist comment
 */
export const getComment: ApiHeroEndpoint<{ gistId: string; commentId: number }, GistComment> = {
  id: \\"gists/get-comment\\",
};

/**
 * Delete a gist comment
 */
export const deleteComment: ApiHeroEndpoint<{ gistId: string; commentId: number }, void> = {
  id: \\"gists/delete-comment\\",
};

/**
 * Update a gist comment
 */
export const updateComment: ApiHeroEndpoint<
  {
    gistId: string;
    commentId: number;
    body: {
      /**
       * The comment text.
       */
      body: string;
    };
  },
  GistComment
> = {
  id: \\"gists/update-comment\\",
};

/**
 * List gist commits
 */
export const listCommits: ApiHeroEndpoint<
  { gistId: string; perPage?: number; page?: number },
  Array<GistCommit>
> = {
  id: \\"gists/list-commits\\",
};

/**
 * List gist forks
 */
export const listForks: ApiHeroEndpoint<
  { gistId: string; perPage?: number; page?: number },
  Array<GistSimple>
> = {
  id: \\"gists/list-forks\\",
};

/**
 * Fork a gist
 * **Note**: This was previously \`/gists/:gist_id/fork\`.
 */
export const fork: ApiHeroEndpoint<{ gistId: string }, BaseGist> = {
  id: \\"gists/fork\\",
};

/**
 * Check if a gist is starred
 */
export const checkIsStarred: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/check-is-starred\\",
};

/**
 * Star a gist
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const star: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/star\\",
};

/**
 * Unstar a gist
 */
export const unstar: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/unstar\\",
};

/**
 * Get a gist revision
 */
export const getRevision: ApiHeroEndpoint<{ gistId: string; sha: string }, GistSimple> = {
  id: \\"gists/get-revision\\",
};

/**
 * List gists for a user
 * Lists public gists for the specified user:
 */
export const listForUser: ApiHeroEndpoint<
  { username: string; since?: string; perPage?: number; page?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list-for-user\\",
};
",
  "git.ts" => "import { Blob, GitCommit, GitRef, GitTag, GitTree, ShortBlob, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Create a blob
 */
export const createBlob: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The new blob's content.
       */
      content: string;

      /**
       * The encoding used for \`content\`. Currently, \`\\"utf-8\\"\` and \`\\"base64\\"\` are supported.
       */
      encoding?: string;
    };
  },
  ShortBlob
> = {
  id: \\"git/create-blob\\",
};

/**
 * Get a blob
 * The \`content\` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const getBlob: ApiHeroEndpoint<{ owner: string; repo: string; fileSha: string }, Blob> = {
  id: \\"git/get-blob\\",
};

/**
 * Create a commit
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const createCommit: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The commit message
       */
      message: string;

      /**
       * The SHA of the tree object this commit points to
       */
      tree: string;

      /**
       * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
       */
      parents?: Array<string>;

      /**
       * Information about the author of the commit. By default, the \`author\` will be the authenticated user and the current date. See the \`author\` and \`committer\` object below for details.
       */
      author?: {
        /**
         * The name of the author (or committer) of the commit
         */
        name: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email: string;

        /**
         * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
         */
        date?: string;
      };

      /**
       * Information about the person who is making the commit. By default, \`committer\` will use the information set in \`author\`. See the \`author\` and \`committer\` object below for details.
       */
      committer?: {
        /**
         * The name of the author (or committer) of the commit
         */
        name?: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email?: string;

        /**
         * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
         */
        date?: string;
      };

      /**
       * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the \`gpgsig\` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a \`signature\` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
       */
      signature?: string;
    };
  },
  GitCommit
> = {
  id: \\"git/create-commit\\",
};

/**
 * Get a commit
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string },
  GitCommit
> = {
  id: \\"git/get-commit\\",
};

/**
 * List matching references
 * Returns an array of references from your Git database that match the supplied name. The \`:ref\` in the URL must be formatted as \`heads/<branch name>\` for branches and \`tags/<tag name>\` for tags. If the \`:ref\` doesn't exist in the repository, but existing refs start with \`:ref\`, they will be returned as an array.
 *
 * When you use this endpoint without providing a \`:ref\`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just \`heads\` and \`tags\`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \\"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\\".
 *
 * If you request matching references for a branch named \`feature\` but the branch \`feature\` doesn't exist, the response can still include other matching head refs that start with the word \`feature\`, such as \`featureA\` and \`featureB\`.
 */
export const listMatchingRefs: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string; perPage?: number; page?: number },
  Array<GitRef>
> = {
  id: \\"git/list-matching-refs\\",
};

/**
 * Get a reference
 * Returns a single reference from your Git database. The \`:ref\` in the URL must be formatted as \`heads/<branch name>\` for branches and \`tags/<tag name>\` for tags. If the \`:ref\` doesn't match an existing ref, a \`404\` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \\"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\\".
 */
export const getRef: ApiHeroEndpoint<{ owner: string; repo: string; ref: string }, GitRef> = {
  id: \\"git/get-ref\\",
};

/**
 * Create a reference
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const createRef: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the fully qualified reference (ie: \`refs/heads/master\`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
       */
      ref: string;

      /**
       * The SHA1 value for this reference.
       */
      sha: string;

      key?: string;
    };
  },
  GitRef
> = {
  id: \\"git/create-ref\\",
};

/**
 * Delete a reference
 */
export const deleteRef: ApiHeroEndpoint<{ owner: string; repo: string; ref: string }, void> = {
  id: \\"git/delete-ref\\",
};

/**
 * Update a reference
 */
export const updateRef: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    ref: string;
    body: {
      /**
       * The SHA1 value to set this reference to
       */
      sha: string;

      /**
       * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to \`false\` will make sure you're not overwriting work.
       */
      force?: boolean;
    };
  },
  GitRef
> = {
  id: \\"git/update-ref\\",
};

/**
 * Create a tag object
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the \`refs/tags/[tag]\` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const createTag: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The tag's name. This is typically a version (e.g., \\"v0.0.1\\").
       */
      tag: string;

      /**
       * The tag message.
       */
      message: string;

      /**
       * The SHA of the git object this is tagging.
       */
      object: string;

      /**
       * The type of the object we're tagging. Normally this is a \`commit\` but it can also be a \`tree\` or a \`blob\`.
       */
      type: \\"commit\\" | \\"tree\\" | \\"blob\\";

      /**
       * An object with information about the individual creating the tag.
       */
      tagger?: {
        /**
         * The name of the author of the tag
         */
        name: string;

        /**
         * The email of the author of the tag
         */
        email: string;

        /**
         * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
         */
        date?: string;
      };
    };
  },
  GitTag
> = {
  id: \\"git/create-tag\\",
};

/**
 * Get a tag
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getTag: ApiHeroEndpoint<{ owner: string; repo: string; tagSha: string }, GitTag> = {
  id: \\"git/get-tag\\",
};

/**
 * Create a tree
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \\"[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)\\" and \\"[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference).\\"
 */
export const createTree: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Objects (of \`path\`, \`mode\`, \`type\`, and \`sha\`) specifying a tree structure.
       */
      tree: Array<{
        /**
         * The file referenced in the tree.
         */
        path?: string;

        /**
         * The file mode; one of \`100644\` for file (blob), \`100755\` for executable (blob), \`040000\` for subdirectory (tree), \`160000\` for submodule (commit), or \`120000\` for a blob that specifies the path of a symlink.
         */
        mode?: \\"100644\\" | \\"100755\\" | \\"040000\\" | \\"160000\\" | \\"120000\\";

        /**
         * Either \`blob\`, \`tree\`, or \`commit\`.
         */
        type?: \\"blob\\" | \\"tree\\" | \\"commit\\";

        /** 
* The SHA1 checksum ID of the object in the tree. Also called \`tree.sha\`. If the value is \`null\` then the file will be deleted.  
  
**Note:** Use either \`tree.sha\` or \`content\` to specify the contents of the entry. Using both \`tree.sha\` and \`content\` will return an error.
*/
        sha?: string;

        /** 
* The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or \`tree.sha\`.  
  
**Note:** Use either \`tree.sha\` or \`content\` to specify the contents of the entry. Using both \`tree.sha\` and \`content\` will return an error.
*/
        content?: string;
      }>;

      /** 
* The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by \`base_tree\` and entries defined in the \`tree\` parameter. Entries defined in the \`tree\` parameter will overwrite items from \`base_tree\` with the same \`path\`. If you're creating new changes on a branch, then normally you'd set \`base_tree\` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
If not provided, GitHub will create a new Git tree object from only the entries defined in the \`tree\` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the \`tree\` parameter will be listed as deleted by the new commit.

*/
      base_tree?: string;
    };
  },
  GitTree
> = {
  id: \\"git/create-tree\\",
};

/**
 * Get a tree
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If \`truncated\` is \`true\` in the response then the number of items in the \`tree\` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 */
export const getTree: ApiHeroEndpoint<
  { owner: string; repo: string; treeSha: string; recursive?: string },
  GitTree
> = {
  id: \\"git/get-tree\\",
};
",
  "gitignore.ts" => "import { GitignoreTemplate, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get all gitignore templates
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const getAllTemplates: ApiHeroEndpoint<never, Array<string>> = {
  id: \\"gitignore/get-all-templates\\",
};

/**
 * Get a gitignore template
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const getTemplate: ApiHeroEndpoint<{ name: string }, GitignoreTemplate> = {
  id: \\"gitignore/get-template\\",
};
",
  "interactions.ts" => "import { InteractionLimit, InteractionLimitResponse, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get interaction restrictions for an organization
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const getRestrictionsForOrg: ApiHeroEndpoint<{ org: string }, InteractionLimitResponse> = {
  id: \\"interactions/get-restrictions-for-org\\",
};

/**
 * Set interaction restrictions for an organization
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const setRestrictionsForOrg: ApiHeroEndpoint<
  { org: string; body: InteractionLimit },
  InteractionLimitResponse
> = {
  id: \\"interactions/set-restrictions-for-org\\",
};

/**
 * Remove interaction restrictions for an organization
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const removeRestrictionsForOrg: ApiHeroEndpoint<{ org: string }, void> = {
  id: \\"interactions/remove-restrictions-for-org\\",
};

/**
 * Get interaction restrictions for a repository
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const getRestrictionsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  InteractionLimitResponse
> = {
  id: \\"interactions/get-restrictions-for-repo\\",
};

/**
 * Set interaction restrictions for a repository
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a \`409 Conflict\` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const setRestrictionsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; body: InteractionLimit },
  InteractionLimitResponse
> = {
  id: \\"interactions/set-restrictions-for-repo\\",
};

/**
 * Remove interaction restrictions for a repository
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a \`409 Conflict\` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const removeRestrictionsForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"interactions/remove-restrictions-for-repo\\",
};

/**
 * Get interaction restrictions for your public repositories
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 */
export const getRestrictionsForAuthenticatedUser: ApiHeroEndpoint<never, InteractionLimitResponse> =
  {
    id: \\"interactions/get-restrictions-for-authenticated-user\\",
  };

/**
 * Set interaction restrictions for your public repositories
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const setRestrictionsForAuthenticatedUser: ApiHeroEndpoint<
  { body: InteractionLimit },
  InteractionLimitResponse
> = {
  id: \\"interactions/set-restrictions-for-authenticated-user\\",
};

/**
 * Remove interaction restrictions from your public repositories
 * Removes any interaction restrictions from your public repositories.
 */
export const removeRestrictionsForAuthenticatedUser: ApiHeroEndpoint<never, void> = {
  id: \\"interactions/remove-restrictions-for-authenticated-user\\",
};
",
  "issues.ts" => "import {
  Issue,
  IssueComment,
  IssueEvent,
  IssueEventForIssue,
  Label,
  Milestone,
  SimpleUser,
  TimelineIssueEvents,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List issues assigned to the authenticated user
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the \`filter\` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const list: ApiHeroEndpoint<
  {
    filter?: \\"assigned\\" | \\"created\\" | \\"mentioned\\" | \\"subscribed\\" | \\"repos\\" | \\"all\\";
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    labels?: string;
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    direction?: \\"asc\\" | \\"desc\\";
    since?: string;
    collab?: boolean;
    orgs?: boolean;
    owned?: boolean;
    pulls?: boolean;
    perPage?: number;
    page?: number;
  },
  Array<Issue>
> = {
  id: \\"issues/list\\",
};

/**
 * List organization issues assigned to the authenticated user
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const listForOrg: ApiHeroEndpoint<
  {
    org: string;
    filter?: \\"assigned\\" | \\"created\\" | \\"mentioned\\" | \\"subscribed\\" | \\"repos\\" | \\"all\\";
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    labels?: string;
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    direction?: \\"asc\\" | \\"desc\\";
    since?: string;
    perPage?: number;
    page?: number;
  },
  Array<Issue>
> = {
  id: \\"issues/list-for-org\\",
};

/**
 * List assignees
 * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const listAssignees: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"issues/list-assignees\\",
};

/**
 * Check if a user can be assigned
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the \`assignee\` can be assigned to issues in the repository, a \`204\` header with no content is returned.
 *
 * Otherwise a \`404\` status code is returned.
 */
export const checkUserCanBeAssigned: ApiHeroEndpoint<
  { owner: string; repo: string; assignee: string },
  void
> = {
  id: \\"issues/check-user-can-be-assigned\\",
};

/**
 * List repository issues
 * List issues in a repository.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const listForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    milestone?: string;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    assignee?: string;
    creator?: string;
    mentioned?: string;
    labels?: string;
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    direction?: \\"asc\\" | \\"desc\\";
    since?: string;
    perPage?: number;
    page?: number;
  },
  Array<Issue>
> = {
  id: \\"issues/list-for-repo\\",
};

/**
 * Create an issue
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a \`410 Gone\` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const create: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The title of the issue.
       */
      title: string | number;

      /**
       * The contents of the issue.
       */
      body?: string;

      /**
       * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
       */
      assignee?: string;

      milestone?: string | number;

      /**
       * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
       */
      labels?: Array<
        | string
        | {
            id?: number;

            name?: string;

            description?: string;

            color?: string;
          }
      >;

      /**
       * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
       */
      assignees?: Array<string>;
    };
  },
  Issue
> = {
  id: \\"issues/create\\",
};

/**
 * List issue comments for a repository
 * By default, Issue Comments are ordered by ascending ID.
 */
export const listCommentsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    since?: string;
    perPage?: number;
    page?: number;
  },
  Array<IssueComment>
> = {
  id: \\"issues/list-comments-for-repo\\",
};

/**
 * Get an issue comment
 */
export const getComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number },
  IssueComment
> = {
  id: \\"issues/get-comment\\",
};

/**
 * Delete an issue comment
 */
export const deleteComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number },
  void
> = {
  id: \\"issues/delete-comment\\",
};

/**
 * Update an issue comment
 */
export const updateComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    body: {
      /**
       * The contents of the comment.
       */
      body: string;
    };
  },
  IssueComment
> = {
  id: \\"issues/update-comment\\",
};

/**
 * List issue events for a repository
 */
export const listEventsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<IssueEvent>
> = {
  id: \\"issues/list-events-for-repo\\",
};

/**
 * Get an issue event
 */
export const getEvent: ApiHeroEndpoint<
  { owner: string; repo: string; eventId: number },
  IssueEvent
> = {
  id: \\"issues/get-event\\",
};

/**
 * Get an issue
 * The API returns a [\`301 Moved Permanently\` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a \`404 Not Found\` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a \`410 Gone\` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [\`issues\`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const getIssues: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number },
  Issue
> = {
  id: \\"issues/get\\",
};

/**
 * Update an issue
 * Issue owners and users with push access can edit an issue.
 */
export const update: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?: {
      /**
       * The title of the issue.
       */
      title?: string | number;

      /**
       * The contents of the issue.
       */
      body?: string;

      /**
       * Login for the user that this issue should be assigned to. **This field is deprecated.**
       */
      assignee?: string;

      /**
       * State of the issue. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      milestone?: string | number;

      /**
       * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (\`[]\`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
       */
      labels?: Array<
        | string
        | {
            id?: number;

            name?: string;

            description?: string;

            color?: string;
          }
      >;

      /**
       * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (\`[]\`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
       */
      assignees?: Array<string>;
    };
  },
  Issue
> = {
  id: \\"issues/update\\",
};

/**
 * Add assignees to an issue
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const addAssignees: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?: {
      /**
       * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
       */
      assignees?: Array<string>;
    };
  },
  Issue
> = {
  id: \\"issues/add-assignees\\",
};

/**
 * Remove assignees from an issue
 * Removes one or more assignees from an issue.
 */
export const removeAssignees: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?: {
      /**
       * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
       */
      assignees?: Array<string>;
    };
  },
  Issue
> = {
  id: \\"issues/remove-assignees\\",
};

/**
 * List issue comments
 * Issue Comments are ordered by ascending ID.
 */
export const listComments: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    since?: string;
    perPage?: number;
    page?: number;
  },
  Array<IssueComment>
> = {
  id: \\"issues/list-comments\\",
};

/**
 * Create an issue comment
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body: {
      /**
       * The contents of the comment.
       */
      body: string;
    };
  },
  IssueComment
> = {
  id: \\"issues/create-comment\\",
};

/**
 * List issue events
 */
export const listEvents: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; perPage?: number; page?: number },
  Array<IssueEventForIssue>
> = {
  id: \\"issues/list-events\\",
};

/**
 * List labels for an issue
 */
export const listLabelsOnIssue: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; perPage?: number; page?: number },
  Array<Label>
> = {
  id: \\"issues/list-labels-on-issue\\",
};

/**
 * Add labels to an issue
 */
export const addLabels: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?:
      | {
          /**
           * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a \`string\` or an \`array\` of labels directly, but GitHub recommends passing an object with the \`labels\` key. You can also replace all of the labels for an issue. For more information, see \\"[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue).\\"
           */
          labels?: Array<string>;
        }
      | Array<string>
      | {
          labels?: Array<{
            name: string;
          }>;
        }
      | string;
  },
  Array<Label>
> = {
  id: \\"issues/add-labels\\",
};

/**
 * Set labels for an issue
 * Removes any previous labels and sets the new labels for an issue.
 */
export const setLabels: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?:
      | {
          /**
           * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a \`string\` or an \`array\` of labels directly, but GitHub recommends passing an object with the \`labels\` key. You can also add labels to the existing labels for an issue. For more information, see \\"[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue).\\"
           */
          labels?: Array<string>;
        }
      | Array<string>
      | {
          labels?: Array<{
            name: string;
          }>;
        }
      | string;
  },
  Array<Label>
> = {
  id: \\"issues/set-labels\\",
};

/**
 * Remove all labels from an issue
 */
export const removeAllLabels: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number },
  void
> = {
  id: \\"issues/remove-all-labels\\",
};

/**
 * Remove a label from an issue
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a \`404 Not Found\` status if the label does not exist.
 */
export const removeLabel: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; name: string },
  Array<Label>
> = {
  id: \\"issues/remove-label\\",
};

/**
 * Lock an issue
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const lock: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?: {
      /** 
* The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
\\\\* \`off-topic\`  
\\\\* \`too heated\`  
\\\\* \`resolved\`  
\\\\* \`spam\`
*/
      lock_reason?: \\"off-topic\\" | \\"too heated\\" | \\"resolved\\" | \\"spam\\";
    } | null;
  },
  void
> = {
  id: \\"issues/lock\\",
};

/**
 * Unlock an issue
 * Users with push access can unlock an issue's conversation.
 */
export const unlock: ApiHeroEndpoint<{ owner: string; repo: string; issueNumber: number }, void> = {
  id: \\"issues/unlock\\",
};

/**
 * List timeline events for an issue
 */
export const listEventsForTimeline: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; perPage?: number; page?: number },
  Array<TimelineIssueEvents>
> = {
  id: \\"issues/list-events-for-timeline\\",
};

/**
 * List labels for a repository
 */
export const listLabelsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<Label>
> = {
  id: \\"issues/list-labels-for-repo\\",
};

/**
 * Create a label
 */
export const createLabel: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing \`:strawberry:\` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \\":strawberry:\\"). For a full list of available emoji and codes, see \\"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\\"
       */
      name: string;

      /**
       * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading \`#\`.
       */
      color?: string;

      /**
       * A short description of the label. Must be 100 characters or fewer.
       */
      description?: string;
    };
  },
  Label
> = {
  id: \\"issues/create-label\\",
};

/**
 * Get a label
 */
export const getLabel: ApiHeroEndpoint<{ owner: string; repo: string; name: string }, Label> = {
  id: \\"issues/get-label\\",
};

/**
 * Delete a label
 */
export const deleteLabel: ApiHeroEndpoint<{ owner: string; repo: string; name: string }, void> = {
  id: \\"issues/delete-label\\",
};

/**
 * Update a label
 */
export const updateLabel: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    name: string;
    body?: {
      /**
       * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing \`:strawberry:\` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \\":strawberry:\\"). For a full list of available emoji and codes, see \\"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\\"
       */
      new_name?: string;

      /**
       * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading \`#\`.
       */
      color?: string;

      /**
       * A short description of the label. Must be 100 characters or fewer.
       */
      description?: string;
    };
  },
  Label
> = {
  id: \\"issues/update-label\\",
};

/**
 * List milestones
 */
export const listMilestones: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    sort?: \\"due_on\\" | \\"completeness\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<Milestone>
> = {
  id: \\"issues/list-milestones\\",
};

/**
 * Create a milestone
 */
export const createMilestone: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The title of the milestone.
       */
      title: string;

      /**
       * The state of the milestone. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      /**
       * A description of the milestone.
       */
      description?: string;

      /**
       * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      due_on?: string;
    };
  },
  Milestone
> = {
  id: \\"issues/create-milestone\\",
};

/**
 * Get a milestone
 */
export const getMilestone: ApiHeroEndpoint<
  { owner: string; repo: string; milestoneNumber: number },
  Milestone
> = {
  id: \\"issues/get-milestone\\",
};

/**
 * Delete a milestone
 */
export const deleteMilestone: ApiHeroEndpoint<
  { owner: string; repo: string; milestoneNumber: number },
  void
> = {
  id: \\"issues/delete-milestone\\",
};

/**
 * Update a milestone
 */
export const updateMilestone: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    milestoneNumber: number;
    body?: {
      /**
       * The title of the milestone.
       */
      title?: string;

      /**
       * The state of the milestone. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      /**
       * A description of the milestone.
       */
      description?: string;

      /**
       * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      due_on?: string;
    };
  },
  Milestone
> = {
  id: \\"issues/update-milestone\\",
};

/**
 * List labels for issues in a milestone
 */
export const listLabelsForMilestone: ApiHeroEndpoint<
  { owner: string; repo: string; milestoneNumber: number; perPage?: number; page?: number },
  Array<Label>
> = {
  id: \\"issues/list-labels-for-milestone\\",
};

/**
 * List user account issues assigned to the authenticated user
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  {
    filter?: \\"assigned\\" | \\"created\\" | \\"mentioned\\" | \\"subscribed\\" | \\"repos\\" | \\"all\\";
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    labels?: string;
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    direction?: \\"asc\\" | \\"desc\\";
    since?: string;
    perPage?: number;
    page?: number;
  },
  Array<Issue>
> = {
  id: \\"issues/list-for-authenticated-user\\",
};
",
  "licenses.ts" => "import { License, LicenseContent, LicenseSimple, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get all commonly used licenses
 */
export const getAllCommonlyUsed: ApiHeroEndpoint<
  { featured?: boolean; perPage?: number; page?: number },
  Array<LicenseSimple>
> = {
  id: \\"licenses/get-all-commonly-used\\",
};

/**
 * Get a license
 */
export const getLicenses: ApiHeroEndpoint<{ license: string }, License> = {
  id: \\"licenses/get\\",
};

/**
 * Get the license for a repository
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const getForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, LicenseContent> = {
  id: \\"licenses/get-for-repo\\",
};
",
  "markdown.ts" => "/**
 * Render a Markdown document
 */
export const render: ApiHeroEndpoint<
  {
    body: {
      /**
       * The Markdown text to render in HTML.
       */
      text: string;

      /**
       * The rendering mode. Can be either \`markdown\` or \`gfm\`.
       */
      mode?: \\"markdown\\" | \\"gfm\\";

      /**
       * The repository context to use when creating references in \`gfm\` mode.  For example, setting \`context\` to \`octo-org/octo-repo\` will change the text \`#42\` into an HTML link to issue 42 in the \`octo-org/octo-repo\` repository.
       */
      context?: string;
    };
  },
  string
> = {
  id: \\"markdown/render\\",
};

/**
 * Render a Markdown document in raw mode
 * You must send Markdown as plain text (using a \`Content-Type\` header of \`text/plain\` or \`text/x-markdown\`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const renderRaw: ApiHeroEndpoint<{ body?: string }, string> = {
  id: \\"markdown/render-raw\\",
};
",
  "meta.ts" => "import { ApiOverview, Root, ApiHeroEndpoint } from \\"./@types\\";

/**
 * GitHub API Root
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const root: ApiHeroEndpoint<never, Root> = {
  id: \\"meta/root\\",
};

/**
 * Get GitHub meta information
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \\"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\\"
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const getMeta: ApiHeroEndpoint<never, ApiOverview> = {
  id: \\"meta/get\\",
};

/**
 * Get Octocat
 * Get the octocat as ASCII art
 */
export const getOctocat: ApiHeroEndpoint<{ s?: string }, string> = {
  id: \\"meta/get-octocat\\",
};

/**
 * Get the Zen of GitHub
 * Get a random sentence from the Zen of GitHub
 */
export const getZen: ApiHeroEndpoint<never, string> = {
  id: \\"meta/get-zen\\",
};
",
  "migrations.ts" => "import {
  Import,
  Migration,
  MinimalRepository,
  PorterAuthor,
  PorterLargeFile,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List organization migrations
 * Lists the most recent migrations.
 */
export const listForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number; exclude?: Array<\\"repositories\\"> },
  Array<Migration>
> = {
  id: \\"migrations/list-for-org\\",
};

/**
 * Start an organization migration
 * Initiates the generation of a migration archive.
 */
export const startForOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * A list of arrays indicating which repositories should be migrated.
       */
      repositories: Array<string>;

      /**
       * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
       */
      lock_repositories?: boolean;

      /**
       * Indicates whether metadata should be excluded and only git source should be included for the migration.
       */
      exclude_metadata?: boolean;

      /**
       * Indicates whether the repository git data should be excluded from the migration.
       */
      exclude_git_data?: boolean;

      /**
       * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
       */
      exclude_attachments?: boolean;

      /**
       * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
       */
      exclude_releases?: boolean;

      /**
       * Indicates whether projects owned by the organization or users should be excluded. from the migration.
       */
      exclude_owner_projects?: boolean;

      /**
       * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
       */
      org_metadata_only?: boolean;

      /**
       * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: \`\\"repositories\\"\`.
       */
      exclude?: Array<\\"repositories\\">;
    };
  },
  Migration
> = {
  id: \\"migrations/start-for-org\\",
};

/**
 * Get an organization migration status
 * Fetches the status of a migration.
 *
 * The \`state\` of a migration can be one of the following values:
 *
 * *   \`pending\`, which means the migration hasn't started yet.
 * *   \`exporting\`, which means the migration is in progress.
 * *   \`exported\`, which means the migration finished successfully.
 * *   \`failed\`, which means the migration failed.
 */
export const getStatusForOrg: ApiHeroEndpoint<
  { org: string; migrationId: number; exclude?: Array<\\"repositories\\"> },
  Migration
> = {
  id: \\"migrations/get-status-for-org\\",
};

/**
 * Download an organization migration archive
 * Fetches the URL to a migration archive.
 */
export const downloadArchiveForOrg: ApiHeroEndpoint<{ org: string; migrationId: number }, void> = {
  id: \\"migrations/download-archive-for-org\\",
};

/**
 * Delete an organization migration archive
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const deleteArchiveForOrg: ApiHeroEndpoint<{ org: string; migrationId: number }, void> = {
  id: \\"migrations/delete-archive-for-org\\",
};

/**
 * Unlock an organization repository
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const unlockRepoForOrg: ApiHeroEndpoint<
  { org: string; migrationId: number; repoName: string },
  void
> = {
  id: \\"migrations/unlock-repo-for-org\\",
};

/**
 * List repositories in an organization migration
 * List all the repositories for this organization migration.
 */
export const listReposForOrg: ApiHeroEndpoint<
  { org: string; migrationId: number; perPage?: number; page?: number },
  Array<MinimalRepository>
> = {
  id: \\"migrations/list-repos-for-org\\",
};

/**
 * Get an import status
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the \`status\` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   \`detecting\` - the \\"detection\\" step of the import is in progress because the request did not include a \`vcs\` parameter. The import is identifying the type of source control present at the URL.
 * *   \`importing\` - the \\"raw\\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include \`commit_count\` (the total number of raw commits that will be imported) and \`percent\` (0 - 100, the current progress through the import).
 * *   \`mapping\` - the \\"rewrite\\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   \`pushing\` - the \\"push\\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include \`push_percent\`, which is the percent value reported by \`git push\` when it is \\"Writing objects\\".
 * *   \`complete\` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the \`status\` field:
 *
 * *   \`auth_failed\` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   \`error\` - the import encountered an error. The import progress response will include the \`failed_step\` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
 * *   \`detection_needs_auth\` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   \`detection_found_nothing\` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
 * *   \`detection_found_multiple\` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a \`project_choices\` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a \`project_choices\` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   \`use_lfs\` - describes whether the import has been opted in or out of using Git LFS. The value can be \`opt_in\`, \`opt_out\`, or \`undecided\` if no action has been taken.
 * *   \`has_large_files\` - the boolean value describing whether files larger than 100MB were found during the \`importing\` step.
 * *   \`large_files_size\` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   \`large_files_count\` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \\"Get Large Files\\" request.
 */
export const getImportStatus: ApiHeroEndpoint<{ owner: string; repo: string }, Import> = {
  id: \\"migrations/get-import-status\\",
};

/**
 * Start an import
 * Start a source import to a GitHub repository using GitHub Importer.
 */
export const startImport: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The URL of the originating repository.
       */
      vcs_url: string;

      /**
       * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
       */
      vcs?: \\"subversion\\" | \\"git\\" | \\"mercurial\\" | \\"tfvc\\";

      /**
       * If authentication is required, the username to provide to \`vcs_url\`.
       */
      vcs_username?: string;

      /**
       * If authentication is required, the password to provide to \`vcs_url\`.
       */
      vcs_password?: string;

      /**
       * For a tfvc import, the name of the project that is being imported.
       */
      tfvc_project?: string;
    };
  },
  Import
> = {
  id: \\"migrations/start-import\\",
};

/**
 * Cancel an import
 * Stop an import for a repository.
 */
export const cancelImport: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"migrations/cancel-import\\",
};

/**
 * Update an import
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 *
 * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
 * have the status \`detection_found_multiple\` and the Import Progress response will include a \`project_choices\` array.
 * You can select the project to import by providing one of the objects in the \`project_choices\` array in the update request.
 */
export const updateImport: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * The username to provide to the originating repository.
       */
      vcs_username?: string;

      /**
       * The password to provide to the originating repository.
       */
      vcs_password?: string;

      /**
       * The type of version control system you are migrating from.
       */
      vcs?: \\"subversion\\" | \\"tfvc\\" | \\"git\\" | \\"mercurial\\";

      /**
       * For a tfvc import, the name of the project that is being imported.
       */
      tfvc_project?: string;
    } | null;
  },
  Import
> = {
  id: \\"migrations/update-import\\",
};

/**
 * Get commit authors
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username \`hubot\` into something like \`hubot <hubot@12341234-abab-fefe-8787-fedcba987654>\`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const getCommitAuthors: ApiHeroEndpoint<
  { owner: string; repo: string; since?: number },
  Array<PorterAuthor>
> = {
  id: \\"migrations/get-commit-authors\\",
};

/**
 * Map a commit author
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const mapCommitAuthor: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    authorId: number;
    body?: {
      /**
       * The new Git author email.
       */
      email?: string;

      /**
       * The new Git author name.
       */
      name?: string;
    };
  },
  PorterAuthor
> = {
  id: \\"migrations/map-commit-author\\",
};

/**
 * Get large files
 * List files larger than 100MB found during the import
 */
export const getLargeFiles: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<PorterLargeFile>
> = {
  id: \\"migrations/get-large-files\\",
};

/**
 * Update Git LFS preference
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/articles/versioning-large-files/).
 */
export const setLfsPreference: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Whether to store large files during the import. \`opt_in\` means large files will be stored using Git LFS. \`opt_out\` means large files will be removed during the import.
       */
      use_lfs: \\"opt_in\\" | \\"opt_out\\";
    };
  },
  Import
> = {
  id: \\"migrations/set-lfs-preference\\",
};

/**
 * List user migrations
 * Lists all migrations a user has started.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<Migration>
> = {
  id: \\"migrations/list-for-authenticated-user\\",
};

/**
 * Start a user migration
 * Initiates the generation of a user migration archive.
 */
export const startForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * Lock the repositories being migrated at the start of the migration
       */
      lock_repositories?: boolean;

      /**
       * Indicates whether metadata should be excluded and only git source should be included for the migration.
       */
      exclude_metadata?: boolean;

      /**
       * Indicates whether the repository git data should be excluded from the migration.
       */
      exclude_git_data?: boolean;

      /**
       * Do not include attachments in the migration
       */
      exclude_attachments?: boolean;

      /**
       * Do not include releases in the migration
       */
      exclude_releases?: boolean;

      /**
       * Indicates whether projects owned by the organization or users should be excluded.
       */
      exclude_owner_projects?: boolean;

      /**
       * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
       */
      org_metadata_only?: boolean;

      /**
       * Exclude attributes from the API response to improve performance
       */
      exclude?: Array<\\"repositories\\">;

      repositories: Array<string>;
    };
  },
  Migration
> = {
  id: \\"migrations/start-for-authenticated-user\\",
};

/**
 * Get a user migration status
 * Fetches a single user migration. The response includes the \`state\` of the migration, which can be one of the following values:
 *
 * *   \`pending\` - the migration hasn't started yet.
 * *   \`exporting\` - the migration is in progress.
 * *   \`exported\` - the migration finished successfully.
 * *   \`failed\` - the migration failed.
 *
 * Once the migration has been \`exported\` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
 */
export const getStatusForAuthenticatedUser: ApiHeroEndpoint<
  { migrationId: number; exclude?: Array<string> },
  Migration
> = {
  id: \\"migrations/get-status-for-authenticated-user\\",
};

/**
 * Download a user migration archive
 * Fetches the URL to download the migration archive as a \`tar.gz\` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\\\\_comments
 * *   issue\\\\_comments
 * *   issue\\\\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\\\\_branches
 * *   pull\\\\_request\\\\_reviews
 * *   pull\\\\_requests
 * *   releases
 * *   repositories
 * *   review\\\\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an \`attachments\` directory that includes all attachment files uploaded to GitHub.com and a \`repositories\` directory that contains the repository's Git data.
 */
export const getArchiveForAuthenticatedUser: ApiHeroEndpoint<{ migrationId: number }, void> = {
  id: \\"migrations/get-archive-for-authenticated-user\\",
};

/**
 * Delete a user migration archive
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const deleteArchiveForAuthenticatedUser: ApiHeroEndpoint<{ migrationId: number }, void> = {
  id: \\"migrations/delete-archive-for-authenticated-user\\",
};

/**
 * Unlock a user repository
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of \`404 Not Found\` if the repository is not locked.
 */
export const unlockRepoForAuthenticatedUser: ApiHeroEndpoint<
  { migrationId: number; repoName: string },
  void
> = {
  id: \\"migrations/unlock-repo-for-authenticated-user\\",
};

/**
 * List repositories for a user migration
 * Lists all the repositories for this user migration.
 */
export const listReposForAuthenticatedUser: ApiHeroEndpoint<
  { migrationId: number; perPage?: number; page?: number },
  Array<MinimalRepository>
> = {
  id: \\"migrations/list-repos-for-authenticated-user\\",
};
",
  "oauth-authorizations.ts" => "import { ApplicationGrant, Authorization, ApiHeroEndpoint } from \\"./@types\\";

/** * @deprecated
 * List your grants
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The \`scopes\` returned are the union of scopes authorized for the application. For example, if an application has one token with \`repo\` scope and another token with \`user\` scope, the grant will return \`[\\"repo\\", \\"user\\"]\`.
 */
export const listGrants: ApiHeroEndpoint<
  { perPage?: number; page?: number; clientId?: string },
  Array<ApplicationGrant>
> = {
  id: \\"oauth-authorizations/list-grants\\",
};

/** * @deprecated
 * Get a single grant
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const getGrant: ApiHeroEndpoint<{ grantId: number }, ApplicationGrant> = {
  id: \\"oauth-authorizations/get-grant\\",
};

/** * @deprecated
 * Delete a grant
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const deleteGrant: ApiHeroEndpoint<{ grantId: number }, void> = {
  id: \\"oauth-authorizations/delete-grant\\",
};

/** * @deprecated
 * List your authorizations
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const listAuthorizations: ApiHeroEndpoint<
  { perPage?: number; page?: number; clientId?: string },
  Array<Authorization>
> = {
  id: \\"oauth-authorizations/list-authorizations\\",
};

/** * @deprecated
 * Create a new authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 *
 * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use \`fingerprint\` to differentiate between them.
 *
 * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).
 *
 * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
 */
export const createAuthorization: ApiHeroEndpoint<
  {
    body?: {
      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: Array<string>;

      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;

      /**
       * The OAuth app client key for which to create the token.
       */
      client_id?: string;

      /**
       * The OAuth app client secret for which to create the token.
       */
      client_secret?: string;

      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       */
      fingerprint?: string;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/create-authorization\\",
};

/** * @deprecated
 * Get-or-create an authorization for a specific app
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 *
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const getOrCreateAuthorizationForApp: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The OAuth app client secret for which to create the token.
       */
      client_secret: string;

      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: Array<string>;

      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;

      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       */
      fingerprint?: string;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/get-or-create-authorization-for-app\\",
};

/** * @deprecated
 * Get-or-create an authorization for a specific app and fingerprint
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. \`fingerprint\` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 */
export const getOrCreateAuthorizationForAppAndFingerprint: ApiHeroEndpoint<
  {
    clientId: string;
    fingerprint: string;
    body: {
      /**
       * The OAuth app client secret for which to create the token.
       */
      client_secret: string;

      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: Array<string>;

      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\\",
};

/** * @deprecated
 * Get a single authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const getAuthorization: ApiHeroEndpoint<{ authorizationId: number }, Authorization> = {
  id: \\"oauth-authorizations/get-authorization\\",
};

/** * @deprecated
 * Delete an authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const deleteAuthorization: ApiHeroEndpoint<{ authorizationId: number }, void> = {
  id: \\"oauth-authorizations/delete-authorization\\",
};

/** * @deprecated
 * Update an existing authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 *
 * You can only send one of these scope keys at a time.
 */
export const updateAuthorization: ApiHeroEndpoint<
  {
    authorizationId: number;
    body?: {
      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: Array<string>;

      /**
       * A list of scopes to add to this authorization.
       */
      add_scopes?: Array<string>;

      /**
       * A list of scopes to remove from this authorization.
       */
      remove_scopes?: Array<string>;

      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;

      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       */
      fingerprint?: string;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/update-authorization\\",
};
",
  "oidc.ts" => "import { EmptyObject, OidcCustomSub, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get the customization template for an OIDC subject claim for an organization
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the \`read:org\` scope to use this endpoint.
 * GitHub Apps must have the \`organization_administration:write\` permission to use this endpoint.
 */
export const getOidcCustomSubTemplateForOrg: ApiHeroEndpoint<{ org: string }, OidcCustomSub> = {
  id: \\"oidc/get-oidc-custom-sub-template-for-org\\",
};

/**
 * Set the customization template for an OIDC subject claim for an organization
 * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the \`write:org\` scope to use this endpoint.
 * GitHub Apps must have the \`admin:org\` permission to use this endpoint.
 */
export const updateOidcCustomSubTemplateForOrg: ApiHeroEndpoint<
  { org: string; body: OidcCustomSub },
  EmptyObject
> = {
  id: \\"oidc/update-oidc-custom-sub-template-for-org\\",
};
",
  "orgs.ts" => "import {
  AuditLogEvent,
  CredentialAuthorization,
  HookDelivery,
  HookDeliveryItem,
  Installation,
  OrganizationCustomRepositoryRole,
  OrganizationFull,
  OrganizationInvitation,
  OrganizationSimple,
  OrgHook,
  OrgMembership,
  SimpleUser,
  Team,
  WebhookConfig,
  WebhookConfigContentType,
  WebhookConfigInsecureSsl,
  WebhookConfigSecret,
  WebhookConfigUrl,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List organizations
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const list: ApiHeroEndpoint<
  { since?: number; perPage?: number },
  Array<OrganizationSimple>
> = {
  id: \\"orgs/list\\",
};

/**
 * List custom repository roles in an organization
 * List the custom repository roles available in this organization. In order to see custom
 * repository roles in an organization, the authenticated user must be an organization owner.
 *
 * For more information on custom repository roles, see \\"[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)\\".
 */
export const listCustomRoles: ApiHeroEndpoint<
  { organizationId: string },
  {
    /**
     * The number of custom roles in this organization
     */
    total_count?: number;

    custom_roles?: Array<OrganizationCustomRepositoryRole>;
  }
> = {
  id: \\"orgs/list-custom-roles\\",
};

/**
 * Get an organization
 * To see many of the organization response values, you need to be an authenticated organization owner with the \`admin:org\` scope. When the value of \`two_factor_requirement_enabled\` is \`true\`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the \`Organization plan\` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \\"[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\\" for details. For an example response, see 'Response with GitHub plan information' below.\\"
 */
export const getOrgs: ApiHeroEndpoint<{ org: string }, OrganizationFull> = {
  id: \\"orgs/get\\",
};

/**
 * Update an organization
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue \`members_allowed_repository_creation_type\` in favor of more granular permissions. The new input parameters are \`members_can_create_public_repositories\`, \`members_can_create_private_repositories\` for all organizations and \`members_can_create_internal_repositories\` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the \`admin:org\` scope to update the organization's profile and member privileges.
 */
export const update: ApiHeroEndpoint<
  {
    org: string;
    body?: {
      /**
       * Billing email address. This address is not publicized.
       */
      billing_email?: string;

      /**
       * The company name.
       */
      company?: string;

      /**
       * The publicly visible email address.
       */
      email?: string;

      /**
       * The Twitter username of the company.
       */
      twitter_username?: string;

      /**
       * The location.
       */
      location?: string;

      /**
       * The shorthand name of the company.
       */
      name?: string;

      /**
       * The description of the company.
       */
      description?: string;

      /**
       * Whether an organization can use organization projects.
       */
      has_organization_projects?: boolean;

      /**
       * Whether repositories that belong to the organization can use repository projects.
       */
      has_repository_projects?: boolean;

      /**
       * Default permission level members have for organization repositories.
       */
      default_repository_permission?: \\"read\\" | \\"write\\" | \\"admin\\" | \\"none\\";

      /**
       * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See \`members_allowed_repository_creation_type\` in this table for details.
       */
      members_can_create_repositories?: boolean;

      /**
       * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \\"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\\" in the GitHub Help documentation.
       */
      members_can_create_internal_repositories?: boolean;

      /**
       * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \\"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\\" in the GitHub Help documentation.
       */
      members_can_create_private_repositories?: boolean;

      /**
       * Whether organization members can create public repositories, which are visible to anyone. For more information, see \\"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\\" in the GitHub Help documentation.
       */
      members_can_create_public_repositories?: boolean;

      /**
       * Specifies which types of repositories non-admin organization members can create. \`private\` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
       **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in \`members_can_create_repositories\`. See the parameter deprecation notice in the operation description for details.
       */
      members_allowed_repository_creation_type?: \\"all\\" | \\"private\\" | \\"none\\";

      /**
       * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
       */
      members_can_create_pages?: boolean;

      /**
       * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
       */
      members_can_create_public_pages?: boolean;

      /**
       * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
       */
      members_can_create_private_pages?: boolean;

      /**
       * Whether organization members can fork private organization repositories.
       */
      members_can_fork_private_repositories?: boolean;

      blog?: string;
    };
  },
  OrganizationFull
> = {
  id: \\"orgs/update\\",
};

/**
 * Get the audit log for an organization
 * Gets the audit log for an organization. For more information, see \\"[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\\"
 *
 * This endpoint is available for organizations on GitHub Enterprise Cloud. To use this endpoint, you must be an organization owner, and you must use an access token with the \`admin:org\` scope. GitHub Apps must have the \`organization_administration\` read permission to use this endpoint.
 *
 * By default, the response includes up to 30 events from the past three months. Use the \`phrase\` parameter to filter results and retrieve older events. For example, use the \`phrase\` parameter with the \`created\` qualifier to filter events based on when the events occurred. For more information, see \\"[Reviewing the audit log for your organization](https://docs.github.com/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).\\"
 *
 * Use pagination to retrieve fewer or more than 30 events. For more information, see \\"[Resources in the REST API](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\\"
 */
export const getAuditLog: ApiHeroEndpoint<
  {
    org: string;
    phrase?: string;
    include?: \\"web\\" | \\"git\\" | \\"all\\";
    after?: string;
    before?: string;
    order?: \\"desc\\" | \\"asc\\";
    perPage?: number;
  },
  Array<AuditLogEvent>
> = {
  id: \\"orgs/get-audit-log\\",
};

/**
 * List users blocked by an organization
 * List the users blocked by an organization.
 */
export const listBlockedUsers: ApiHeroEndpoint<{ org: string }, Array<SimpleUser>> = {
  id: \\"orgs/list-blocked-users\\",
};

/**
 * Check if a user is blocked by an organization
 */
export const checkBlockedUser: ApiHeroEndpoint<{ org: string; username: string }, void> = {
  id: \\"orgs/check-blocked-user\\",
};

/**
 * Block a user from an organization
 */
export const blockUser: ApiHeroEndpoint<{ org: string; username: string }, void> = {
  id: \\"orgs/block-user\\",
};

/**
 * Unblock a user from an organization
 */
export const unblockUser: ApiHeroEndpoint<{ org: string; username: string }, void> = {
  id: \\"orgs/unblock-user\\",
};

/**
 * List SAML SSO authorizations for an organization
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the \`read:org\` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://docs.github.com/en/articles/about-authentication-with-saml-single-sign-on).
 */
export const listSamlSsoAuthorizations: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number; login?: string },
  Array<CredentialAuthorization>
> = {
  id: \\"orgs/list-saml-sso-authorizations\\",
};

/**
 * Remove a SAML SSO authorization for an organization
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the \`admin:org\` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
 */
export const removeSamlSsoAuthorization: ApiHeroEndpoint<
  { org: string; credentialId: number },
  void
> = {
  id: \\"orgs/remove-saml-sso-authorization\\",
};

/**
 * List failed organization invitations
 * The return hash contains \`failed_at\` and \`failed_reason\` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const listFailedInvitations: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"orgs/list-failed-invitations\\",
};

/**
 * List organization webhooks
 */
export const listWebhooks: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  Array<OrgHook>
> = {
  id: \\"orgs/list-webhooks\\",
};

/**
 * Create an organization webhook
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const createWebhook: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * Must be passed as \\"web\\".
       */
      name: string;

      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
       */
      config: {
        url: WebhookConfigUrl;

        content_type?: WebhookConfigContentType;

        secret?: WebhookConfigSecret;

        insecure_ssl?: WebhookConfigInsecureSsl;

        username?: string;

        password?: string;
      };

      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       */
      events?: Array<string>;

      /**
       * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
       */
      active?: boolean;
    };
  },
  OrgHook
> = {
  id: \\"orgs/create-webhook\\",
};

/**
 * Get an organization webhook
 * Returns a webhook configured in an organization. To get only the webhook \`config\` properties, see \\"[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\\"
 */
export const getWebhook: ApiHeroEndpoint<{ org: string; hookId: number }, OrgHook> = {
  id: \\"orgs/get-webhook\\",
};

/**
 * Delete an organization webhook
 */
export const deleteWebhook: ApiHeroEndpoint<{ org: string; hookId: number }, void> = {
  id: \\"orgs/delete-webhook\\",
};

/**
 * Update an organization webhook
 * Updates a webhook configured in an organization. When you update a webhook, the \`secret\` will be overwritten. If you previously had a \`secret\` set, you must provide the same \`secret\` or set a new \`secret\` or the secret will be removed. If you are only updating individual webhook \`config\` properties, use \\"[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\\"
 */
export const updateWebhook: ApiHeroEndpoint<
  {
    org: string;
    hookId: number;
    body?: {
      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
       */
      config?: {
        url: WebhookConfigUrl;

        content_type?: WebhookConfigContentType;

        secret?: WebhookConfigSecret;

        insecure_ssl?: WebhookConfigInsecureSsl;
      };

      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       */
      events?: Array<string>;

      /**
       * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
       */
      active?: boolean;

      name?: string;
    };
  },
  OrgHook
> = {
  id: \\"orgs/update-webhook\\",
};

/**
 * Get a webhook configuration for an organization
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the \`active\` state and \`events\`, use \\"[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\\"
 *
 * Access tokens must have the \`admin:org_hook\` scope, and GitHub Apps must have the \`organization_hooks:read\` permission.
 */
export const getWebhookConfigForOrg: ApiHeroEndpoint<
  { org: string; hookId: number },
  WebhookConfig
> = {
  id: \\"orgs/get-webhook-config-for-org\\",
};

/**
 * Update a webhook configuration for an organization
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the \`active\` state and \`events\`, use \\"[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\\"
 *
 * Access tokens must have the \`admin:org_hook\` scope, and GitHub Apps must have the \`organization_hooks:write\` permission.
 */
export const updateWebhookConfigForOrg: ApiHeroEndpoint<
  {
    org: string;
    hookId: number;
    body?: {
      url?: WebhookConfigUrl;

      content_type?: WebhookConfigContentType;

      secret?: WebhookConfigSecret;

      insecure_ssl?: WebhookConfigInsecureSsl;
    };
  },
  WebhookConfig
> = {
  id: \\"orgs/update-webhook-config-for-org\\",
};

/**
 * List deliveries for an organization webhook
 * Returns a list of webhook deliveries for a webhook configured in an organization.
 */
export const listWebhookDeliveries: ApiHeroEndpoint<
  { org: string; hookId: number; perPage?: number; cursor?: string },
  Array<HookDeliveryItem>
> = {
  id: \\"orgs/list-webhook-deliveries\\",
};

/**
 * Get a webhook delivery for an organization webhook
 * Returns a delivery for a webhook configured in an organization.
 */
export const getWebhookDelivery: ApiHeroEndpoint<
  { org: string; hookId: number; deliveryId: number },
  HookDelivery
> = {
  id: \\"orgs/get-webhook-delivery\\",
};

/**
 * Redeliver a delivery for an organization webhook
 * Redeliver a delivery for a webhook configured in an organization.
 */
export const redeliverWebhookDelivery: ApiHeroEndpoint<
  { org: string; hookId: number; deliveryId: number },
  {}
> = {
  id: \\"orgs/redeliver-webhook-delivery\\",
};

/**
 * Ping an organization webhook
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const pingWebhook: ApiHeroEndpoint<{ org: string; hookId: number }, void> = {
  id: \\"orgs/ping-webhook\\",
};

/**
 * List app installations for an organization
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with \`admin:read\` scope to use this endpoint.
 */
export const listAppInstallations: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  {
    total_count: number;

    installations: Array<Installation>;
  }
> = {
  id: \\"orgs/list-app-installations\\",
};

/**
 * List pending organization invitations
 * The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
 */
export const listPendingInvitations: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"orgs/list-pending-invitations\\",
};

/**
 * Create an organization invitation
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createInvitation: ApiHeroEndpoint<
  {
    org: string;
    body?: {
      /**
       * **Required unless you provide \`email\`**. GitHub user ID for the person you are inviting.
       */
      invitee_id?: number;

      /**
       * **Required unless you provide \`invitee_id\`**. Email address of the person you are inviting, which can be an existing GitHub user.
       */
      email?: string;

      /** 
* The role for the new member. 
\\\\* \`admin\` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
\\\\* \`direct_member\` - Non-owner organization members with ability to see other members and join teams by invitation.  
\\\\* \`billing_manager\` - Non-owner organization members with ability to manage the billing settings of your organization.
*/
      role?: \\"admin\\" | \\"direct_member\\" | \\"billing_manager\\";

      /**
       * Specify IDs for the teams you want to invite new members to.
       */
      team_ids?: Array<number>;
    };
  },
  OrganizationInvitation
> = {
  id: \\"orgs/create-invitation\\",
};

/**
 * Cancel an organization invitation
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const cancelInvitation: ApiHeroEndpoint<{ org: string; invitationId: number }, void> = {
  id: \\"orgs/cancel-invitation\\",
};

/**
 * List organization invitation teams
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const listInvitationTeams: ApiHeroEndpoint<
  { org: string; invitationId: number; perPage?: number; page?: number },
  Array<Team>
> = {
  id: \\"orgs/list-invitation-teams\\",
};

/**
 * List organization members
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const listMembers: ApiHeroEndpoint<
  {
    org: string;
    filter?: \\"2fa_disabled\\" | \\"all\\";
    role?: \\"all\\" | \\"admin\\" | \\"member\\";
    perPage?: number;
    page?: number;
  },
  Array<SimpleUser>
> = {
  id: \\"orgs/list-members\\",
};

/**
 * Check organization membership for a user
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const checkMembershipForUser: ApiHeroEndpoint<{ org: string; username: string }, void> = {
  id: \\"orgs/check-membership-for-user\\",
};

/**
 * Remove an organization member
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const removeMember: ApiHeroEndpoint<{ org: string; username: string }, void> = {
  id: \\"orgs/remove-member\\",
};

/**
 * Get organization membership for a user
 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The \`state\` parameter in the response can be used to identify the user's membership status.
 */
export const getMembershipForUser: ApiHeroEndpoint<
  { org: string; username: string },
  OrgMembership
> = {
  id: \\"orgs/get-membership-for-user\\",
};

/**
 * Set organization membership for a user
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be \`pending\` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the \`role\` parameter. If the authenticated user changes a member's role to \`admin\`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to \`member\`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const setMembershipForUser: ApiHeroEndpoint<
  {
    org: string;
    username: string;
    body?: {
      /** 
* The role to give the user in the organization. Can be one of:  
\\\\* \`admin\` - The user will become an owner of the organization.  
\\\\* \`member\` - The user will become a non-owner member of the organization.
*/
      role?: \\"admin\\" | \\"member\\";
    };
  },
  OrgMembership
> = {
  id: \\"orgs/set-membership-for-user\\",
};

/**
 * Remove organization membership for a user
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const removeMembershipForUser: ApiHeroEndpoint<{ org: string; username: string }, void> = {
  id: \\"orgs/remove-membership-for-user\\",
};

/**
 * List outside collaborators for an organization
 * List all users who are outside collaborators of an organization.
 */
export const listOutsideCollaborators: ApiHeroEndpoint<
  { org: string; filter?: \\"2fa_disabled\\" | \\"all\\"; perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"orgs/list-outside-collaborators\\",
};

/**
 * Convert an organization member to outside collaborator
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \\"[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\\". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \\"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\\"
 */
export const convertMemberToOutsideCollaborator: ApiHeroEndpoint<
  {
    org: string;
    username: string;
    body?: {
      /**
       * When set to \`true\`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
       */
      async?: boolean;
    };
  },
  {}
> = {
  id: \\"orgs/convert-member-to-outside-collaborator\\",
};

/**
 * Remove outside collaborator from an organization
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const removeOutsideCollaborator: ApiHeroEndpoint<{ org: string; username: string }, void> = {
  id: \\"orgs/remove-outside-collaborator\\",
};

/**
 * List public organization members
 * Members of an organization can choose to have their membership publicized or not.
 */
export const listPublicMembers: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"orgs/list-public-members\\",
};

/**
 * Check public organization membership for a user
 */
export const checkPublicMembershipForUser: ApiHeroEndpoint<
  { org: string; username: string },
  void
> = {
  id: \\"orgs/check-public-membership-for-user\\",
};

/**
 * Set public organization membership for the authenticated user
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const setPublicMembershipForAuthenticatedUser: ApiHeroEndpoint<
  { org: string; username: string },
  void
> = {
  id: \\"orgs/set-public-membership-for-authenticated-user\\",
};

/**
 * Remove public organization membership for the authenticated user
 */
export const removePublicMembershipForAuthenticatedUser: ApiHeroEndpoint<
  { org: string; username: string },
  void
> = {
  id: \\"orgs/remove-public-membership-for-authenticated-user\\",
};

/**
 * List organization memberships for the authenticated user
 */
export const listMembershipsForAuthenticatedUser: ApiHeroEndpoint<
  { state?: \\"active\\" | \\"pending\\"; perPage?: number; page?: number },
  Array<OrgMembership>
> = {
  id: \\"orgs/list-memberships-for-authenticated-user\\",
};

/**
 * Get an organization membership for the authenticated user
 */
export const getMembershipForAuthenticatedUser: ApiHeroEndpoint<{ org: string }, OrgMembership> = {
  id: \\"orgs/get-membership-for-authenticated-user\\",
};

/**
 * Update an organization membership for the authenticated user
 */
export const updateMembershipForAuthenticatedUser: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The state that the membership should be in. Only \`\\"active\\"\` will be accepted.
       */
      state: \\"active\\";
    };
  },
  OrgMembership
> = {
  id: \\"orgs/update-membership-for-authenticated-user\\",
};

/**
 * List organizations for the authenticated user
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with \`read:org\` scope, you can publicize your organization membership with \`user\` scope, etc.). Therefore, this API requires at least \`user\` or \`read:org\` scope. OAuth requests with insufficient scope receive a \`403 Forbidden\` response.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<OrganizationSimple>
> = {
  id: \\"orgs/list-for-authenticated-user\\",
};

/**
 * List organizations for a user
 * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const listForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<OrganizationSimple>
> = {
  id: \\"orgs/list-for-user\\",
};
",
  "packages.ts" => "import { Package, PackageVersion, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List packages for an organization
 * Lists all packages in an organization readable by the user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const listPackagesForOrganization: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    org: string;
    visibility?: \\"public\\" | \\"private\\" | \\"internal\\";
  },
  Array<Package>
> = {
  id: \\"packages/list-packages-for-organization\\",
};

/**
 * Get a package for an organization
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageForOrganization: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    org: string;
  },
  Package
> = {
  id: \\"packages/get-package-for-organization\\",
};

/**
 * Delete a package for an organization
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageForOrg: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    org: string;
  },
  void
> = {
  id: \\"packages/delete-package-for-org\\",
};

/**
 * Restore a package for an organization
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageForOrg: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    org: string;
    token?: string;
  },
  void
> = {
  id: \\"packages/restore-package-for-org\\",
};

/**
 * Get all package versions for a package owned by an organization
 * Returns all package versions for a package owned by an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getAllPackageVersionsForPackageOwnedByOrg: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    org: string;
    page?: number;
    perPage?: number;
    state?: \\"active\\" | \\"deleted\\";
  },
  Array<PackageVersion>
> = {
  id: \\"packages/get-all-package-versions-for-package-owned-by-org\\",
};

/**
 * Get a package version for an organization
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageVersionForOrganization: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    org: string;
    packageVersionId: number;
  },
  PackageVersion
> = {
  id: \\"packages/get-package-version-for-organization\\",
};

/**
 * Delete package version for an organization
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageVersionForOrg: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    org: string;
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/delete-package-version-for-org\\",
};

/**
 * Restore package version for an organization
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageVersionForOrg: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    org: string;
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/restore-package-version-for-org\\",
};

/**
 * List packages for the authenticated user's namespace
 * Lists packages owned by the authenticated user within the user's namespace.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const listPackagesForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    visibility?: \\"public\\" | \\"private\\" | \\"internal\\";
  },
  Array<Package>
> = {
  id: \\"packages/list-packages-for-authenticated-user\\",
};

/**
 * Get a package for the authenticated user
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
  },
  Package
> = {
  id: \\"packages/get-package-for-authenticated-user\\",
};

/**
 * Delete a package for the authenticated user
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const deletePackageForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
  },
  void
> = {
  id: \\"packages/delete-package-for-authenticated-user\\",
};

/**
 * Restore a package for the authenticated user
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const restorePackageForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    token?: string;
  },
  void
> = {
  id: \\"packages/restore-package-for-authenticated-user\\",
};

/**
 * Get all package versions for a package owned by the authenticated user
 * Returns all package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getAllPackageVersionsForPackageOwnedByAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    page?: number;
    perPage?: number;
    state?: \\"active\\" | \\"deleted\\";
  },
  Array<PackageVersion>
> = {
  id: \\"packages/get-all-package-versions-for-package-owned-by-authenticated-user\\",
};

/**
 * Get a package version for the authenticated user
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageVersionForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    packageVersionId: number;
  },
  PackageVersion
> = {
  id: \\"packages/get-package-version-for-authenticated-user\\",
};

/**
 * Delete a package version for the authenticated user
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const deletePackageVersionForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/delete-package-version-for-authenticated-user\\",
};

/**
 * Restore a package version for the authenticated user
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const restorePackageVersionForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/restore-package-version-for-authenticated-user\\",
};

/**
 * List packages for a user
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const listPackagesForUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    username: string;
    visibility?: \\"public\\" | \\"private\\" | \\"internal\\";
  },
  Array<Package>
> = {
  id: \\"packages/list-packages-for-user\\",
};

/**
 * Get a package for a user
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageForUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    username: string;
  },
  Package
> = {
  id: \\"packages/get-package-for-user\\",
};

/**
 * Delete a package for a user
 * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageForUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    username: string;
  },
  void
> = {
  id: \\"packages/delete-package-for-user\\",
};

/**
 * Restore a package for a user
 * Restores an entire package for a user.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageForUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    username: string;
    token?: string;
  },
  void
> = {
  id: \\"packages/restore-package-for-user\\",
};

/**
 * Get all package versions for a package owned by a user
 * Returns all package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getAllPackageVersionsForPackageOwnedByUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    username: string;
  },
  Array<PackageVersion>
> = {
  id: \\"packages/get-all-package-versions-for-package-owned-by-user\\",
};

/**
 * Get a package version for a user
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageVersionForUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    packageVersionId: number;
    username: string;
  },
  PackageVersion
> = {
  id: \\"packages/get-package-version-for-user\\",
};

/**
 * Delete package version for a user
 * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageVersionForUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    username: string;
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/delete-package-version-for-user\\",
};

/**
 * Restore package version for a user
 * Restores a specific package version for a user.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageVersionForUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageName: string;
    username: string;
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/restore-package-version-for-user\\",
};
",
  "projects.ts" => "import {
  Project,
  ProjectCard,
  ProjectCollaboratorPermission,
  ProjectColumn,
  SimpleUser,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List organization projects
 * Lists the projects in an organization. Returns a \`404 Not Found\` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const listForOrg: ApiHeroEndpoint<
  { org: string; state?: \\"open\\" | \\"closed\\" | \\"all\\"; perPage?: number; page?: number },
  Array<Project>
> = {
  id: \\"projects/list-for-org\\",
};

/**
 * Create an organization project
 * Creates an organization project board. Returns a \`410 Gone\` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const createForOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The name of the project.
       */
      name: string;

      /**
       * The description of the project.
       */
      body?: string;
    };
  },
  Project
> = {
  id: \\"projects/create-for-org\\",
};

/**
 * Get a project card
 */
export const getCard: ApiHeroEndpoint<{ cardId: number }, ProjectCard> = {
  id: \\"projects/get-card\\",
};

/**
 * Delete a project card
 */
export const deleteCard: ApiHeroEndpoint<{ cardId: number }, void> = {
  id: \\"projects/delete-card\\",
};

/**
 * Update an existing project card
 */
export const updateCard: ApiHeroEndpoint<
  {
    cardId: number;
    body?: {
      /**
       * The project card's note
       */
      note?: string;

      /**
       * Whether or not the card is archived
       */
      archived?: boolean;
    };
  },
  ProjectCard
> = {
  id: \\"projects/update-card\\",
};

/**
 * Move a project card
 */
export const moveCard: ApiHeroEndpoint<
  {
    cardId: number;
    body: {
      /**
       * The position of the card in a column. Can be one of: \`top\`, \`bottom\`, or \`after:<card_id>\` to place after the specified card.
       */
      position: string;

      /**
       * The unique identifier of the column the card should be moved to
       */
      column_id?: number;
    };
  },
  {}
> = {
  id: \\"projects/move-card\\",
};

/**
 * Get a project column
 */
export const getColumn: ApiHeroEndpoint<{ columnId: number }, ProjectColumn> = {
  id: \\"projects/get-column\\",
};

/**
 * Delete a project column
 */
export const deleteColumn: ApiHeroEndpoint<{ columnId: number }, void> = {
  id: \\"projects/delete-column\\",
};

/**
 * Update an existing project column
 */
export const updateColumn: ApiHeroEndpoint<
  {
    columnId: number;
    body: {
      /**
       * Name of the project column
       */
      name: string;
    };
  },
  ProjectColumn
> = {
  id: \\"projects/update-column\\",
};

/**
 * List project cards
 */
export const listCards: ApiHeroEndpoint<
  {
    columnId: number;
    archivedState?: \\"all\\" | \\"archived\\" | \\"not_archived\\";
    perPage?: number;
    page?: number;
  },
  Array<ProjectCard>
> = {
  id: \\"projects/list-cards\\",
};

/**
 * Create a project card
 */
export const createCard: ApiHeroEndpoint<
  {
    columnId: number;
    body:
      | {
          /**
           * The project card's note
           */
          note: string;
        }
      | {
          /**
           * The unique identifier of the content associated with the card
           */
          content_id: number;

          /**
           * The piece of content associated with the card
           */
          content_type: string;
        };
  },
  ProjectCard
> = {
  id: \\"projects/create-card\\",
};

/**
 * Move a project column
 */
export const moveColumn: ApiHeroEndpoint<
  {
    columnId: number;
    body: {
      /**
       * The position of the column in a project. Can be one of: \`first\`, \`last\`, or \`after:<column_id>\` to place after the specified column.
       */
      position: string;
    };
  },
  {}
> = {
  id: \\"projects/move-column\\",
};

/**
 * Get a project
 * Gets a project by its \`id\`. Returns a \`404 Not Found\` status if projects are disabled. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const getProjects: ApiHeroEndpoint<{ projectId: number }, Project> = {
  id: \\"projects/get\\",
};

/**
 * Delete a project
 * Deletes a project board. Returns a \`404 Not Found\` status if projects are disabled.
 */
export const deleteProjects: ApiHeroEndpoint<{ projectId: number }, void> = {
  id: \\"projects/delete\\",
};

/**
 * Update a project
 * Updates a project board's information. Returns a \`404 Not Found\` status if projects are disabled. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const update: ApiHeroEndpoint<
  {
    projectId: number;
    body?: {
      /**
       * Name of the project
       */
      name?: string;

      /**
       * Body of the project
       */
      body?: string;

      /**
       * State of the project; either 'open' or 'closed'
       */
      state?: string;

      /**
       * The baseline permission that all organization members have on this project
       */
      organization_permission?: \\"read\\" | \\"write\\" | \\"admin\\" | \\"none\\";

      /**
       * Whether or not this project can be seen by everyone.
       */
      private?: boolean;
    };
  },
  Project
> = {
  id: \\"projects/update\\",
};

/**
 * List project collaborators
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project \`admin\` to list collaborators.
 */
export const listCollaborators: ApiHeroEndpoint<
  {
    projectId: number;
    affiliation?: \\"outside\\" | \\"direct\\" | \\"all\\";
    perPage?: number;
    page?: number;
  },
  Array<SimpleUser>
> = {
  id: \\"projects/list-collaborators\\",
};

/**
 * Add project collaborator
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project \`admin\` to add a collaborator.
 */
export const addCollaborator: ApiHeroEndpoint<
  {
    projectId: number;
    username: string;
    body?: {
      /**
       * The permission to grant the collaborator.
       */
      permission?: \\"read\\" | \\"write\\" | \\"admin\\";
    } | null;
  },
  void
> = {
  id: \\"projects/add-collaborator\\",
};

/**
 * Remove user as a collaborator
 * Removes a collaborator from an organization project. You must be an organization owner or a project \`admin\` to remove a collaborator.
 */
export const removeCollaborator: ApiHeroEndpoint<{ projectId: number; username: string }, void> = {
  id: \\"projects/remove-collaborator\\",
};

/**
 * Get project permission for a user
 * Returns the collaborator's permission level for an organization project. Possible values for the \`permission\` key: \`admin\`, \`write\`, \`read\`, \`none\`. You must be an organization owner or a project \`admin\` to review a user's permission level.
 */
export const getPermissionForUser: ApiHeroEndpoint<
  { projectId: number; username: string },
  ProjectCollaboratorPermission
> = {
  id: \\"projects/get-permission-for-user\\",
};

/**
 * List project columns
 */
export const listColumns: ApiHeroEndpoint<
  { projectId: number; perPage?: number; page?: number },
  Array<ProjectColumn>
> = {
  id: \\"projects/list-columns\\",
};

/**
 * Create a project column
 */
export const createColumn: ApiHeroEndpoint<
  {
    projectId: number;
    body: {
      /**
       * Name of the project column
       */
      name: string;
    };
  },
  ProjectColumn
> = {
  id: \\"projects/create-column\\",
};

/**
 * List repository projects
 * Lists the projects in a repository. Returns a \`404 Not Found\` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const listForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    perPage?: number;
    page?: number;
  },
  Array<Project>
> = {
  id: \\"projects/list-for-repo\\",
};

/**
 * Create a repository project
 * Creates a repository project board. Returns a \`410 Gone\` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const createForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the project.
       */
      name: string;

      /**
       * The description of the project.
       */
      body?: string;
    };
  },
  Project
> = {
  id: \\"projects/create-for-repo\\",
};

/**
 * Create a user project
 * Creates a user project board. Returns a \`410 Gone\` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const createForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * Name of the project
       */
      name: string;

      /**
       * Body of the project
       */
      body?: string;
    };
  },
  Project
> = {
  id: \\"projects/create-for-authenticated-user\\",
};

/**
 * List user projects
 */
export const listForUser: ApiHeroEndpoint<
  { username: string; state?: \\"open\\" | \\"closed\\" | \\"all\\"; perPage?: number; page?: number },
  Array<Project>
> = {
  id: \\"projects/list-for-user\\",
};
",
  "pulls.ts" => "import {
  Commit,
  DiffEntry,
  PullRequest,
  PullRequestMergeResult,
  PullRequestReview,
  PullRequestReviewComment,
  PullRequestReviewRequest,
  PullRequestSimple,
  ReviewComment,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List pull requests
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const list: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    head?: string;
    base?: string;
    sort?: \\"created\\" | \\"updated\\" | \\"popularity\\" | \\"long-running\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<PullRequestSimple>
> = {
  id: \\"pulls/list\\",
};

/**
 * Create a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * You can create a new pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\\" for details.
 */
export const create: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The title of the new pull request.
       */
      title?: string;

      /**
       * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace \`head\` with a user like this: \`username:branch\`.
       */
      head: string;

      /**
       * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
       */
      base: string;

      /**
       * The contents of the pull request.
       */
      body?: string;

      /**
       * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
       */
      maintainer_can_modify?: boolean;

      /**
       * Indicates whether the pull request is a draft. See \\"[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)\\" in the GitHub Help documentation to learn more.
       */
      draft?: boolean;

      issue?: number;
    };
  },
  PullRequest
> = {
  id: \\"pulls/create\\",
};

/**
 * List review comments in a repository
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const listReviewCommentsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    sort?: \\"created\\" | \\"updated\\" | \\"created_at\\";
    direction?: \\"asc\\" | \\"desc\\";
    since?: string;
    perPage?: number;
    page?: number;
  },
  Array<PullRequestReviewComment>
> = {
  id: \\"pulls/list-review-comments-for-repo\\",
};

/**
 * Get a review comment for a pull request
 * Provides details for a review comment.
 */
export const getReviewComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number },
  PullRequestReviewComment
> = {
  id: \\"pulls/get-review-comment\\",
};

/**
 * Delete a review comment for a pull request
 * Deletes a review comment.
 */
export const deleteReviewComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number },
  void
> = {
  id: \\"pulls/delete-review-comment\\",
};

/**
 * Update a review comment for a pull request
 * Enables you to edit a review comment.
 */
export const updateReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    body: {
      /**
       * The text of the reply to the review comment.
       */
      body: string;
    };
  },
  PullRequestReviewComment
> = {
  id: \\"pulls/update-review-comment\\",
};

/**
 * Get a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the \`mergeable\` key. For more information, see \\"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\\".
 *
 * The value of the \`mergeable\` attribute can be \`true\`, \`false\`, or \`null\`. If the value is \`null\`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-\`null\` value for the \`mergeable\` attribute in the response. If \`mergeable\` is \`true\`, then \`merge_commit_sha\` will be the SHA of the _test_ merge commit.
 *
 * The value of the \`merge_commit_sha\` attribute changes depending on the state of the pull request. Before merging a pull request, the \`merge_commit_sha\` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the \`merge_commit_sha\` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), \`merge_commit_sha\` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), \`merge_commit_sha\` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), \`merge_commit_sha\` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const getPulls: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number },
  PullRequest
> = {
  id: \\"pulls/get\\",
};

/**
 * Update a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const update: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * The title of the pull request.
       */
      title?: string;

      /**
       * The contents of the pull request.
       */
      body?: string;

      /**
       * State of this Pull Request. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      /**
       * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
       */
      base?: string;

      /**
       * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
       */
      maintainer_can_modify?: boolean;
    };
  },
  PullRequest
> = {
  id: \\"pulls/update\\",
};

/**
 * List review comments on a pull request
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const listReviewComments: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    since?: string;
    perPage?: number;
    page?: number;
  },
  Array<PullRequestReviewComment>
> = {
  id: \\"pulls/list-review-comments\\",
};

/**
 * Create a review comment for a pull request
 *
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \\"[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\\" We recommend creating a review comment using \`line\`, \`side\`, and optionally \`start_line\` and \`start_side\` if your comment applies to more than one line in the pull request diff.
 *
 * The \`position\` parameter is deprecated. If you use \`position\`, the \`line\`, \`side\`, \`start_line\`, and \`start_side\` parameters are not required.
 *
 * **Note:** The position value equals the number of lines down from the first \\"@@\\" hunk header in the file you want to add a comment. The line just below the \\"@@\\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body: {
      /**
       * The text of the review comment.
       */
      body: string;

      /**
       * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the \`position\`.
       */
      commit_id?: string;

      /**
       * The relative path to the file that necessitates a comment.
       */
      path?: string;

      /**
       * **This parameter is deprecated. Use \`line\` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
       * @deprecated
       */
      position?: number;

      /**
       * In a split diff view, the side of the diff that the pull request's changes appear on. Can be \`LEFT\` or \`RIGHT\`. Use \`LEFT\` for deletions that appear in red. Use \`RIGHT\` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \\"[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\\" in the GitHub Help documentation.
       */
      side?: \\"LEFT\\" | \\"RIGHT\\";

      /**
       * The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
       */
      line?: number;

      /**
       * **Required when using multi-line comments unless using \`in_reply_to\`**. The \`start_line\` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \\"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\\" in the GitHub Help documentation.
       */
      start_line?: number;

      /**
       * **Required when using multi-line comments unless using \`in_reply_to\`**. The \`start_side\` is the starting side of the diff that the comment applies to. Can be \`LEFT\` or \`RIGHT\`. To learn more about multi-line comments, see \\"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\\" in the GitHub Help documentation. See \`side\` in this table for additional context.
       */
      start_side?: \\"LEFT\\" | \\"RIGHT\\" | \\"side\\";

      /**
       * The ID of the review comment to reply to. To find the ID of a review comment with [\\"List review comments on a pull request\\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than \`body\` in the request body are ignored.
       */
      in_reply_to?: number;
    };
  },
  PullRequestReviewComment
> = {
  id: \\"pulls/create-review-comment\\",
};

/**
 * Create a reply for a review comment
 * Creates a reply to a review comment for a pull request. For the \`comment_id\`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createReplyForReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    commentId: number;
    body: {
      /**
       * The text of the review comment.
       */
      body: string;
    };
  },
  PullRequestReviewComment
> = {
  id: \\"pulls/create-reply-for-review-comment\\",
};

/**
 * List commits on a pull request
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const listCommits: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; perPage?: number; page?: number },
  Array<Commit>
> = {
  id: \\"pulls/list-commits\\",
};

/**
 * List pull requests files
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const listFiles: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; perPage?: number; page?: number },
  Array<DiffEntry>
> = {
  id: \\"pulls/list-files\\",
};

/**
 * Check if a pull request has been merged
 */
export const checkIfMerged: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number },
  void
> = {
  id: \\"pulls/check-if-merged\\",
};

/**
 * Merge a pull request
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const merge: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * Title for the automatic commit message.
       */
      commit_title?: string;

      /**
       * Extra detail to append to automatic commit message.
       */
      commit_message?: string;

      /**
       * SHA that pull request head must match to allow merge.
       */
      sha?: string;

      /**
       * Merge method to use. Possible values are \`merge\`, \`squash\` or \`rebase\`. Default is \`merge\`.
       */
      merge_method?: \\"merge\\" | \\"squash\\" | \\"rebase\\";
    } | null;
  },
  PullRequestMergeResult
> = {
  id: \\"pulls/merge\\",
};

/**
 * List requested reviewers for a pull request
 * Lists the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 */
export const listRequestedReviewers: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; perPage?: number; page?: number },
  PullRequestReviewRequest
> = {
  id: \\"pulls/list-requested-reviewers\\",
};

/**
 * Request reviewers for a pull request
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const requestReviewers: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * An array of user \`login\`s that will be requested.
       */
      reviewers?: Array<string>;

      /**
       * An array of team \`slug\`s that will be requested.
       */
      team_reviewers?: Array<string>;
    };
  },
  PullRequestSimple
> = {
  id: \\"pulls/request-reviewers\\",
};

/**
 * Remove requested reviewers from a pull request
 */
export const removeRequestedReviewers: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body: {
      /**
       * An array of user \`login\`s that will be removed.
       */
      reviewers: Array<string>;

      /**
       * An array of team \`slug\`s that will be removed.
       */
      team_reviewers?: Array<string>;
    };
  },
  PullRequestSimple
> = {
  id: \\"pulls/remove-requested-reviewers\\",
};

/**
 * List reviews for a pull request
 * The list of reviews returns in chronological order.
 */
export const listReviews: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; perPage?: number; page?: number },
  Array<PullRequestReview>
> = {
  id: \\"pulls/list-reviews\\",
};

/**
 * Create a review for a pull request
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * Pull request reviews created in the \`PENDING\` state do not include the \`submitted_at\` property in the response.
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the \`application/vnd.github.v3.diff\` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the \`Accept\` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The \`position\` value equals the number of lines down from the first \\"@@\\" hunk header in the file you want to add a comment. The line just below the \\"@@\\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const createReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the \`position\`. Defaults to the most recent commit in the pull request when you do not specify a value.
       */
      commit_id?: string;

      /**
       * **Required** when using \`REQUEST_CHANGES\` or \`COMMENT\` for the \`event\` parameter. The body text of the pull request review.
       */
      body?: string;

      /**
       * The review action you want to perform. The review actions include: \`APPROVE\`, \`REQUEST_CHANGES\`, or \`COMMENT\`. By leaving this blank, you set the review action state to \`PENDING\`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
       */
      event?: \\"APPROVE\\" | \\"REQUEST_CHANGES\\" | \\"COMMENT\\";

      /**
       * Use the following table to specify the location, destination, and contents of the draft review comment.
       */
      comments?: Array<{
        /**
         * The relative path to the file that necessitates a review comment.
         */
        path: string;

        /**
         * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
         */
        position?: number;

        /**
         * Text of the review comment.
         */
        body: string;

        line?: number;

        side?: string;

        start_line?: number;

        start_side?: string;
      }>;
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/create-review\\",
};

/**
 * Get a review for a pull request
 */
export const getReview: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; reviewId: number },
  PullRequestReview
> = {
  id: \\"pulls/get-review\\",
};

/**
 * Update a review for a pull request
 * Update the review summary comment with new text.
 */
export const updateReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    reviewId: number;
    body: {
      /**
       * The body text of the pull request review.
       */
      body: string;
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/update-review\\",
};

/**
 * Delete a pending review for a pull request
 */
export const deletePendingReview: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; reviewId: number },
  PullRequestReview
> = {
  id: \\"pulls/delete-pending-review\\",
};

/**
 * List comments for a pull request review
 * List comments for a specific pull request review.
 */
export const listCommentsForReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    reviewId: number;
    perPage?: number;
    page?: number;
  },
  Array<ReviewComment>
> = {
  id: \\"pulls/list-comments-for-review\\",
};

/**
 * Dismiss a review for a pull request
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const dismissReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    reviewId: number;
    body: {
      /**
       * The message for the pull request review dismissal
       */
      message: string;

      event?: string;
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/dismiss-review\\",
};

/**
 * Submit a review for a pull request
 */
export const submitReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    reviewId: number;
    body: {
      /**
       * The body text of the pull request review
       */
      body?: string;

      /**
       * The review action you want to perform. The review actions include: \`APPROVE\`, \`REQUEST_CHANGES\`, or \`COMMENT\`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to \`PENDING\`, which means you will need to re-submit the pull request review using a review action.
       */
      event: \\"APPROVE\\" | \\"REQUEST_CHANGES\\" | \\"COMMENT\\";
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/submit-review\\",
};

/**
 * Update a pull request branch
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const updateBranch: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a \`422 Unprocessable Entity\` status. You can use the \\"[List commits](https://docs.github.com/rest/reference/repos#list-commits)\\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
       */
      expected_head_sha?: string;
    } | null;
  },
  {
    message?: string;

    url?: string;
  }
> = {
  id: \\"pulls/update-branch\\",
};
",
  "rate-limit.ts" => "import { RateLimitOverview, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get rate limit status for the authenticated user
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The \`rate\` object is deprecated. If you're writing new API client code or updating existing code, you should use the \`core\` object instead of the \`rate\` object. The \`core\` object contains the same information that is present in the \`rate\` object.
 */
export const getRateLimit: ApiHeroEndpoint<never, RateLimitOverview> = {
  id: \\"rate-limit/get\\",
};
",
  "reactions.ts" => "import { Reaction, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List reactions for a team discussion comment
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions\`.
 */
export const listForTeamDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    commentNumber: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-comment-in-org\\",
};

/**
 * Create reaction for a team discussion comment
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions\`.
 */
export const createForTeamDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-comment-in-org\\",
};

/**
 * Delete team discussion comment reaction
 * **Note:** You can also specify a team or organization with \`team_id\` and \`org_id\` using the route \`DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteForTeamDiscussionComment: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    commentNumber: number;
    reactionId: number;
  },
  void
> = {
  id: \\"reactions/delete-for-team-discussion-comment\\",
};

/**
 * List reactions for a team discussion
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions\`.
 */
export const listForTeamDiscussionInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-in-org\\",
};

/**
 * Create reaction for a team discussion
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions\`.
 */
export const createForTeamDiscussionInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-in-org\\",
};

/**
 * Delete team discussion reaction
 * **Note:** You can also specify a team or organization with \`team_id\` and \`org_id\` using the route \`DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteForTeamDiscussion: ApiHeroEndpoint<
  { org: string; teamSlug: string; discussionNumber: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-team-discussion\\",
};

/**
 * List reactions for a commit comment
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const listForCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-commit-comment\\",
};

/**
 * Create reaction for a commit comment
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP \`200\` status means that you already added the reaction type to this commit comment.
 */
export const createForCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-commit-comment\\",
};

/**
 * Delete a commit comment reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const deleteForCommitComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-commit-comment\\",
};

/**
 * List reactions for an issue comment
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const listForIssueComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-issue-comment\\",
};

/**
 * Create reaction for an issue comment
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP \`200\` status means that you already added the reaction type to this issue comment.
 */
export const createForIssueComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-issue-comment\\",
};

/**
 * Delete an issue comment reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id\`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const deleteForIssueComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-issue-comment\\",
};

/**
 * List reactions for an issue
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const listForIssue: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-issue\\",
};

/**
 * Create reaction for an issue
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP \`200\` status means that you already added the reaction type to this issue.
 */
export const createForIssue: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-issue\\",
};

/**
 * Delete an issue reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id\`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const deleteForIssue: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-issue\\",
};

/**
 * List reactions for a pull request review comment
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const listForPullRequestReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-pull-request-review-comment\\",
};

/**
 * Create reaction for a pull request review comment
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP \`200\` status means that you already added the reaction type to this pull request review comment.
 */
export const createForPullRequestReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-pull-request-review-comment\\",
};

/**
 * Delete a pull request comment reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.\`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const deleteForPullRequestComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-pull-request-comment\\",
};

/**
 * List reactions for a release
 * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const listForRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    releaseId: number;
    content?: \\"+1\\" | \\"laugh\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-release\\",
};

/**
 * Create reaction for a release
 * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a \`Status: 200 OK\` means that you already added the reaction type to this release.
 */
export const createForRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    releaseId: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
       */
      content: \\"+1\\" | \\"laugh\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-release\\",
};

/**
 * Delete a release reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const deleteForRelease: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-release\\",
};

/** * @deprecated
 * List reactions for a team discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List reactions for a team discussion comment\`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listForTeamDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    commentNumber: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-comment-legacy\\",
};

/** * @deprecated
 * Create reaction for a team discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \\"[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\\" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion comment.
 */
export const createForTeamDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-comment-legacy\\",
};

/** * @deprecated
 * List reactions for a team discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List reactions for a team discussion\`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listForTeamDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    perPage?: number;
    page?: number;
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-legacy\\",
};

/** * @deprecated
 * Create reaction for a team discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create reaction for a team discussion\`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion.
 */
export const createForTeamDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-legacy\\",
};
",
  "repos.ts" => "import {
  Autolink,
  BranchProtection,
  BranchRestrictionPolicy,
  BranchShort,
  BranchWithProtection,
  CloneTraffic,
  CodeFrequencyStat,
  CodeownersErrors,
  Collaborator,
  CombinedCommitStatus,
  Commit,
  CommitActivity,
  CommitComment,
  CommitComparison,
  CommunityProfile,
  ContentDirectory,
  ContentFile,
  ContentSubmodule,
  ContentSymlink,
  ContentTraffic,
  Contributor,
  ContributorActivity,
  DeployKey,
  Deployment,
  DeploymentBranchPolicy,
  DeploymentReviewerType,
  DeploymentStatus,
  EmptyObject,
  Environment,
  FileCommit,
  FullRepository,
  Hook,
  HookDelivery,
  HookDeliveryItem,
  Integration,
  Language,
  MergedUpstream,
  MinimalRepository,
  Page,
  PageBuild,
  PageBuildStatus,
  PagesHealthCheck,
  ParticipationStats,
  ProtectedBranch,
  ProtectedBranchAdminEnforced,
  ProtectedBranchPullRequestReview,
  PullRequestSimple,
  ReferrerTraffic,
  Release,
  ReleaseAsset,
  ReleaseNotesContent,
  Repository,
  RepositoryCollaboratorPermission,
  RepositoryInvitation,
  ShortBranch,
  SimpleUser,
  Status,
  StatusCheckPolicy,
  Tag,
  TagProtection,
  Team,
  Topic,
  ViewTraffic,
  WaitTimer,
  WebhookConfig,
  WebhookConfigContentType,
  WebhookConfigInsecureSsl,
  WebhookConfigSecret,
  WebhookConfigUrl,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List organization repositories
 * Lists repositories for the specified organization.
 */
export const listForOrg: ApiHeroEndpoint<
  {
    org: string;
    type?: \\"all\\" | \\"public\\" | \\"private\\" | \\"forks\\" | \\"sources\\" | \\"member\\" | \\"internal\\";
    sort?: \\"created\\" | \\"updated\\" | \\"pushed\\" | \\"full_name\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<MinimalRepository>
> = {
  id: \\"repos/list-for-org\\",
};

/**
 * Create an organization repository
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   \`public_repo\` scope or \`repo\` scope to create a public repository. Note: For GitHub AE, use \`repo\` scope to create an internal repository.
 * *   \`repo\` scope to create a private repository
 */
export const createInOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The name of the repository.
       */
      name: string;

      /**
       * A short description of the repository.
       */
      description?: string;

      /**
       * A URL with more information about the repository.
       */
      homepage?: string;

      /**
       * Whether the repository is private.
       */
      private?: boolean;

      /**
       * Can be \`public\` or \`private\`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, \`visibility\` can also be \`internal\`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \\"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\\" in the GitHub Help documentation.
       */
      visibility?: \\"public\\" | \\"private\\" | \\"internal\\";

      /**
       * Either \`true\` to enable issues for this repository or \`false\` to disable them.
       */
      has_issues?: boolean;

      /**
       * Either \`true\` to enable projects for this repository or \`false\` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is \`false\`, and if you pass \`true\`, the API returns an error.
       */
      has_projects?: boolean;

      /**
       * Either \`true\` to enable the wiki for this repository or \`false\` to disable it.
       */
      has_wiki?: boolean;

      /**
       * Either \`true\` to make this repo available as a template repository or \`false\` to prevent it.
       */
      is_template?: boolean;

      /**
       * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
       */
      team_id?: number;

      /**
       * Pass \`true\` to create an initial commit with empty README.
       */
      auto_init?: boolean;

      /**
       * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \\"Haskell\\".
       */
      gitignore_template?: string;

      /**
       * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the \`license_template\` string. For example, \\"mit\\" or \\"mpl-2.0\\".
       */
      license_template?: string;

      /**
       * Either \`true\` to allow squash-merging pull requests, or \`false\` to prevent squash-merging.
       */
      allow_squash_merge?: boolean;

      /**
       * Either \`true\` to allow merging pull requests with a merge commit, or \`false\` to prevent merging pull requests with merge commits.
       */
      allow_merge_commit?: boolean;

      /**
       * Either \`true\` to allow rebase-merging pull requests, or \`false\` to prevent rebase-merging.
       */
      allow_rebase_merge?: boolean;

      /**
       * Either \`true\` to allow auto-merge on pull requests, or \`false\` to disallow auto-merge.
       */
      allow_auto_merge?: boolean;

      /**
       * Either \`true\` to allow automatically deleting head branches when pull requests are merged, or \`false\` to prevent automatic deletion.
       */
      delete_branch_on_merge?: boolean;

      /**
       * Either \`true\` to allow squash-merge commits to use pull request title, or \`false\` to use commit message.
       */
      use_squash_pr_title_as_default?: boolean;
    };
  },
  Repository
> = {
  id: \\"repos/create-in-org\\",
};

/**
 * Get a repository
 * The \`parent\` and \`source\` objects are present when the repository is a fork. \`parent\` is the repository this repository was forked from, \`source\` is the ultimate source for the network.
 */
export const getRepos: ApiHeroEndpoint<{ owner: string; repo: string }, FullRepository> = {
  id: \\"repos/get\\",
};

/**
 * Delete a repository
 * Deleting a repository requires admin access. If OAuth is used, the \`delete_repo\` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a \`403 Forbidden\` response.
 */
export const deleteRepos: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/delete\\",
};

/**
 * Update a repository
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const update: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * The name of the repository.
       */
      name?: string;

      /**
       * A short description of the repository.
       */
      description?: string;

      /**
       * A URL with more information about the repository.
       */
      homepage?: string;

      /**
       * Either \`true\` to make the repository private or \`false\` to make it public. Default: \`false\`.
       **Note**: You will get a \`422\` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a \`422\` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
       */
      private?: boolean;

      /**
       * Can be \`public\` or \`private\`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, \`visibility\` can also be \`internal\`.\\"
       */
      visibility?: \\"public\\" | \\"private\\" | \\"internal\\";

      /**
       * Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: \`{\\"security_and_analysis\\": {\\"advanced_security\\": {\\"status\\": \\"enabled\\"}}}\`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a \`GET /repos/{owner}/{repo}\` request.
       */
      security_and_analysis?: {
        /**
         * Use the \`status\` property to enable or disable GitHub Advanced Security for this repository. For more information, see \\"[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\\"
         */
        advanced_security?: {
          /**
           * Can be \`enabled\` or \`disabled\`.
           */
          status?: string;
        };

        /**
         * Use the \`status\` property to enable or disable secret scanning for this repository. For more information, see \\"[About secret scanning](/code-security/secret-security/about-secret-scanning).\\"
         */
        secret_scanning?: {
          /**
           * Can be \`enabled\` or \`disabled\`.
           */
          status?: string;
        };

        /**
         * Use the \`status\` property to enable or disable secret scanning push protection for this repository. For more information, see \\"[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\\"
         */
        secret_scanning_push_protection?: {
          /**
           * Can be \`enabled\` or \`disabled\`.
           */
          status?: string;
        };
      };

      /**
       * Either \`true\` to enable issues for this repository or \`false\` to disable them.
       */
      has_issues?: boolean;

      /**
       * Either \`true\` to enable projects for this repository or \`false\` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is \`false\`, and if you pass \`true\`, the API returns an error.
       */
      has_projects?: boolean;

      /**
       * Either \`true\` to enable the wiki for this repository or \`false\` to disable it.
       */
      has_wiki?: boolean;

      /**
       * Either \`true\` to make this repo available as a template repository or \`false\` to prevent it.
       */
      is_template?: boolean;

      /**
       * Updates the default branch for this repository.
       */
      default_branch?: string;

      /**
       * Either \`true\` to allow squash-merging pull requests, or \`false\` to prevent squash-merging.
       */
      allow_squash_merge?: boolean;

      /**
       * Either \`true\` to allow merging pull requests with a merge commit, or \`false\` to prevent merging pull requests with merge commits.
       */
      allow_merge_commit?: boolean;

      /**
       * Either \`true\` to allow rebase-merging pull requests, or \`false\` to prevent rebase-merging.
       */
      allow_rebase_merge?: boolean;

      /**
       * Either \`true\` to allow auto-merge on pull requests, or \`false\` to disallow auto-merge.
       */
      allow_auto_merge?: boolean;

      /**
       * Either \`true\` to allow automatically deleting head branches when pull requests are merged, or \`false\` to prevent automatic deletion.
       */
      delete_branch_on_merge?: boolean;

      /**
       * Either \`true\` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
       */
      allow_update_branch?: boolean;

      /**
       * Either \`true\` to allow squash-merge commits to use pull request title, or \`false\` to use commit message.
       */
      use_squash_pr_title_as_default?: boolean;

      /**
       * \`true\` to archive this repository. **Note**: You cannot unarchive repositories through the API.
       */
      archived?: boolean;

      /**
       * Either \`true\` to allow private forks, or \`false\` to prevent private forks.
       */
      allow_forking?: boolean;
    };
  },
  FullRepository
> = {
  id: \\"repos/update\\",
};

/**
 * List all autolinks of a repository
 * This returns a list of autolinks configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const listAutolinks: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number },
  Array<Autolink>
> = {
  id: \\"repos/list-autolinks\\",
};

/**
 * Create an autolink reference for a repository
 * Users with admin access to the repository can create an autolink.
 */
export const createAutolink: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The prefix appended by alphanumeric characters will generate a link any time it is found in an issue, pull request, or commit.
       */
      key_prefix: string;

      /**
       * The URL must contain \`<num>\` for the reference number. \`<num>\` matches alphanumeric characters \`A-Z\` (case insensitive), \`0-9\`, and \`-\`.
       */
      url_template: string;
    };
  },
  Autolink
> = {
  id: \\"repos/create-autolink\\",
};

/**
 * Get an autolink reference of a repository
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const getAutolink: ApiHeroEndpoint<
  { owner: string; repo: string; autolinkId: number },
  Autolink
> = {
  id: \\"repos/get-autolink\\",
};

/**
 * Delete an autolink reference from a repository
 * This deletes a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const deleteAutolink: ApiHeroEndpoint<
  { owner: string; repo: string; autolinkId: number },
  void
> = {
  id: \\"repos/delete-autolink\\",
};

/**
 * Enable automated security fixes
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)\\".
 */
export const enableAutomatedSecurityFixes: ApiHeroEndpoint<{ owner: string; repo: string }, void> =
  {
    id: \\"repos/enable-automated-security-fixes\\",
  };

/**
 * Disable automated security fixes
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)\\".
 */
export const disableAutomatedSecurityFixes: ApiHeroEndpoint<{ owner: string; repo: string }, void> =
  {
    id: \\"repos/disable-automated-security-fixes\\",
  };

/**
 * List branches
 */
export const listBranches: ApiHeroEndpoint<
  { owner: string; repo: string; _protected?: boolean; perPage?: number; page?: number },
  Array<ShortBranch>
> = {
  id: \\"repos/list-branches\\",
};

/**
 * Get a branch
 */
export const getBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  BranchWithProtection
> = {
  id: \\"repos/get-branch\\",
};

/**
 * Get branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  BranchProtection
> = {
  id: \\"repos/get-branch-protection\\",
};

/**
 * Update branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of \`users\` and \`teams\` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const updateBranchProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body: {
      /**
       * Require status checks to pass before merging. Set to \`null\` to disable.
       */
      required_status_checks: {
        /**
         * Require branches to be up to date before merging.
         */
        strict: boolean;

        /** 
* **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use \`checks\` instead of \`contexts\` for more fine-grained control.

* @deprecated
*/
        contexts: Array<string>;

        /**
         * The list of status checks to require in order to merge into this branch.
         */
        checks?: Array<{
          /**
           * The name of the required check
           */
          context: string;

          /**
           * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
           */
          app_id?: number;
        }>;
      };

      /**
       * Enforce all configured restrictions for administrators. Set to \`true\` to enforce required status checks for repository administrators. Set to \`null\` to disable.
       */
      enforce_admins: boolean;

      /**
       * Require at least one approving review on a pull request, before merging. Set to \`null\` to disable.
       */
      required_pull_request_reviews: {
        /**
         * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty \`dismissal_restrictions\` object to disable. User and team \`dismissal_restrictions\` are only available for organization-owned repositories. Omit this parameter for personal repositories.
         */
        dismissal_restrictions?: {
          /**
           * The list of user \`login\`s with dismissal access
           */
          users?: Array<string>;

          /**
           * The list of team \`slug\`s with dismissal access
           */
          teams?: Array<string>;

          /**
           * The list of app \`slug\`s with dismissal access
           */
          apps?: Array<string>;
        };

        /**
         * Set to \`true\` if you want to automatically dismiss approving reviews when someone pushes a new commit.
         */
        dismiss_stale_reviews?: boolean;

        /**
         * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
         */
        require_code_owner_reviews?: boolean;

        /**
         * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
         */
        required_approving_review_count?: number;

        /**
         * Allow specific users, teams, or apps to bypass pull request requirements.
         */
        bypass_pull_request_allowances?: {
          /**
           * The list of user \`login\`s allowed to bypass pull request requirements.
           */
          users?: Array<string>;

          /**
           * The list of team \`slug\`s allowed to bypass pull request requirements.
           */
          teams?: Array<string>;

          /**
           * The list of app \`slug\`s allowed to bypass pull request requirements.
           */
          apps?: Array<string>;
        };
      };

      /**
       * Restrict who can push to the protected branch. User, app, and team \`restrictions\` are only available for organization-owned repositories. Set to \`null\` to disable.
       */
      restrictions: {
        /**
         * The list of user \`login\`s with push access
         */
        users: Array<string>;

        /**
         * The list of team \`slug\`s with push access
         */
        teams: Array<string>;

        /**
         * The list of app \`slug\`s with push access
         */
        apps?: Array<string>;
      };

      /**
       * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to \`true\` to enforce a linear commit history. Set to \`false\` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: \`false\`. For more information, see \\"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\\" in the GitHub Help documentation.
       */
      required_linear_history?: boolean;

      /**
       * Permits force pushes to the protected branch by anyone with write access to the repository. Set to \`true\` to allow force pushes. Set to \`false\` or \`null\` to block force pushes. Default: \`false\`. For more information, see \\"[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\\" in the GitHub Help documentation.\\"
       */
      allow_force_pushes?: boolean;

      /**
       * Allows deletion of the protected branch by anyone with write access to the repository. Set to \`false\` to prevent deletion of the protected branch. Default: \`false\`. For more information, see \\"[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\\" in the GitHub Help documentation.
       */
      allow_deletions?: boolean;

      /**
       * If set to \`true\`, the \`restrictions\` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to \`true\` to restrict new branch creation. Default: \`false\`.
       */
      block_creations?: boolean;

      /**
       * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to \`false\` to disable. Default: \`false\`.
       */
      required_conversation_resolution?: boolean;
    };
  },
  ProtectedBranch
> = {
  id: \\"repos/update-branch-protection\\",
};

/**
 * Delete branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deleteBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-branch-protection\\",
};

/**
 * Get admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getAdminBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/get-admin-branch-protection\\",
};

/**
 * Set admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const setAdminBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/set-admin-branch-protection\\",
};

/**
 * Delete admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const deleteAdminBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-admin-branch-protection\\",
};

/**
 * Get pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getPullRequestReviewProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchPullRequestReview
> = {
  id: \\"repos/get-pull-request-review-protection\\",
};

/**
 * Delete pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deletePullRequestReviewProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-pull-request-review-protection\\",
};

/**
 * Update pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of \`users\` and \`teams\` replaces their previous values.
 */
export const updatePullRequestReviewProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?: {
      /**
       * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty \`dismissal_restrictions\` object to disable. User and team \`dismissal_restrictions\` are only available for organization-owned repositories. Omit this parameter for personal repositories.
       */
      dismissal_restrictions?: {
        /**
         * The list of user \`login\`s with dismissal access
         */
        users?: Array<string>;

        /**
         * The list of team \`slug\`s with dismissal access
         */
        teams?: Array<string>;

        /**
         * The list of app \`slug\`s with dismissal access
         */
        apps?: Array<string>;
      };

      /**
       * Set to \`true\` if you want to automatically dismiss approving reviews when someone pushes a new commit.
       */
      dismiss_stale_reviews?: boolean;

      /**
       * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
       */
      require_code_owner_reviews?: boolean;

      /**
       * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
       */
      required_approving_review_count?: number;

      /**
       * Allow specific users, teams, or apps to bypass pull request requirements.
       */
      bypass_pull_request_allowances?: {
        /**
         * The list of user \`login\`s allowed to bypass pull request requirements.
         */
        users?: Array<string>;

        /**
         * The list of team \`slug\`s allowed to bypass pull request requirements.
         */
        teams?: Array<string>;

        /**
         * The list of app \`slug\`s allowed to bypass pull request requirements.
         */
        apps?: Array<string>;
      };
    };
  },
  ProtectedBranchPullRequestReview
> = {
  id: \\"repos/update-pull-request-review-protection\\",
};

/**
 * Get commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of \`true\` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const getCommitSignatureProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/get-commit-signature-protection\\",
};

/**
 * Create commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const createCommitSignatureProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/create-commit-signature-protection\\",
};

/**
 * Delete commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const deleteCommitSignatureProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-commit-signature-protection\\",
};

/**
 * Get status checks protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getStatusChecksProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  StatusCheckPolicy
> = {
  id: \\"repos/get-status-checks-protection\\",
};

/**
 * Remove status check protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const removeStatusCheckProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/remove-status-check-protection\\",
};

/**
 * Update status check protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const updateStatusCheckProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?: {
      /**
       * Require branches to be up to date before merging.
       */
      strict?: boolean;

      /** 
* **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use \`checks\` instead of \`contexts\` for more fine-grained control.

* @deprecated
*/
      contexts?: Array<string>;

      /**
       * The list of status checks to require in order to merge into this branch.
       */
      checks?: Array<{
        /**
         * The name of the required check
         */
        context: string;

        /**
         * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
         */
        app_id?: number;
      }>;
    };
  },
  StatusCheckPolicy
> = {
  id: \\"repos/update-status-check-protection\\",
};

/**
 * Get all status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getAllStatusCheckContexts: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<string>
> = {
  id: \\"repos/get-all-status-check-contexts\\",
};

/**
 * Add status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const addStatusCheckContexts: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * contexts parameter
           */
          contexts: Array<string>;
        }
      | Array<string>;
  },
  Array<string>
> = {
  id: \\"repos/add-status-check-contexts\\",
};

/**
 * Set status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const setStatusCheckContexts: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * contexts parameter
           */
          contexts: Array<string>;
        }
      | Array<string>;
  },
  Array<string>
> = {
  id: \\"repos/set-status-check-contexts\\",
};

/**
 * Remove status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const removeStatusCheckContexts: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * contexts parameter
           */
          contexts: Array<string>;
        }
      | Array<string>;
  },
  Array<string>
> = {
  id: \\"repos/remove-status-check-contexts\\",
};

/**
 * Get access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams \`restrictions\` are only available for organization-owned repositories.
 */
export const getAccessRestrictions: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  BranchRestrictionPolicy
> = {
  id: \\"repos/get-access-restrictions\\",
};

/**
 * Delete access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const deleteAccessRestrictions: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-access-restrictions\\",
};

/**
 * Get apps with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 */
export const getAppsWithAccessToProtectedBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<Integration>
> = {
  id: \\"repos/get-apps-with-access-to-protected-branch\\",
};

/**
 * Add app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const addAppAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * apps parameter
           */
          apps: Array<string>;
        }
      | Array<string>;
  },
  Array<Integration>
> = {
  id: \\"repos/add-app-access-restrictions\\",
};

/**
 * Set app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const setAppAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * apps parameter
           */
          apps: Array<string>;
        }
      | Array<string>;
  },
  Array<Integration>
> = {
  id: \\"repos/set-app-access-restrictions\\",
};

/**
 * Remove app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const removeAppAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * apps parameter
           */
          apps: Array<string>;
        }
      | Array<string>;
  },
  Array<Integration>
> = {
  id: \\"repos/remove-app-access-restrictions\\",
};

/**
 * Get teams with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const getTeamsWithAccessToProtectedBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<Team>
> = {
  id: \\"repos/get-teams-with-access-to-protected-branch\\",
};

/**
 * Add team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | \`array\` | The teams that can have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const addTeamAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * teams parameter
           */
          teams: Array<string>;
        }
      | Array<string>;
  },
  Array<Team>
> = {
  id: \\"repos/add-team-access-restrictions\\",
};

/**
 * Set team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | \`array\` | The teams that can have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const setTeamAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * teams parameter
           */
          teams: Array<string>;
        }
      | Array<string>;
  },
  Array<Team>
> = {
  id: \\"repos/set-team-access-restrictions\\",
};

/**
 * Remove team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 *
 * | Type    | Description                                                                                                                                         |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Teams that should no longer have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const removeTeamAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * teams parameter
           */
          teams: Array<string>;
        }
      | Array<string>;
  },
  Array<Team>
> = {
  id: \\"repos/remove-team-access-restrictions\\",
};

/**
 * Get users with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const getUsersWithAccessToProtectedBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<SimpleUser>
> = {
  id: \\"repos/get-users-with-access-to-protected-branch\\",
};

/**
 * Add user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const addUserAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * users parameter
           */
          users: Array<string>;
        }
      | Array<string>;
  },
  Array<SimpleUser>
> = {
  id: \\"repos/add-user-access-restrictions\\",
};

/**
 * Set user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const setUserAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * users parameter
           */
          users: Array<string>;
        }
      | Array<string>;
  },
  Array<SimpleUser>
> = {
  id: \\"repos/set-user-access-restrictions\\",
};

/**
 * Remove user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const removeUserAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * users parameter
           */
          users: Array<string>;
        }
      | Array<string>;
  },
  Array<SimpleUser>
> = {
  id: \\"repos/remove-user-access-restrictions\\",
};

/**
 * Rename a branch
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \\"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\\".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the \`contents:write\` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the \`administration:write\` repository permission.
 */
export const renameBranch: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body: {
      /**
       * The new name of the branch.
       */
      new_name: string;
    };
  },
  BranchWithProtection
> = {
  id: \\"repos/rename-branch\\",
};

/**
 * List CODEOWNERS errors
 * List any syntax errors that are detected in the CODEOWNERS
 * file.
 *
 * For more information about the correct CODEOWNERS syntax,
 * see \\"[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners).\\"
 */
export const codeownersErrors: ApiHeroEndpoint<
  { owner: string; repo: string; ref?: string },
  CodeownersErrors
> = {
  id: \\"repos/codeowners-errors\\",
};

/**
 * List repository collaborators
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the \`read:org\` and \`repo\` scopes with push access to use this
 * endpoint. GitHub Apps must have the \`members\` organization permission and \`metadata\` repository permission to use this
 * endpoint.
 */
export const listCollaborators: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    affiliation?: \\"outside\\" | \\"direct\\" | \\"all\\";
    perPage?: number;
    page?: number;
  },
  Array<Collaborator>
> = {
  id: \\"repos/list-collaborators\\",
};

/**
 * Check if a user is a repository collaborator
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the \`read:org\` and \`repo\` scopes with push access to use this
 * endpoint. GitHub Apps must have the \`members\` organization permission and \`metadata\` repository permission to use this
 * endpoint.
 */
export const checkCollaborator: ApiHeroEndpoint<
  { owner: string; repo: string; username: string },
  void
> = {
  id: \\"repos/check-collaborator\\",
};

/**
 * Add a repository collaborator
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see \\"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\\"
 *
 * For more information on permission levels, see \\"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
 *
 * \`\`\`
 * Cannot assign {member} permission of {role name}
 * \`\`\`
 *
 * Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Updating an existing collaborator's permission level**
 *
 * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different \`permission\` parameter. The response will be a \`204\`, with no other indication that the permission level changed.
 *
 * **Rate limits**
 *
 * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const addCollaborator: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    username: string;
    body?: {
      /**
       * The permission to grant the collaborator. **Only valid on organization-owned repositories.** In addition to the enumerated values, you can also specify a custom repository role name, if the owning organization has defined any.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\" | \\"maintain\\" | \\"triage\\";
    };
  },
  RepositoryInvitation
> = {
  id: \\"repos/add-collaborator\\",
};

/**
 * Remove a repository collaborator
 */
export const removeCollaborator: ApiHeroEndpoint<
  { owner: string; repo: string; username: string },
  void
> = {
  id: \\"repos/remove-collaborator\\",
};

/**
 * Get repository permissions for a user
 * Checks the repository permission of a collaborator. The possible repository permissions are \`admin\`, \`write\`, \`read\`, and \`none\`.
 */
export const getCollaboratorPermissionLevel: ApiHeroEndpoint<
  { owner: string; repo: string; username: string },
  RepositoryCollaboratorPermission
> = {
  id: \\"repos/get-collaborator-permission-level\\",
};

/**
 * List commit comments for a repository
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const listCommitCommentsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<CommitComment>
> = {
  id: \\"repos/list-commit-comments-for-repo\\",
};

/**
 * Get a commit comment
 */
export const getCommitComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number },
  CommitComment
> = {
  id: \\"repos/get-commit-comment\\",
};

/**
 * Delete a commit comment
 */
export const deleteCommitComment: ApiHeroEndpoint<
  { owner: string; repo: string; commentId: number },
  void
> = {
  id: \\"repos/delete-commit-comment\\",
};

/**
 * Update a commit comment
 */
export const updateCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commentId: number;
    body: {
      /**
       * The contents of the comment
       */
      body: string;
    };
  },
  CommitComment
> = {
  id: \\"repos/update-commit-comment\\",
};

/**
 * List commits
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const listCommits: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    sha?: string;
    path?: string;
    author?: string;
    since?: string;
    until?: string;
    perPage?: number;
    page?: number;
  },
  Array<Commit>
> = {
  id: \\"repos/list-commits\\",
};

/**
 * List branches for HEAD commit
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const listBranchesForHeadCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string },
  Array<BranchShort>
> = {
  id: \\"repos/list-branches-for-head-commit\\",
};

/**
 * List commit comments
 * Use the \`:commit_sha\` to specify the commit that will have its comments listed.
 */
export const listCommentsForCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string; perPage?: number; page?: number },
  Array<CommitComment>
> = {
  id: \\"repos/list-comments-for-commit\\",
};

/**
 * Create a commit comment
 * Create a comment for a commit using its \`:commit_sha\`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commitSha: string;
    body: {
      /**
       * The contents of the comment.
       */
      body: string;

      /**
       * Relative path of the file to comment on.
       */
      path?: string;

      /**
       * Line index in the diff to comment on.
       */
      position?: number;

      /**
       * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
       */
      line?: number;
    };
  },
  CommitComment
> = {
  id: \\"repos/create-commit-comment\\",
};

/**
 * List pull requests associated with a commit
 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests.
 */
export const listPullRequestsAssociatedWithCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string; perPage?: number; page?: number },
  Array<PullRequestSimple>
> = {
  id: \\"repos/list-pull-requests-associated-with-commit\\",
};

/**
 * Get a commit
 * Returns the contents of a single commit reference. You must have \`read\` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch \`diff\` and \`patch\` formats. Diffs with binary data will have no \`patch\` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the \`sha\` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the \`Accept\` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getCommit: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string; page?: number; perPage?: number },
  Commit
> = {
  id: \\"repos/get-commit\\",
};

/**
 * Get the combined status for a specific reference
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 *
 * Additionally, a combined \`state\` is returned. The \`state\` is one of:
 *
 * *   **failure** if any of the contexts report as \`error\` or \`failure\`
 * *   **pending** if there are no statuses or a context is \`pending\`
 * *   **success** if the latest status for all contexts is \`success\`
 */
export const getCombinedStatusForRef: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string; perPage?: number; page?: number },
  CombinedCommitStatus
> = {
  id: \\"repos/get-combined-status-for-ref\\",
};

/**
 * List commit statuses for a reference
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: \`GET /repos/:owner/:repo/statuses/:ref\`.
 */
export const listCommitStatusesForRef: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string; perPage?: number; page?: number },
  Array<Status>
> = {
  id: \\"repos/list-commit-statuses-for-ref\\",
};

/**
 * Get community profile metrics
 * This endpoint will return all community profile metrics, including an
 * overall health score, repository description, the presence of documentation, detected
 * code of conduct, detected license, and the presence of ISSUE\\\\_TEMPLATE, PULL\\\\_REQUEST\\\\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The \`health_percentage\` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the \`health_percentage\` is \`100\`. If only one is present, then the
 * \`health_percentage\` is \`25\`.
 *
 * \`content_reports_enabled\` is only returned for organization-owned repositories.
 */
export const getCommunityProfileMetrics: ApiHeroEndpoint<
  { owner: string; repo: string },
  CommunityProfile
> = {
  id: \\"repos/get-community-profile-metrics\\",
};

/**
 * Compare two commits
 * The \`basehead\` param is comprised of two parts: \`base\` and \`head\`. Both must be branch names in \`repo\`. To compare branches across other repositories in the same network as \`repo\`, use the format \`<USERNAME>:branch\`.
 *
 * The response from the API is equivalent to running the \`git log base..head\` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a \`renamed\` status have a \`previous_filename\` field showing the previous filename of the file, and files with a \`modified\` status have a \`patch\` field showing the changes made to the file.
 *
 * **Working with large comparisons**
 *
 * To process a response with a large number of commits, you can use (\`per_page\` or \`page\`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see \\"[Traversing with pagination](/rest/guides/traversing-with-pagination).\\"
 *
 * When calling this API without any paging parameters (\`per_page\` or \`page\`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const compareCommits: ApiHeroEndpoint<
  { owner: string; repo: string; basehead: string; page?: number; perPage?: number },
  CommitComparison
> = {
  id: \\"repos/compare-commits\\",
};

/**
 * Get repository content
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in \`:path\`. If you omit
 * \`:path\`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Note**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 *
 * #### Size limits
 * If the requested file's size is:
 * * 1 MB or smaller: All features of this endpoint are supported.
 * * Between 1-100 MB: Only the \`raw\` or \`object\` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the \`object\` media type, the \`content\` field will be an empty string and the \`encoding\` field will be \`\\"none\\"\`. To get the contents of these larger files, use the \`raw\` media type.
 * * Greater than 100 MB: This endpoint is not supported.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their \\"type\\" specified as \\"file\\". Logically, the value
 * _should_ be \\"submodule\\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as \\"submodule\\".
 *
 * #### If the content is a symlink
 * If the requested \`:path\` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The \`submodule_git_url\` identifies the location of the submodule repository, and the \`sha\` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (\`git_url\` and \`_links[\\"git\\"]\`) and the
 * github.com URLs (\`html_url\` and \`_links[\\"html\\"]\`) will have null values.
 */
export const getContent: ApiHeroEndpoint<
  { owner: string; repo: string; path: string; ref?: string },
  ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule
> = {
  id: \\"repos/get-content\\",
};

/**
 * Create or update file contents
 * Creates a new file or replaces an existing file in a repository.
 */
export const createOrUpdateFileContents: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    path: string;
    body: {
      /**
       * The commit message.
       */
      message: string;

      /**
       * The new file content, using Base64 encoding.
       */
      content: string;

      /**
       * **Required if you are updating a file**. The blob SHA of the file being replaced.
       */
      sha?: string;

      /**
       * The branch name. Default: the repository’s default branch (usually \`master\`)
       */
      branch?: string;

      /**
       * The person that committed the file. Default: the authenticated user.
       */
      committer?: {
        /**
         * The name of the author or committer of the commit. You'll receive a \`422\` status code if \`name\` is omitted.
         */
        name: string;

        /**
         * The email of the author or committer of the commit. You'll receive a \`422\` status code if \`email\` is omitted.
         */
        email: string;

        date?: string;
      };

      /**
       * The author of the file. Default: The \`committer\` or the authenticated user if you omit \`committer\`.
       */
      author?: {
        /**
         * The name of the author or committer of the commit. You'll receive a \`422\` status code if \`name\` is omitted.
         */
        name: string;

        /**
         * The email of the author or committer of the commit. You'll receive a \`422\` status code if \`email\` is omitted.
         */
        email: string;

        date?: string;
      };
    };
  },
  FileCommit
> = {
  id: \\"repos/create-or-update-file-contents\\",
};

/**
 * Delete a file
 * Deletes a file in a repository.
 *
 * You can provide an additional \`committer\` parameter, which is an object containing information about the committer. Or, you can provide an \`author\` parameter, which is an object containing information about the author.
 *
 * The \`author\` section is optional and is filled in with the \`committer\` information if omitted. If the \`committer\` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both \`name\` and \`email\`, whether you choose to use \`author\` or \`committer\`. Otherwise, you'll receive a \`422\` status code.
 */
export const deleteFile: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    path: string;
    body: {
      /**
       * The commit message.
       */
      message: string;

      /**
       * The blob SHA of the file being replaced.
       */
      sha: string;

      /**
       * The branch name. Default: the repository’s default branch (usually \`master\`)
       */
      branch?: string;

      /**
       * object containing information about the committer.
       */
      committer?: {
        /**
         * The name of the author (or committer) of the commit
         */
        name?: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email?: string;
      };

      /**
       * object containing information about the author.
       */
      author?: {
        /**
         * The name of the author (or committer) of the commit
         */
        name?: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email?: string;
      };
    };
  },
  FileCommit
> = {
  id: \\"repos/delete-file\\",
};

/**
 * List repository contributors
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const listContributors: ApiHeroEndpoint<
  { owner: string; repo: string; anon?: string; perPage?: number; page?: number },
  Array<Contributor>
> = {
  id: \\"repos/list-contributors\\",
};

/**
 * List deployments
 * Simple filtering of deployments is available via query parameters:
 */
export const listDeployments: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    sha?: string;
    ref?: string;
    task?: string;
    environment?: string | null;
    perPage?: number;
    page?: number;
  },
  Array<Deployment>
> = {
  id: \\"repos/list-deployments\\",
};

/**
 * Create a deployment
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The \`ref\` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The \`environment\` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as \`production\`, \`staging\`, and \`qa\`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is \`production\`.
 *
 * The \`auto_merge\` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a \`success\`
 * state. The \`required_contexts\` parameter allows you to specify a subset of contexts that must be \`success\`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The \`payload\` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The \`task\` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be \`deploy:migrations\` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with \`repo\` or \`repo_deployment\` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is \`master\` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the \`auto_merge\` option is enabled and when the default branch (in this case \`master\`), can't
 * be merged into the branch that's being deployed (in this case \`topic-branch\`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the \`required_contexts\` parameter indicates that one or more contexts need to have a \`success\`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of \`success\`.
 */
export const createDeployment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The ref to deploy. This can be a branch, tag, or SHA.
       */
      ref: string;

      /**
       * Specifies a task to execute (e.g., \`deploy\` or \`deploy:migrations\`).
       */
      task?: string;

      /**
       * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
       */
      auto_merge?: boolean;

      /**
       * The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
       */
      required_contexts?: Array<string>;

      payload?: string;

      /**
       * Name for the target deployment environment (e.g., \`production\`, \`staging\`, \`qa\`).
       */
      environment?: string;

      /**
       * Short description of the deployment.
       */
      description?: string;

      /**
       * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: \`false\`
       */
      transient_environment?: boolean;

      /**
       * Specifies if the given environment is one that end-users directly interact with. Default: \`true\` when \`environment\` is \`production\` and \`false\` otherwise.
       */
      production_environment?: boolean;
    };
  },
  | Deployment
  | {
      message?: string;
    }
> = {
  id: \\"repos/create-deployment\\",
};

/**
 * Get a deployment
 */
export const getDeployment: ApiHeroEndpoint<
  { owner: string; repo: string; deploymentId: number },
  Deployment
> = {
  id: \\"repos/get-deployment\\",
};

/**
 * Delete a deployment
 * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with \`repo\` or \`repo_deployment\` scopes can delete a deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see \\"[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)\\" and \\"[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status).\\"
 */
export const deleteDeployment: ApiHeroEndpoint<
  { owner: string; repo: string; deploymentId: number },
  void
> = {
  id: \\"repos/delete-deployment\\",
};

/**
 * List deployment statuses
 * Users with pull access can view deployment statuses for a deployment:
 */
export const listDeploymentStatuses: ApiHeroEndpoint<
  { owner: string; repo: string; deploymentId: number; perPage?: number; page?: number },
  Array<DeploymentStatus>
> = {
  id: \\"repos/list-deployment-statuses\\",
};

/**
 * Create a deployment status
 * Users with \`push\` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require \`read & write\` access to \\"Deployments\\" and \`read-only\` access to \\"Repo contents\\" (for private repos). OAuth Apps require the \`repo_deployment\` scope.
 */
export const createDeploymentStatus: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    deploymentId: number;
    body: {
      /**
       * The state of the status. When you set a transient deployment to \`inactive\`, the deployment will be shown as \`destroyed\` in GitHub.
       */
      state: \\"error\\" | \\"failure\\" | \\"inactive\\" | \\"in_progress\\" | \\"queued\\" | \\"pending\\" | \\"success\\";

      /**
       * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the \`log_url\` parameter, which replaces \`target_url\`.
       */
      target_url?: string;

      /**
       * The full URL of the deployment's output. This parameter replaces \`target_url\`. We will continue to accept \`target_url\` to support legacy uses, but we recommend replacing \`target_url\` with \`log_url\`. Setting \`log_url\` will automatically set \`target_url\` to the same value. Default: \`\\"\\"\`
       */
      log_url?: string;

      /**
       * A short description of the status. The maximum description length is 140 characters.
       */
      description?: string;

      /**
       * Name for the target deployment environment, which can be changed when setting a deploy status. For example, \`production\`, \`staging\`, or \`qa\`.
       */
      environment?: \\"production\\" | \\"staging\\" | \\"qa\\";

      /**
       * Sets the URL for accessing your environment. Default: \`\\"\\"\`
       */
      environment_url?: string;

      /**
       * Adds a new \`inactive\` status to all prior non-transient, non-production environment deployments with the same repository and \`environment\` name as the created status's deployment. An \`inactive\` status is only added to deployments that had a \`success\` state. Default: \`true\`
       */
      auto_inactive?: boolean;
    };
  },
  DeploymentStatus
> = {
  id: \\"repos/create-deployment-status\\",
};

/**
 * Get a deployment status
 * Users with pull access can view a deployment status for a deployment:
 */
export const getDeploymentStatus: ApiHeroEndpoint<
  { owner: string; repo: string; deploymentId: number; statusId: number },
  DeploymentStatus
> = {
  id: \\"repos/get-deployment-status\\",
};

/**
 * Create a repository dispatch event
 * You can use this endpoint to trigger a webhook event called \`repository_dispatch\` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the \`repository_dispatch\` event occurs. For an example \`repository_dispatch\` webhook payload, see \\"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\\"
 *
 * The \`client_payload\` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the \`client_payload\` can include a message that a user would like to send using a GitHub Actions workflow. Or the \`client_payload\` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 * - Personal access tokens with \`repo\` scope. For more information, see \\"[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)\\" in the GitHub Help documentation.
 * - GitHub Apps with both \`metadata:read\` and \`contents:read&write\` permissions.
 *
 * This input example shows how you can use the \`client_payload\` as a test to debug your workflow.
 */
export const createDispatchEvent: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * A custom webhook event name. Must be 100 characters or fewer.
       */
      event_type: string;

      /**
       * JSON payload with extra information about the webhook event that your action or workflow may use.
       */
      client_payload?: {};
    };
  },
  void
> = {
  id: \\"repos/create-dispatch-event\\",
};

/**
 * Get all environments
 * Get all environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getAllEnvironments: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  {
    /**
     * The number of environments in this repository
     */
    total_count?: number;

    environments?: Array<Environment>;
  }
> = {
  id: \\"repos/get-all-environments\\",
};

/**
 * Get an environment
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getEnvironment: ApiHeroEndpoint<
  { owner: string; repo: string; environmentName: string },
  Environment
> = {
  id: \\"repos/get-environment\\",
};

/**
 * Create or update an environment
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see \\"[Environments](/actions/reference/environments#environment-protection-rules).\\"
 *
 * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see \\"[Environments](/actions/reference/environments#deployment-branches).\\"
 *
 * **Note:** To create or update secrets for an environment, see \\"[Secrets](/rest/reference/actions#secrets).\\"
 *
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const createOrUpdateEnvironment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    environmentName: string;
    body?: {
      wait_timer?: WaitTimer;

      /**
       * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
       */
      reviewers?: Array<{
        type?: DeploymentReviewerType;

        /**
         * The id of the user or team who can review the deployment
         */
        id?: number;
      }>;

      deployment_branch_policy?: DeploymentBranchPolicy;
    } | null;
  },
  Environment
> = {
  id: \\"repos/create-or-update-environment\\",
};

/**
 * Delete an environment
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const deleteAnEnvironment: ApiHeroEndpoint<
  { owner: string; repo: string; environmentName: string },
  void
> = {
  id: \\"repos/delete-an-environment\\",
};

/**
 * List forks
 */
export const listForks: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    sort?: \\"newest\\" | \\"oldest\\" | \\"stargazers\\" | \\"watchers\\";
    perPage?: number;
    page?: number;
  },
  Array<MinimalRepository>
> = {
  id: \\"repos/list-forks\\",
};

/**
 * Create a fork
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 */
export const createFork: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * Optional parameter to specify the organization name if forking into an organization.
       */
      organization?: string;

      /**
       * When forking from an existing repository, a new name for the fork.
       */
      name?: string;
    } | null;
  },
  FullRepository
> = {
  id: \\"repos/create-fork\\",
};

/**
 * List repository webhooks
 */
export const listWebhooks: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<Hook>
> = {
  id: \\"repos/list-webhooks\\",
};

/**
 * Create a repository webhook
 * Repositories can have multiple webhooks installed. Each webhook should have a unique \`config\`. Multiple webhooks can
 * share the same \`config\` as long as those webhooks do not have any \`events\` that overlap.
 */
export const createWebhook: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * Use \`web\` to create a webhook. Default: \`web\`. This parameter only accepts the value \`web\`.
       */
      name?: string;

      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
       */
      config?: {
        url?: WebhookConfigUrl;

        content_type?: WebhookConfigContentType;

        secret?: WebhookConfigSecret;

        insecure_ssl?: WebhookConfigInsecureSsl;

        token?: string;

        digest?: string;
      };

      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       */
      events?: Array<string>;

      /**
       * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
       */
      active?: boolean;
    } | null;
  },
  Hook
> = {
  id: \\"repos/create-webhook\\",
};

/**
 * Get a repository webhook
 * Returns a webhook configured in a repository. To get only the webhook \`config\` properties, see \\"[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\\"
 */
export const getWebhook: ApiHeroEndpoint<{ owner: string; repo: string; hookId: number }, Hook> = {
  id: \\"repos/get-webhook\\",
};

/**
 * Delete a repository webhook
 */
export const deleteWebhook: ApiHeroEndpoint<{ owner: string; repo: string; hookId: number }, void> =
  {
    id: \\"repos/delete-webhook\\",
  };

/**
 * Update a repository webhook
 * Updates a webhook configured in a repository. If you previously had a \`secret\` set, you must provide the same \`secret\` or set a new \`secret\` or the secret will be removed. If you are only updating individual webhook \`config\` properties, use \\"[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\\"
 */
export const updateWebhook: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    hookId: number;
    body: {
      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
       */
      config?: {
        url: WebhookConfigUrl;

        content_type?: WebhookConfigContentType;

        secret?: WebhookConfigSecret;

        insecure_ssl?: WebhookConfigInsecureSsl;

        address?: string;

        room?: string;
      };

      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
       */
      events?: Array<string>;

      /**
       * Determines a list of events to be added to the list of events that the Hook triggers for.
       */
      add_events?: Array<string>;

      /**
       * Determines a list of events to be removed from the list of events that the Hook triggers for.
       */
      remove_events?: Array<string>;

      /**
       * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
       */
      active?: boolean;
    };
  },
  Hook
> = {
  id: \\"repos/update-webhook\\",
};

/**
 * Get a webhook configuration for a repository
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the \`active\` state and \`events\`, use \\"[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\\"
 *
 * Access tokens must have the \`read:repo_hook\` or \`repo\` scope, and GitHub Apps must have the \`repository_hooks:read\` permission.
 */
export const getWebhookConfigForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number },
  WebhookConfig
> = {
  id: \\"repos/get-webhook-config-for-repo\\",
};

/**
 * Update a webhook configuration for a repository
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the \`active\` state and \`events\`, use \\"[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\\"
 *
 * Access tokens must have the \`write:repo_hook\` or \`repo\` scope, and GitHub Apps must have the \`repository_hooks:write\` permission.
 */
export const updateWebhookConfigForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    hookId: number;
    body?: {
      url?: WebhookConfigUrl;

      content_type?: WebhookConfigContentType;

      secret?: WebhookConfigSecret;

      insecure_ssl?: WebhookConfigInsecureSsl;
    };
  },
  WebhookConfig
> = {
  id: \\"repos/update-webhook-config-for-repo\\",
};

/**
 * List deliveries for a repository webhook
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 */
export const listWebhookDeliveries: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number; perPage?: number; cursor?: string },
  Array<HookDeliveryItem>
> = {
  id: \\"repos/list-webhook-deliveries\\",
};

/**
 * Get a delivery for a repository webhook
 * Returns a delivery for a webhook configured in a repository.
 */
export const getWebhookDelivery: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number; deliveryId: number },
  HookDelivery
> = {
  id: \\"repos/get-webhook-delivery\\",
};

/**
 * Redeliver a delivery for a repository webhook
 * Redeliver a webhook delivery for a webhook configured in a repository.
 */
export const redeliverWebhookDelivery: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number; deliveryId: number },
  {}
> = {
  id: \\"repos/redeliver-webhook-delivery\\",
};

/**
 * Ping a repository webhook
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const pingWebhook: ApiHeroEndpoint<{ owner: string; repo: string; hookId: number }, void> = {
  id: \\"repos/ping-webhook\\",
};

/**
 * Test the push repository webhook
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to \`push\` events. If the hook is not subscribed to \`push\` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously \`/repos/:owner/:repo/hooks/:hook_id/test\`
 */
export const testPushWebhook: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number },
  void
> = {
  id: \\"repos/test-push-webhook\\",
};

/**
 * List repository invitations
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const listInvitations: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<RepositoryInvitation>
> = {
  id: \\"repos/list-invitations\\",
};

/**
 * Delete a repository invitation
 */
export const deleteInvitation: ApiHeroEndpoint<
  { owner: string; repo: string; invitationId: number },
  void
> = {
  id: \\"repos/delete-invitation\\",
};

/**
 * Update a repository invitation
 */
export const updateInvitation: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    invitationId: number;
    body?: {
      /**
       * The permissions that the associated user will have on the repository. Valid values are \`read\`, \`write\`, \`maintain\`, \`triage\`, and \`admin\`.
       */
      permissions?: \\"read\\" | \\"write\\" | \\"maintain\\" | \\"triage\\" | \\"admin\\";
    };
  },
  RepositoryInvitation
> = {
  id: \\"repos/update-invitation\\",
};

/**
 * List deploy keys
 */
export const listDeployKeys: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<DeployKey>
> = {
  id: \\"repos/list-deploy-keys\\",
};

/**
 * Create a deploy key
 * You can create a read-only deploy key.
 */
export const createDeployKey: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * A name for the key.
       */
      title?: string;

      /**
       * The contents of the key.
       */
      key: string;

      /** 
* If \`true\`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
  
Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \\"[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\\" and \\"[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\\"
*/
      read_only?: boolean;
    };
  },
  DeployKey
> = {
  id: \\"repos/create-deploy-key\\",
};

/**
 * Get a deploy key
 */
export const getDeployKey: ApiHeroEndpoint<
  { owner: string; repo: string; keyId: number },
  DeployKey
> = {
  id: \\"repos/get-deploy-key\\",
};

/**
 * Delete a deploy key
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const deleteDeployKey: ApiHeroEndpoint<
  { owner: string; repo: string; keyId: number },
  void
> = {
  id: \\"repos/delete-deploy-key\\",
};

/**
 * List repository languages
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const listLanguages: ApiHeroEndpoint<{ owner: string; repo: string }, Language> = {
  id: \\"repos/list-languages\\",
};

/**
 * Enable Git LFS for a repository
 */
export const enableLfsForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, {}> = {
  id: \\"repos/enable-lfs-for-repo\\",
};

/**
 * Disable Git LFS for a repository
 */
export const disableLfsForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/disable-lfs-for-repo\\",
};

/**
 * Sync a fork branch with the upstream repository
 * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
 */
export const mergeUpstream: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the branch which should be updated to match upstream.
       */
      branch: string;
    };
  },
  MergedUpstream
> = {
  id: \\"repos/merge-upstream\\",
};

/**
 * Merge a branch
 */
export const merge: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the base branch that the head will be merged into.
       */
      base: string;

      /**
       * The head to merge. This can be a branch name or a commit SHA1.
       */
      head: string;

      /**
       * Commit message to use for the merge commit. If omitted, a default message will be used.
       */
      commit_message?: string;
    };
  },
  Commit
> = {
  id: \\"repos/merge\\",
};

/**
 * Get a GitHub Pages site
 */
export const getPages: ApiHeroEndpoint<{ owner: string; repo: string }, Page> = {
  id: \\"repos/get-pages\\",
};

/**
 * Create a GitHub Pages site
 * Configures a GitHub Pages site. For more information, see \\"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\\"
 */
export const createPagesSite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The source branch and directory used to publish your Pages site.
       */
      source?: {
        /**
         * The repository branch used to publish your site's source files.
         */
        branch: string;

        /**
         * The repository directory that includes the source files for the Pages site. Allowed paths are \`/\` or \`/docs\`. Default: \`/\`
         */
        path?: \\"/\\" | \\"/docs\\";
      };
    };
  },
  Page
> = {
  id: \\"repos/create-pages-site\\",
};

/**
 * Update information about a GitHub Pages site
 * Updates information for a GitHub Pages site. For more information, see \\"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 */
export const updateInformationAboutPagesSite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Specify a custom domain for the repository. Sending a \`null\` value will remove the custom domain. For more about custom domains, see \\"[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/).\\"
       */
      cname?: string;

      /**
       * Specify whether HTTPS should be enforced for the repository.
       */
      https_enforced?: boolean;

      /**
       * Configures access controls for the GitHub Pages site. If public is set to \`true\`, the site is accessible to anyone on the internet. If set to \`false\`, the site will only be accessible to users who have at least \`read\` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to \`internal\` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
       */
      public?: boolean;

      source?:
        | \\"gh-pages\\"
        | \\"master\\"
        | \\"master /docs\\"
        | {
            /**
             * The repository branch used to publish your site's source files.
             */
            branch: string;

            /**
             * The repository directory that includes the source files for the Pages site. Allowed paths are \`/\` or \`/docs\`.
             */
            path: \\"/\\" | \\"/docs\\";
          };
    };
  },
  void
> = {
  id: \\"repos/update-information-about-pages-site\\",
};

/**
 * Delete a GitHub Pages site
 */
export const deletePagesSite: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/delete-pages-site\\",
};

/**
 * List GitHub Pages builds
 */
export const listPagesBuilds: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<PageBuild>
> = {
  id: \\"repos/list-pages-builds\\",
};

/**
 * Request a GitHub Pages build
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const requestPagesBuild: ApiHeroEndpoint<{ owner: string; repo: string }, PageBuildStatus> =
  {
    id: \\"repos/request-pages-build\\",
  };

/**
 * Get latest Pages build
 */
export const getLatestPagesBuild: ApiHeroEndpoint<{ owner: string; repo: string }, PageBuild> = {
  id: \\"repos/get-latest-pages-build\\",
};

/**
 * Get GitHub Pages build
 */
export const getPagesBuild: ApiHeroEndpoint<
  { owner: string; repo: string; buildId: number },
  PageBuild
> = {
  id: \\"repos/get-pages-build\\",
};

/**
 * Get a DNS health check for GitHub Pages
 * Gets a health check of the DNS settings for the \`CNAME\` record configured for a repository's GitHub Pages.
 *
 * The first request to this endpoint returns a \`202 Accepted\` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a \`200 OK\` status with the health check results in the response.
 *
 * Users must have admin or owner permissions. GitHub Apps must have the \`pages:write\` and \`administration:write\` permission to use this endpoint.
 */
export const getPagesHealthCheck: ApiHeroEndpoint<
  { owner: string; repo: string },
  PagesHealthCheck | EmptyObject
> = {
  id: \\"repos/get-pages-health-check\\",
};

/**
 * Get a repository README
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const getReadme: ApiHeroEndpoint<
  { owner: string; repo: string; ref?: string },
  ContentFile
> = {
  id: \\"repos/get-readme\\",
};

/**
 * Get a repository README for a directory
 * Gets the README from a repository directory.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const getReadmeInDirectory: ApiHeroEndpoint<
  { owner: string; repo: string; dir: string; ref?: string },
  ContentFile
> = {
  id: \\"repos/get-readme-in-directory\\",
};

/**
 * List releases
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const listReleases: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<Release>
> = {
  id: \\"repos/list-releases\\",
};

/**
 * Create a release
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the tag.
       */
      tag_name: string;

      /**
       * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually \`master\`).
       */
      target_commitish?: string;

      /**
       * The name of the release.
       */
      name?: string;

      /**
       * Text describing the contents of the tag.
       */
      body?: string;

      /**
       * \`true\` to create a draft (unpublished) release, \`false\` to create a published one.
       */
      draft?: boolean;

      /**
       * \`true\` to identify the release as a prerelease. \`false\` to identify the release as a full release.
       */
      prerelease?: boolean;

      /**
       * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see \\"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\\"
       */
      discussion_category_name?: string;

      /**
       * Whether to automatically generate the name and body for this release. If \`name\` is specified, the specified name will be used; otherwise, a name will be automatically generated. If \`body\` is specified, the body will be pre-pended to the automatically generated notes.
       */
      generate_release_notes?: boolean;
    };
  },
  Release
> = {
  id: \\"repos/create-release\\",
};

/**
 * Get a release asset
 * To download the asset's binary content, set the \`Accept\` header of the request to [\`application/octet-stream\`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a \`200\` or \`302\` response.
 */
export const getReleaseAsset: ApiHeroEndpoint<
  { owner: string; repo: string; assetId: number },
  ReleaseAsset
> = {
  id: \\"repos/get-release-asset\\",
};

/**
 * Delete a release asset
 */
export const deleteReleaseAsset: ApiHeroEndpoint<
  { owner: string; repo: string; assetId: number },
  void
> = {
  id: \\"repos/delete-release-asset\\",
};

/**
 * Update a release asset
 * Users with push access to the repository can edit a release asset.
 */
export const updateReleaseAsset: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    assetId: number;
    body?: {
      /**
       * The file name of the asset.
       */
      name?: string;

      /**
       * An alternate short description of the asset. Used in place of the filename.
       */
      label?: string;

      state?: string;
    };
  },
  ReleaseAsset
> = {
  id: \\"repos/update-release-asset\\",
};

/**
 * Generate release notes content for a release
 * Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
 */
export const generateReleaseNotes: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The tag name for the release. This can be an existing tag or a new one.
       */
      tag_name: string;

      /**
       * Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
       */
      target_commitish?: string;

      /**
       * The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
       */
      previous_tag_name?: string;

      /**
       * Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
       */
      configuration_file_path?: string;
    };
  },
  ReleaseNotesContent
> = {
  id: \\"repos/generate-release-notes\\",
};

/**
 * Get the latest release
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the \`created_at\` attribute. The \`created_at\` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const getLatestRelease: ApiHeroEndpoint<{ owner: string; repo: string }, Release> = {
  id: \\"repos/get-latest-release\\",
};

/**
 * Get a release by tag name
 * Get a published release with the specified tag.
 */
export const getReleaseByTag: ApiHeroEndpoint<
  { owner: string; repo: string; tag: string },
  Release
> = {
  id: \\"repos/get-release-by-tag\\",
};

/**
 * Get a release
 * **Note:** This returns an \`upload_url\` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const getRelease: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number },
  Release
> = {
  id: \\"repos/get-release\\",
};

/**
 * Delete a release
 * Users with push access to the repository can delete a release.
 */
export const deleteRelease: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number },
  void
> = {
  id: \\"repos/delete-release\\",
};

/**
 * Update a release
 * Users with push access to the repository can edit a release.
 */
export const updateRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    releaseId: number;
    body?: {
      /**
       * The name of the tag.
       */
      tag_name?: string;

      /**
       * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually \`master\`).
       */
      target_commitish?: string;

      /**
       * The name of the release.
       */
      name?: string;

      /**
       * Text describing the contents of the tag.
       */
      body?: string;

      /**
       * \`true\` makes the release a draft, and \`false\` publishes the release.
       */
      draft?: boolean;

      /**
       * \`true\` to identify the release as a prerelease, \`false\` to identify the release as a full release.
       */
      prerelease?: boolean;

      /**
       * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see \\"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\\"
       */
      discussion_category_name?: string;
    };
  },
  Release
> = {
  id: \\"repos/update-release\\",
};

/**
 * List release assets
 */
export const listReleaseAssets: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number; perPage?: number; page?: number },
  Array<ReleaseAsset>
> = {
  id: \\"repos/list-release-assets\\",
};

/**
 * Upload a release asset
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the \`upload_url\` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required \`Content-Length\` header automatically. Use the required \`Content-Type\` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * \`application/zip\`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a \`502 Bad Gateway\` status. This may leave an empty asset with a state of \`starter\`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \\"[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)\\"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const uploadReleaseAsset: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number; name: string; label?: string; body?: string },
  ReleaseAsset
> = {
  id: \\"repos/upload-release-asset\\",
};

/**
 * Get the weekly commit activity
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const getCodeFrequencyStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<CodeFrequencyStat> | {}
> = {
  id: \\"repos/get-code-frequency-stats\\",
};

/**
 * Get the last year of commit activity
 * Returns the last year of commit activity grouped by week. The \`days\` array is a group of commits per day, starting on \`Sunday\`.
 */
export const getCommitActivityStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<CommitActivity> | {}
> = {
  id: \\"repos/get-commit-activity-stats\\",
};

/**
 * Get all contributor commit activity
 *
 * Returns the \`total\` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (\`weeks\` array) with the following information:
 *
 * *   \`w\` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   \`a\` - Number of additions
 * *   \`d\` - Number of deletions
 * *   \`c\` - Number of commits
 */
export const getContributorsStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<ContributorActivity> | {}
> = {
  id: \\"repos/get-contributors-stats\\",
};

/**
 * Get the weekly commit count
 * Returns the total commit counts for the \`owner\` and total commit counts in \`all\`. \`all\` is everyone combined, including the \`owner\` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract \`owner\` from \`all\`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const getParticipationStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  ParticipationStats
> = {
  id: \\"repos/get-participation-stats\\",
};

/**
 * Get the hourly commit count for each day
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   \`0-6\`: Sunday - Saturday
 * *   \`0-23\`: Hour of day
 * *   Number of commits
 *
 * For example, \`[2, 14, 25]\` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const getPunchCardStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<CodeFrequencyStat>
> = {
  id: \\"repos/get-punch-card-stats\\",
};

/**
 * Create a commit status
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per \`sha\` and \`context\` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const createCommitStatus: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    sha: string;
    body: {
      /**
       * The state of the status.
       */
      state: \\"error\\" | \\"failure\\" | \\"pending\\" | \\"success\\";

      /** 
* The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
\`http://ci.example.com/user/repo/build/sha\`
*/
      target_url?: string;

      /**
       * A short description of the status.
       */
      description?: string;

      /**
       * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
       */
      context?: string;
    };
  },
  Status
> = {
  id: \\"repos/create-commit-status\\",
};

/**
 * List repository tags
 */
export const listTags: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<Tag>
> = {
  id: \\"repos/list-tags\\",
};

/**
 * List tag protection states for a repository
 * This returns the tag protection states of a repository.
 *
 * This information is only available to repository administrators.
 */
export const listTagProtection: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<TagProtection>
> = {
  id: \\"repos/list-tag-protection\\",
};

/**
 * Create a tag protection state for a repository
 * This creates a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const createTagProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * An optional glob pattern to match against when enforcing tag protection.
       */
      pattern: string;
    };
  },
  TagProtection
> = {
  id: \\"repos/create-tag-protection\\",
};

/**
 * Delete a tag protection state for a repository
 * This deletes a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const deleteTagProtection: ApiHeroEndpoint<
  { owner: string; repo: string; tagProtectionId: number },
  void
> = {
  id: \\"repos/delete-tag-protection\\",
};

/**
 * Download a repository archive (tar)
 * Gets a redirect URL to download a tar archive for a repository. If you omit \`:ref\`, the repository’s default branch (usually
 * \`master\`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the \`Location\` header to make a second \`GET\` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const downloadTarballArchive: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string },
  void
> = {
  id: \\"repos/download-tarball-archive\\",
};

/**
 * List repository teams
 */
export const listTeams: ApiHeroEndpoint<
  { owner: string; repo: string; perPage?: number; page?: number },
  Array<Team>
> = {
  id: \\"repos/list-teams\\",
};

/**
 * Get all repository topics
 */
export const getAllTopics: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Topic
> = {
  id: \\"repos/get-all-topics\\",
};

/**
 * Replace all repository topics
 */
export const replaceAllTopics: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (\`[]\`) to clear all topics from the repository. **Note:** Topic \`names\` cannot contain uppercase letters.
       */
      names: Array<string>;
    };
  },
  Topic
> = {
  id: \\"repos/replace-all-topics\\",
};

/**
 * Get repository clones
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const getClones: ApiHeroEndpoint<
  { owner: string; repo: string; per?: \\"\\" | \\"day\\" | \\"week\\" },
  CloneTraffic
> = {
  id: \\"repos/get-clones\\",
};

/**
 * Get top referral paths
 * Get the top 10 popular contents over the last 14 days.
 */
export const getTopPaths: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<ContentTraffic>
> = {
  id: \\"repos/get-top-paths\\",
};

/**
 * Get top referral sources
 * Get the top 10 referrers over the last 14 days.
 */
export const getTopReferrers: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<ReferrerTraffic>
> = {
  id: \\"repos/get-top-referrers\\",
};

/**
 * Get page views
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const getViews: ApiHeroEndpoint<
  { owner: string; repo: string; per?: \\"\\" | \\"day\\" | \\"week\\" },
  ViewTraffic
> = {
  id: \\"repos/get-views\\",
};

/**
 * Transfer a repository
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original \`owner\`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
 */
export const transfer: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The username or organization name the repository will be transferred to.
       */
      new_owner: string;

      /**
       * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
       */
      team_ids?: Array<number>;
    };
  },
  MinimalRepository
> = {
  id: \\"repos/transfer\\",
};

/**
 * Check if vulnerability alerts are enabled for a repository
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see \\"[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\\".
 */
export const checkVulnerabilityAlerts: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/check-vulnerability-alerts\\",
};

/**
 * Enable vulnerability alerts
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\\".
 */
export const enableVulnerabilityAlerts: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/enable-vulnerability-alerts\\",
};

/**
 * Disable vulnerability alerts
 * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\\".
 */
export const disableVulnerabilityAlerts: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/disable-vulnerability-alerts\\",
};

/**
 * Download a repository archive (zip)
 * Gets a redirect URL to download a zip archive for a repository. If you omit \`:ref\`, the repository’s default branch (usually
 * \`master\`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the \`Location\` header to make a second \`GET\` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const downloadZipballArchive: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string },
  void
> = {
  id: \\"repos/download-zipball-archive\\",
};

/**
 * Create a repository using a template
 * Creates a new repository using a repository template. Use the \`template_owner\` and \`template_repo\` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the \`is_template\` key is \`true\`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   \`public_repo\` scope or \`repo\` scope to create a public repository. Note: For GitHub AE, use \`repo\` scope to create an internal repository.
 * *   \`repo\` scope to create a private repository
 */
export const createUsingTemplate: ApiHeroEndpoint<
  {
    templateOwner: string;
    templateRepo: string;
    body: {
      /**
       * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
       */
      owner?: string;

      /**
       * The name of the new repository.
       */
      name: string;

      /**
       * A short description of the new repository.
       */
      description?: string;

      /**
       * Set to \`true\` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: \`false\`.
       */
      include_all_branches?: boolean;

      /**
       * Either \`true\` to create a new private repository or \`false\` to create a new public one.
       */
      private?: boolean;
    };
  },
  Repository
> = {
  id: \\"repos/create-using-template\\",
};

/**
 * List public repositories
 * Lists all public repositories in the order that they were created.
 *
 * Note:
 * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const listPublic: ApiHeroEndpoint<{ since?: number }, Array<MinimalRepository>> = {
  id: \\"repos/list-public\\",
};

/**
 * List repositories for the authenticated user
 * Lists repositories that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  {
    visibility?: \\"all\\" | \\"public\\" | \\"private\\";
    affiliation?: string;
    type?: \\"all\\" | \\"owner\\" | \\"public\\" | \\"private\\" | \\"member\\";
    sort?: \\"created\\" | \\"updated\\" | \\"pushed\\" | \\"full_name\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
    since?: string;
    before?: string;
  },
  Array<Repository>
> = {
  id: \\"repos/list-for-authenticated-user\\",
};

/**
 * Create a repository for the authenticated user
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   \`public_repo\` scope or \`repo\` scope to create a public repository. Note: For GitHub AE, use \`repo\` scope to create an internal repository.
 * *   \`repo\` scope to create a private repository.
 */
export const createForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * The name of the repository.
       */
      name: string;

      /**
       * A short description of the repository.
       */
      description?: string;

      /**
       * A URL with more information about the repository.
       */
      homepage?: string;

      /**
       * Whether the repository is private.
       */
      private?: boolean;

      /**
       * Whether issues are enabled.
       */
      has_issues?: boolean;

      /**
       * Whether projects are enabled.
       */
      has_projects?: boolean;

      /**
       * Whether the wiki is enabled.
       */
      has_wiki?: boolean;

      /**
       * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
       */
      team_id?: number;

      /**
       * Whether the repository is initialized with a minimal README.
       */
      auto_init?: boolean;

      /**
       * The desired language or platform to apply to the .gitignore.
       */
      gitignore_template?: string;

      /**
       * The license keyword of the open source license for this repository.
       */
      license_template?: string;

      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;

      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;

      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;

      /**
       * Whether to allow Auto-merge to be used on pull requests.
       */
      allow_auto_merge?: boolean;

      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;

      /**
       * Whether downloads are enabled.
       */
      has_downloads?: boolean;

      /**
       * Whether this repository acts as a template that can be used to generate new repositories.
       */
      is_template?: boolean;
    };
  },
  Repository
> = {
  id: \\"repos/create-for-authenticated-user\\",
};

/**
 * List repository invitations for the authenticated user
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const listInvitationsForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<RepositoryInvitation>
> = {
  id: \\"repos/list-invitations-for-authenticated-user\\",
};

/**
 * Decline a repository invitation
 */
export const declineInvitationForAuthenticatedUser: ApiHeroEndpoint<
  { invitationId: number },
  void
> = {
  id: \\"repos/decline-invitation-for-authenticated-user\\",
};

/**
 * Accept a repository invitation
 */
export const acceptInvitationForAuthenticatedUser: ApiHeroEndpoint<{ invitationId: number }, void> =
  {
    id: \\"repos/accept-invitation-for-authenticated-user\\",
  };

/**
 * List repositories for a user
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const listForUser: ApiHeroEndpoint<
  {
    username: string;
    type?: \\"all\\" | \\"owner\\" | \\"member\\";
    sort?: \\"created\\" | \\"updated\\" | \\"pushed\\" | \\"full_name\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<MinimalRepository>
> = {
  id: \\"repos/list-for-user\\",
};
",
  "scim.ts" => "import { ScimUser, ScimUserList, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List SCIM provisioned identities
 * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the \`filter\` parameter, the resources for all matching provisions members are returned.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 * - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
 * - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 * - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a \`null\` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
 *
 * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the \`null\` external identity entry is created and the user is prompted to sign in to their GitHub account:
 * - If the user signs in, their GitHub account is linked to this entry.
 * - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity \`null\` entry remains in place.
 */
export const listProvisionedIdentities: ApiHeroEndpoint<
  { org: string; startIndex?: number; count?: number; filter?: string },
  ScimUserList
> = {
  id: \\"scim/list-provisioned-identities\\",
};

/**
 * Provision and invite a SCIM user
 * Provision organization membership for a user, and send an activation email to the email address.
 */
export const provisionAndInviteUser: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * Configured by the admin. Could be an email, login, or username
       */
      userName: string;

      /**
       * The name of the user, suitable for display to end-users
       */
      displayName?: string;

      name: {
        givenName: string;

        familyName: string;

        formatted?: string;
      };

      /**
       * user emails
       */
      emails: Array<{
        value: string;

        primary?: boolean;

        type?: string;
      }>;

      schemas?: Array<string>;

      externalId?: string;

      groups?: Array<string>;

      active?: boolean;
    };
  },
  ScimUser
> = {
  id: \\"scim/provision-and-invite-user\\",
};

/**
 * Get SCIM provisioning information for a user
 */
export const getProvisioningInformationForUser: ApiHeroEndpoint<
  { org: string; scimUserId: string },
  ScimUser
> = {
  id: \\"scim/get-provisioning-information-for-user\\",
};

/**
 * Update a provisioned organization membership
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: \`userName\`, \`name\`, and \`emails\`.
 *
 * **Warning:** Setting \`active: false\` removes the user from the organization, deletes the external identity, and deletes the associated \`{scim_user_id}\`.
 */
export const setInformationForProvisionedUser: ApiHeroEndpoint<
  {
    org: string;
    scimUserId: string;
    body: {
      schemas?: Array<string>;

      /**
       * The name of the user, suitable for display to end-users
       */
      displayName?: string;

      externalId?: string;

      groups?: Array<string>;

      active?: boolean;

      /**
       * Configured by the admin. Could be an email, login, or username
       */
      userName: string;

      name: {
        givenName: string;

        familyName: string;

        formatted?: string;
      };

      /**
       * user emails
       */
      emails: Array<{
        type?: string;

        value: string;

        primary?: boolean;
      }>;
    };
  },
  ScimUser
> = {
  id: \\"scim/set-information-for-provisioned-user\\",
};

/**
 * Delete a SCIM user from an organization
 */
export const deleteUserFromOrg: ApiHeroEndpoint<{ org: string; scimUserId: string }, void> = {
  id: \\"scim/delete-user-from-org\\",
};

/**
 * Update an attribute for a SCIM user
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific \`Operations\` JSON format that contains at least one of the \`add\`, \`remove\`, or \`replace\` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM \`path\` selectors that include filters are not supported. For example, a \`path\` selector defined as \`\\"path\\": \\"emails[type eq \\\\\\"work\\\\\\"]\\"\` will not work.
 *
 * **Warning:** If you set \`active:false\` using the \`replace\` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated \`:scim_user_id\`.
 *
 * \`\`\`
 * {
 * \\"Operations\\":[{
 * \\"op\\":\\"replace\\",
 * \\"value\\":{
 * \\"active\\":false
 * }
 * }]
 * }
 * \`\`\`
 */
export const updateAttributeForUser: ApiHeroEndpoint<
  {
    org: string;
    scimUserId: string;
    body: {
      schemas?: Array<string>;

      /**
       * Set of operations to be performed
       */
      Operations: Array<{
        op: \\"add\\" | \\"remove\\" | \\"replace\\";

        path?: string;

        value?:
          | {
              active?: boolean;

              userName?: string;

              externalId?: string;

              givenName?: string;

              familyName?: string;
            }
          | string;
      }>;
    };
  },
  ScimUser
> = {
  id: \\"scim/update-attribute-for-user\\",
};
",
  "search.ts" => "import {
  CodeSearchResultItem,
  CommitSearchResultItem,
  IssueSearchResultItem,
  LabelSearchResultItem,
  RepoSearchResultItem,
  TopicSearchResultItem,
  UserSearchResultItem,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Search code
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the \`addClass\` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * \`q=addClass+in:file+language:js+repo:jquery/jquery\`
 *
 * This query searches for the keyword \`addClass\` within a file's contents. The query limits the search to files where the language is JavaScript in the \`jquery/jquery\` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the \`master\` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [\`language:go\`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [\`amazing
 * language:go\`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const code: ApiHeroEndpoint<
  { q: string; sort?: \\"indexed\\"; order?: \\"desc\\" | \\"asc\\"; perPage?: number; page?: number },
  {
    total_count: number;

    incomplete_results: boolean;

    items: Array<CodeSearchResultItem>;
  }
> = {
  id: \\"search/code\\",
};

/**
 * Search commits
 * Find commits via various criteria on the default branch (usually \`master\`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * \`q=repo:octocat/Spoon-Knife+css\`
 */
export const commits: ApiHeroEndpoint<
  {
    q: string;
    sort?: \\"author-date\\" | \\"committer-date\\";
    order?: \\"desc\\" | \\"asc\\";
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    incomplete_results: boolean;

    items: Array<CommitSearchResultItem>;
  }
> = {
  id: \\"search/commits\\",
};

/**
 * Search issues and pull requests
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * \`q=windows+label:bug+language:python+state:open&sort=created&order=asc\`
 *
 * This query searches for the keyword \`windows\`, within any open issue that is labeled as \`bug\`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the \`is:issue\` or \`is:pull-request\` qualifier will receive an HTTP \`422 Unprocessable Entity\` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the \`is\` qualifier, see \\"[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\\"
 */
export const issuesAndPullRequests: ApiHeroEndpoint<
  {
    q: string;
    sort?:
      | \\"comments\\"
      | \\"reactions\\"
      | \\"reactions-+1\\"
      | \\"reactions--1\\"
      | \\"reactions-smile\\"
      | \\"reactions-thinking_face\\"
      | \\"reactions-heart\\"
      | \\"reactions-tada\\"
      | \\"interactions\\"
      | \\"created\\"
      | \\"updated\\";
    order?: \\"desc\\" | \\"asc\\";
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    incomplete_results: boolean;

    items: Array<IssueSearchResultItem>;
  }
> = {
  id: \\"search/issues-and-pull-requests\\",
};

/**
 * Search labels
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the \`linguist\` repository that match \`bug\`, \`defect\`, or \`enhancement\`. Your query might look like this:
 *
 * \`q=bug+defect+enhancement&repository_id=64778136\`
 *
 * The labels that best match the query appear first in the search results.
 */
export const labels: ApiHeroEndpoint<
  {
    repositoryId: number;
    q: string;
    sort?: \\"created\\" | \\"updated\\";
    order?: \\"desc\\" | \\"asc\\";
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    incomplete_results: boolean;

    items: Array<LabelSearchResultItem>;
  }
> = {
  id: \\"search/labels\\",
};

/**
 * Search repositories
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * \`q=tetris+language:assembly&sort=stars&order=desc\`
 *
 * This query searches for repositories with the word \`tetris\` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 */
export const repos: ApiHeroEndpoint<
  {
    q: string;
    sort?: \\"stars\\" | \\"forks\\" | \\"help-wanted-issues\\" | \\"updated\\";
    order?: \\"desc\\" | \\"asc\\";
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    incomplete_results: boolean;

    items: Array<RepoSearchResultItem>;
  }
> = {
  id: \\"search/repos\\",
};

/**
 * Search topics
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See \\"[Searching topics](https://docs.github.com/articles/searching-topics/)\\" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\\\\_description**, **description**, **name**, or **display\\\\_name** field when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * \`q=ruby+is:featured\`
 *
 * This query searches for topics with the keyword \`ruby\` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const topics: ApiHeroEndpoint<
  { q: string; perPage?: number; page?: number },
  {
    total_count: number;

    incomplete_results: boolean;

    items: Array<TopicSearchResultItem>;
  }
> = {
  id: \\"search/topics\\",
};

/**
 * Search users
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the \`text-match\` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * \`q=tom+repos:%3E42+followers:%3E1000\`
 *
 * This query searches for users with the name \`tom\`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const users: ApiHeroEndpoint<
  {
    q: string;
    sort?: \\"followers\\" | \\"repositories\\" | \\"joined\\";
    order?: \\"desc\\" | \\"asc\\";
    perPage?: number;
    page?: number;
  },
  {
    total_count: number;

    incomplete_results: boolean;

    items: Array<UserSearchResultItem>;
  }
> = {
  id: \\"search/users\\",
};
",
  "secret-scanning.ts" => "import {
  AlertNumber,
  OrganizationSecretScanningAlert,
  SecretScanningAlert,
  SecretScanningAlertResolution,
  SecretScanningAlertState,
  SecretScanningLocation,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List secret scanning alerts for an enterprise
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the \`repo\` scope or \`security_events\` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 */
export const listAlertsForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    state?: \\"open\\" | \\"resolved\\";
    secretType?: string;
    resolution?: string;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    before?: string;
    after?: string;
  },
  Array<OrganizationSecretScanningAlert>
> = {
  id: \\"secret-scanning/list-alerts-for-enterprise\\",
};

/**
 * List secret scanning alerts for an organization
 * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const listAlertsForOrg: ApiHeroEndpoint<
  {
    org: string;
    state?: \\"open\\" | \\"resolved\\";
    secretType?: string;
    resolution?: string;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    page?: number;
    perPage?: number;
    before?: string;
    after?: string;
  },
  Array<OrganizationSecretScanningAlert>
> = {
  id: \\"secret-scanning/list-alerts-for-org\\",
};

/**
 * List secret scanning alerts for a repository
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const listAlertsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    state?: \\"open\\" | \\"resolved\\";
    secretType?: string;
    resolution?: string;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
    page?: number;
    perPage?: number;
    before?: string;
    after?: string;
  },
  Array<SecretScanningAlert>
> = {
  id: \\"secret-scanning/list-alerts-for-repo\\",
};

/**
 * Get a secret scanning alert
 * Gets a single secret scanning alert detected in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const getAlert: ApiHeroEndpoint<
  { owner: string; repo: string; alertNumber: AlertNumber },
  SecretScanningAlert
> = {
  id: \\"secret-scanning/get-alert\\",
};

/**
 * Update a secret scanning alert
 * Updates the status of a secret scanning alert in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` write permission to use this endpoint.
 */
export const updateAlert: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    alertNumber: AlertNumber;
    body: {
      state: SecretScanningAlertState;

      resolution?: SecretScanningAlertResolution;
    };
  },
  SecretScanningAlert
> = {
  id: \\"secret-scanning/update-alert\\",
};

/**
 * List locations for a secret scanning alert
 * Lists all locations for a given secret scanning alert for an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const listLocationsForAlert: ApiHeroEndpoint<
  { owner: string; repo: string; alertNumber: AlertNumber; page?: number; perPage?: number },
  Array<SecretScanningLocation>
> = {
  id: \\"secret-scanning/list-locations-for-alert\\",
};
",
  "server-statistics.ts" => "import { ServerStatistics, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get GitHub Enterprise Server statistics
 * Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.
 *
 * To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \\"[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\\" in the GitHub Enterprise Server documentation.
 *
 * You'll need to use a personal access token:
 * - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the \`read:enterprise\` permission.
 * - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the \`read:org\` permission.
 *
 * For more information on creating a personal access token, see \\"[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\\"
 */
export const getServerStatistics: ApiHeroEndpoint<
  { enterpriseOrOrg: string; dateStart?: string; dateEnd?: string },
  ServerStatistics
> = {
  id: \\"enterprise-admin/get-server-statistics\\",
};
",
  "teams.ts" => "import {
  ExternalGroup,
  ExternalGroups,
  GroupMapping,
  MinimalRepository,
  OrganizationInvitation,
  SimpleUser,
  Team,
  TeamDiscussion,
  TeamDiscussionComment,
  TeamFull,
  TeamMembership,
  TeamProject,
  TeamRepository,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get an external group
 * Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const externalIdpGroupInfoForOrg: ApiHeroEndpoint<
  { org: string; groupId: number },
  ExternalGroup
> = {
  id: \\"teams/external-idp-group-info-for-org\\",
};

/**
 * List external groups in an organization
 * Lists external groups available in an organization. You can query the groups using the \`display_name\` parameter, only groups with a \`group_name\` containing the text provided in the \`display_name\` parameter will be returned.  You can also limit your page results using the \`per_page\` parameter. GitHub generates a url-encoded \`page\` token using a cursor value for where the next page begins. For more information on cursor pagination, see \\"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\\"
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const listExternalIdpGroupsForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number; displayName?: string },
  ExternalGroups
> = {
  id: \\"teams/list-external-idp-groups-for-org\\",
};

/**
 * List IdP groups for an organization
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups available in an organization. You can limit your page results using the \`per_page\` parameter. GitHub generates a url-encoded \`page\` token using a cursor value for where the next page begins. For more information on cursor pagination, see \\"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\\"
 */
export const listIdpGroupsForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: string },
  GroupMapping
> = {
  id: \\"teams/list-idp-groups-for-org\\",
};

/**
 * List teams
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const list: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: number },
  Array<Team>
> = {
  id: \\"teams/list\\",
};

/**
 * Create a team
 * To create a team, the authenticated user must be a member or owner of \`{org}\`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \\"[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\\"
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of \`maintainers\`. For more information, see \\"[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\\".
 */
export const create: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The name of the team.
       */
      name: string;

      /**
       * The description of the team.
       */
      description?: string;

      /**
       * List GitHub IDs for organization members who will become team maintainers.
       */
      maintainers?: Array<string>;

      /**
       * The full name (e.g., \\"organization-name/repository-name\\") of repositories to add the team to.
       */
      repo_names?: Array<string>;

      /** 
* The level of privacy this team should have. The options are:  
**For a non-nested team:**  
\\\\* \`secret\` - only visible to organization owners and members of this team.  
\\\\* \`closed\` - visible to all members of this organization.  
Default: \`secret\`  
**For a parent or child team:**  
\\\\* \`closed\` - visible to all members of this organization.  
Default for child team: \`closed\`
*/
      privacy?: \\"secret\\" | \\"closed\\";

      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
       */
      permission?: \\"pull\\" | \\"push\\";

      /**
       * The ID of a team to set as the parent team.
       */
      parent_team_id?: number;
    };
  },
  TeamFull
> = {
  id: \\"teams/create\\",
};

/**
 * Get a team by name
 * Gets a team using the team's \`slug\`. GitHub generates the \`slug\` from the team \`name\`.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}\`.
 */
export const getByName: ApiHeroEndpoint<{ org: string; teamSlug: string }, TeamFull> = {
  id: \\"teams/get-by-name\\",
};

/**
 * Delete a team
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}\`.
 */
export const deleteInOrg: ApiHeroEndpoint<{ org: string; teamSlug: string }, void> = {
  id: \\"teams/delete-in-org\\",
};

/**
 * Update a team
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}\`.
 */
export const updateInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    body?: {
      /**
       * The name of the team.
       */
      name?: string;

      /**
       * The description of the team.
       */
      description?: string;

      /** 
* The level of privacy this team should have. Editing teams without specifying this parameter leaves \`privacy\` intact. When a team is nested, the \`privacy\` for parent teams cannot be \`secret\`. The options are:  
**For a non-nested team:**  
\\\\* \`secret\` - only visible to organization owners and members of this team.  
\\\\* \`closed\` - visible to all members of this organization.  
**For a parent or child team:**  
\\\\* \`closed\` - visible to all members of this organization.
*/
      privacy?: \\"secret\\" | \\"closed\\";

      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\";

      /**
       * The ID of a team to set as the parent team.
       */
      parent_team_id?: number;
    };
  },
  TeamFull
> = {
  id: \\"teams/update-in-org\\",
};

/**
 * List discussions
 * List all discussions on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions\`.
 */
export const listDiscussionsInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
    pinned?: string;
  },
  Array<TeamDiscussion>
> = {
  id: \\"teams/list-discussions-in-org\\",
};

/**
 * Create a discussion
 * Creates a new discussion post on a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/{org_id}/team/{team_id}/discussions\`.
 */
export const createDiscussionInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    body: {
      /**
       * The discussion post's title.
       */
      title: string;

      /**
       * The discussion post's body text.
       */
      body: string;

      /**
       * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to \`true\` to create a private post.
       */
      private?: boolean;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/create-discussion-in-org\\",
};

/**
 * Get a discussion
 * Get a specific discussion on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
 */
export const getDiscussionInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; discussionNumber: number },
  TeamDiscussion
> = {
  id: \\"teams/get-discussion-in-org\\",
};

/**
 * Delete a discussion
 * Delete a discussion from a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
 */
export const deleteDiscussionInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; discussionNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-in-org\\",
};

/**
 * Update a discussion
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
 */
export const updateDiscussionInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    body?: {
      /**
       * The discussion post's title.
       */
      title?: string;

      /**
       * The discussion post's body text.
       */
      body?: string;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/update-discussion-in-org\\",
};

/**
 * List discussion comments
 * List all comments on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments\`.
 */
export const listDiscussionCommentsInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<TeamDiscussionComment>
> = {
  id: \\"teams/list-discussion-comments-in-org\\",
};

/**
 * Create a discussion comment
 * Creates a new comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments\`.
 */
export const createDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/create-discussion-comment-in-org\\",
};

/**
 * Get a discussion comment
 * Get a specific comment on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
 */
export const getDiscussionCommentInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; discussionNumber: number; commentNumber: number },
  TeamDiscussionComment
> = {
  id: \\"teams/get-discussion-comment-in-org\\",
};

/**
 * Delete a discussion comment
 * Deletes a comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
 */
export const deleteDiscussionCommentInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; discussionNumber: number; commentNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-comment-in-org\\",
};

/**
 * Update a discussion comment
 * Edits the body text of a discussion comment. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
 */
export const updateDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/update-discussion-comment-in-org\\",
};

/**
 * List a connection between an external group and a team
 * Lists a connection between a team and an external group.
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const listLinkedExternalIdpGroupsToTeamForOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string },
  ExternalGroups
> = {
  id: \\"teams/list-linked-external-idp-groups-to-team-for-org\\",
};

/**
 * Remove the connection between an external group and a team
 * Deletes a connection between a team and an external group.
 *
 * You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const unlinkExternalIdpGroupFromTeamForOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string },
  void
> = {
  id: \\"teams/unlink-external-idp-group-from-team-for-org\\",
};

/**
 * Update the connection between an external group and a team
 * Creates a connection between a team and an external group.  Only one external group can be linked to a team.
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const linkExternalIdpGroupToTeamForOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    body: {
      /**
       * External Group Id
       */
      group_id: number;
    };
  },
  ExternalGroup
> = {
  id: \\"teams/link-external-idp-group-to-team-for-org\\",
};

/**
 * List pending team invitations
 * The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/invitations\`.
 */
export const listPendingInvitationsInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; perPage?: number; page?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"teams/list-pending-invitations-in-org\\",
};

/**
 * List team members
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const listMembersInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    role?: \\"member\\" | \\"maintainer\\" | \\"all\\";
    perPage?: number;
    page?: number;
  },
  Array<SimpleUser>
> = {
  id: \\"teams/list-members-in-org\\",
};

/**
 * Get team membership for a user
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
 *
 * **Note:**
 * The response contains the \`state\` of the membership and the member's \`role\`.
 *
 * The \`role\` for organization owners is set to \`maintainer\`. For more information about \`maintainer\` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const getMembershipForUserInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; username: string },
  TeamMembership
> = {
  id: \\"teams/get-membership-for-user-in-org\\",
};

/**
 * Add or update team membership for a user
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \\"pending\\" state until the person accepts the invitation, at which point the membership will transition to the \\"active\\" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
 */
export const addOrUpdateMembershipForUserInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    username: string;
    body?: {
      /**
       * The role that this user should have in the team.
       */
      role?: \\"member\\" | \\"maintainer\\";
    };
  },
  TeamMembership
> = {
  id: \\"teams/add-or-update-membership-for-user-in-org\\",
};

/**
 * Remove team membership for a user
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
 */
export const removeMembershipForUserInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; username: string },
  void
> = {
  id: \\"teams/remove-membership-for-user-in-org\\",
};

/**
 * List team projects
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/projects\`.
 */
export const listProjectsInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; perPage?: number; page?: number },
  Array<TeamProject>
> = {
  id: \\"teams/list-projects-in-org\\",
};

/**
 * Check team permissions for a project
 * Checks whether a team has \`read\`, \`write\`, or \`admin\` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
 */
export const checkPermissionsForProjectInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; projectId: number },
  TeamProject
> = {
  id: \\"teams/check-permissions-for-project-in-org\\",
};

/**
 * Add or update team project permissions
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have \`admin\` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
 */
export const addOrUpdateProjectPermissionsInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    projectId: number;
    body?: {
      /**
       * The permission to grant to the team for this project. Default: the team's \`permission\` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
       */
      permission?: \\"read\\" | \\"write\\" | \\"admin\\";
    } | null;
  },
  void
> = {
  id: \\"teams/add-or-update-project-permissions-in-org\\",
};

/**
 * Remove a project from a team
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have \`read\` access to both the team and project, or \`admin\` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
 */
export const removeProjectInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; projectId: number },
  void
> = {
  id: \\"teams/remove-project-in-org\\",
};

/**
 * List team repositories
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/repos\`.
 */
export const listReposInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; perPage?: number; page?: number },
  Array<MinimalRepository>
> = {
  id: \\"teams/list-repos-in-org\\",
};

/**
 * Check team permissions for a repository
 * Checks whether a team has \`admin\`, \`push\`, \`maintain\`, \`triage\`, or \`pull\` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`application/vnd.github.v3.repository+json\` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a \`404 Not Found\` response status.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
 */
export const checkPermissionsForRepoInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; owner: string; repo: string },
  TeamRepository
> = {
  id: \\"teams/check-permissions-for-repo-in-org\\",
};

/**
 * Add or update team repository permissions
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a \`422 Unprocessable Entity\` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
 *
 * For more information about the permission levels, see \\"[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\\".
 */
export const addOrUpdateRepoPermissionsInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    owner: string;
    repo: string;
    body?: {
      /**
       * The permission to grant the team on this repository. In addition to the enumerated values, you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's \`permission\` attribute will be used to determine what permission to grant the team on this repository.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\" | \\"maintain\\" | \\"triage\\";
    };
  },
  void
> = {
  id: \\"teams/add-or-update-repo-permissions-in-org\\",
};

/**
 * Remove a repository from a team
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
 */
export const removeRepoInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; owner: string; repo: string },
  void
> = {
  id: \\"teams/remove-repo-in-org\\",
};

/**
 * List IdP groups for a team
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings\`.
 */
export const listIdpGroupsInOrg: ApiHeroEndpoint<{ org: string; teamSlug: string }, GroupMapping> =
  {
    id: \\"teams/list-idp-groups-in-org\\",
  };

/**
 * Create or update IdP group connections
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty \`groups\` array will remove all connections for a team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings\`.
 */
export const createOrUpdateIdpGroupConnectionsInOrg: ApiHeroEndpoint<
  {
    org: string;
    teamSlug: string;
    body: {
      /**
       * The IdP groups you want to connect to a GitHub team. When updating, the new \`groups\` object will replace the original one. You must include any existing groups that you don't want to remove.
       */
      groups?: Array<{
        /**
         * ID of the IdP group.
         */
        group_id: string;

        /**
         * Name of the IdP group.
         */
        group_name: string;

        /**
         * Description of the IdP group.
         */
        group_description: string;
      }>;
    };
  },
  GroupMapping
> = {
  id: \\"teams/create-or-update-idp-group-connections-in-org\\",
};

/**
 * List child teams
 * Lists the child teams of the team specified by \`{team_slug}\`.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/teams\`.
 */
export const listChildInOrg: ApiHeroEndpoint<
  { org: string; teamSlug: string; perPage?: number; page?: number },
  Array<Team>
> = {
  id: \\"teams/list-child-in-org\\",
};

/** * @deprecated
 * Get a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const getLegacy: ApiHeroEndpoint<{ teamId: number }, TeamFull> = {
  id: \\"teams/get-legacy\\",
};

/** * @deprecated
 * Delete a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const deleteLegacy: ApiHeroEndpoint<{ teamId: number }, void> = {
  id: \\"teams/delete-legacy\\",
};

/** * @deprecated
 * Update a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the \`privacy\` for parent teams cannot be \`secret\`.
 */
export const updateLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    body: {
      /**
       * The name of the team.
       */
      name: string;

      /**
       * The description of the team.
       */
      description?: string;

      /** 
* The level of privacy this team should have. Editing teams without specifying this parameter leaves \`privacy\` intact. The options are:  
**For a non-nested team:**  
\\\\* \`secret\` - only visible to organization owners and members of this team.  
\\\\* \`closed\` - visible to all members of this organization.  
**For a parent or child team:**  
\\\\* \`closed\` - visible to all members of this organization.
*/
      privacy?: \\"secret\\" | \\"closed\\";

      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\";

      /**
       * The ID of a team to set as the parent team.
       */
      parent_team_id?: number;
    };
  },
  TeamFull
> = {
  id: \\"teams/update-legacy\\",
};

/** * @deprecated
 * List discussions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List discussions\`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listDiscussionsLegacy: ApiHeroEndpoint<
  { teamId: number; direction?: \\"asc\\" | \\"desc\\"; perPage?: number; page?: number },
  Array<TeamDiscussion>
> = {
  id: \\"teams/list-discussions-legacy\\",
};

/** * @deprecated
 * Create a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create a discussion\`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    body: {
      /**
       * The discussion post's title.
       */
      title: string;

      /**
       * The discussion post's body text.
       */
      body: string;

      /**
       * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to \`true\` to create a private post.
       */
      private?: boolean;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/create-discussion-legacy\\",
};

/** * @deprecated
 * Get a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getDiscussionLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number },
  TeamDiscussion
> = {
  id: \\"teams/get-discussion-legacy\\",
};

/** * @deprecated
 * Delete a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Delete a discussion\`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteDiscussionLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-legacy\\",
};

/** * @deprecated
 * Update a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const updateDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    body?: {
      /**
       * The discussion post's title.
       */
      title?: string;

      /**
       * The discussion post's body text.
       */
      body?: string;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/update-discussion-legacy\\",
};

/** * @deprecated
 * List discussion comments (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listDiscussionCommentsLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    page?: number;
  },
  Array<TeamDiscussionComment>
> = {
  id: \\"teams/list-discussion-comments-legacy\\",
};

/** * @deprecated
 * Create a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/create-discussion-comment-legacy\\",
};

/** * @deprecated
 * Get a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getDiscussionCommentLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number; commentNumber: number },
  TeamDiscussionComment
> = {
  id: \\"teams/get-discussion-comment-legacy\\",
};

/** * @deprecated
 * Delete a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteDiscussionCommentLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number; commentNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-comment-legacy\\",
};

/** * @deprecated
 * Update a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const updateDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/update-discussion-comment-legacy\\",
};

/** * @deprecated
 * List pending team invitations (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List pending team invitations\`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
 */
export const listPendingInvitationsLegacy: ApiHeroEndpoint<
  { teamId: number; perPage?: number; page?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"teams/list-pending-invitations-legacy\\",
};

/** * @deprecated
 * List team members (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List team members\`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const listMembersLegacy: ApiHeroEndpoint<
  { teamId: number; role?: \\"member\\" | \\"maintainer\\" | \\"all\\"; perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"teams/list-members-legacy\\",
};

/** * @deprecated
 * Get team member (Legacy)
 * The \\"Get team member\\" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const getMemberLegacy: ApiHeroEndpoint<{ teamId: number; username: string }, void> = {
  id: \\"teams/get-member-legacy\\",
};

/** * @deprecated
 * Add team member (Legacy)
 * The \\"Add team member\\" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const addMemberLegacy: ApiHeroEndpoint<{ teamId: number; username: string }, void> = {
  id: \\"teams/add-member-legacy\\",
};

/** * @deprecated
 * Remove team member (Legacy)
 * The \\"Remove team member\\" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 */
export const removeMemberLegacy: ApiHeroEndpoint<{ teamId: number; username: string }, void> = {
  id: \\"teams/remove-member-legacy\\",
};

/** * @deprecated
 * Get team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:**
 * The response contains the \`state\` of the membership and the member's \`role\`.
 *
 * The \`role\` for organization owners is set to \`maintainer\`. For more information about \`maintainer\` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const getMembershipForUserLegacy: ApiHeroEndpoint<
  { teamId: number; username: string },
  TeamMembership
> = {
  id: \\"teams/get-membership-for-user-legacy\\",
};

/** * @deprecated
 * Add or update team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \\"pending\\" state until the user accepts the invitation, at which point the membership will transition to the \\"active\\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const addOrUpdateMembershipForUserLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    username: string;
    body?: {
      /**
       * The role that this user should have in the team.
       */
      role?: \\"member\\" | \\"maintainer\\";
    };
  },
  TeamMembership
> = {
  id: \\"teams/add-or-update-membership-for-user-legacy\\",
};

/** * @deprecated
 * Remove team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 */
export const removeMembershipForUserLegacy: ApiHeroEndpoint<
  { teamId: number; username: string },
  void
> = {
  id: \\"teams/remove-membership-for-user-legacy\\",
};

/** * @deprecated
 * List team projects (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List team projects\`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const listProjectsLegacy: ApiHeroEndpoint<
  { teamId: number; perPage?: number; page?: number },
  Array<TeamProject>
> = {
  id: \\"teams/list-projects-legacy\\",
};

/** * @deprecated
 * Check team permissions for a project (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has \`read\`, \`write\`, or \`admin\` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const checkPermissionsForProjectLegacy: ApiHeroEndpoint<
  { teamId: number; projectId: number },
  TeamProject
> = {
  id: \\"teams/check-permissions-for-project-legacy\\",
};

/** * @deprecated
 * Add or update team project permissions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have \`admin\` permissions for the project. The project and team must be part of the same organization.
 */
export const addOrUpdateProjectPermissionsLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    projectId: number;
    body?: {
      /**
       * The permission to grant to the team for this project. Default: the team's \`permission\` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
       */
      permission?: \\"read\\" | \\"write\\" | \\"admin\\";
    };
  },
  void
> = {
  id: \\"teams/add-or-update-project-permissions-legacy\\",
};

/** * @deprecated
 * Remove a project from a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have \`read\` access to both the team and project, or \`admin\` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const removeProjectLegacy: ApiHeroEndpoint<{ teamId: number; projectId: number }, void> = {
  id: \\"teams/remove-project-legacy\\",
};

/** * @deprecated
 * List team repositories (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const listReposLegacy: ApiHeroEndpoint<
  { teamId: number; perPage?: number; page?: number },
  Array<MinimalRepository>
> = {
  id: \\"teams/list-repos-legacy\\",
};

/** * @deprecated
 * Check team permissions for a repository (Legacy)
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const checkPermissionsForRepoLegacy: ApiHeroEndpoint<
  { teamId: number; owner: string; repo: string },
  TeamRepository
> = {
  id: \\"teams/check-permissions-for-repo-legacy\\",
};

/** * @deprecated
 * Add or update team repository permissions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \\"[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)\\" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a \`422 Unprocessable Entity\` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const addOrUpdateRepoPermissionsLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    owner: string;
    repo: string;
    body?: {
      /**
       * The permission to grant the team on this repository. If no permission is specified, the team's \`permission\` attribute will be used to determine what permission to grant the team on this repository.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\";
    };
  },
  void
> = {
  id: \\"teams/add-or-update-repo-permissions-legacy\\",
};

/** * @deprecated
 * Remove a repository from a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const removeRepoLegacy: ApiHeroEndpoint<
  { teamId: number; owner: string; repo: string },
  void
> = {
  id: \\"teams/remove-repo-legacy\\",
};

/** * @deprecated
 * List IdP groups for a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List IdP groups for a team\`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 */
export const listIdpGroupsForLegacy: ApiHeroEndpoint<{ teamId: number }, GroupMapping> = {
  id: \\"teams/list-idp-groups-for-legacy\\",
};

/** * @deprecated
 * Create or update IdP group connections (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create or update IdP group connections\`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty \`groups\` array will remove all connections for a team.
 */
export const createOrUpdateIdpGroupConnectionsLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    body: {
      /**
       * The IdP groups you want to connect to a GitHub team. When updating, the new \`groups\` object will replace the original one. You must include any existing groups that you don't want to remove.
       */
      groups: Array<{
        /**
         * ID of the IdP group.
         */
        group_id: string;

        /**
         * Name of the IdP group.
         */
        group_name: string;

        /**
         * Description of the IdP group.
         */
        group_description: string;

        id?: string;

        name?: string;

        description?: string;
      }>;

      synced_at?: string;
    };
  },
  GroupMapping
> = {
  id: \\"teams/create-or-update-idp-group-connections-legacy\\",
};

/** * @deprecated
 * List child teams (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List child teams\`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const listChildLegacy: ApiHeroEndpoint<
  { teamId: number; perPage?: number; page?: number },
  Array<Team>
> = {
  id: \\"teams/list-child-legacy\\",
};

/**
 * List teams for the authenticated user
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires \`user\`, \`repo\`, or \`read:org\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<TeamFull>
> = {
  id: \\"teams/list-for-authenticated-user\\",
};
",
  "users.ts" => "import {
  Email,
  GpgKey,
  Hovercard,
  Key,
  KeySimple,
  PrivateUser,
  PublicUser,
  SimpleUser,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get the authenticated user
 * If the authenticated user is authenticated through basic authentication or OAuth with the \`user\` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the \`user\` scope, then the response lists only public profile information.
 */
export const getAuthenticated: ApiHeroEndpoint<never, PrivateUser | PublicUser> = {
  id: \\"users/get-authenticated\\",
};

/**
 * Update the authenticated user
 * **Note:** If your email is set to private and you send an \`email\` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const updateAuthenticated: ApiHeroEndpoint<
  {
    body?: {
      /**
       * The new name of the user.
       */
      name?: string;

      /**
       * The publicly visible email address of the user.
       */
      email?: string;

      /**
       * The new blog URL of the user.
       */
      blog?: string;

      /**
       * The new Twitter username of the user.
       */
      twitter_username?: string;

      /**
       * The new company of the user.
       */
      company?: string;

      /**
       * The new location of the user.
       */
      location?: string;

      /**
       * The new hiring availability of the user.
       */
      hireable?: boolean;

      /**
       * The new short biography of the user.
       */
      bio?: string;
    };
  },
  PrivateUser
> = {
  id: \\"users/update-authenticated\\",
};

/**
 * List users blocked by the authenticated user
 * List the users you've blocked on your personal account.
 */
export const listBlockedByAuthenticatedUser: ApiHeroEndpoint<never, Array<SimpleUser>> = {
  id: \\"users/list-blocked-by-authenticated-user\\",
};

/**
 * Check if a user is blocked by the authenticated user
 */
export const checkBlocked: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/check-blocked\\",
};

/**
 * Block a user
 */
export const block: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/block\\",
};

/**
 * Unblock a user
 */
export const unblock: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/unblock\\",
};

/**
 * Set primary email visibility for the authenticated user
 * Sets the visibility for your primary email addresses.
 */
export const setPrimaryEmailVisibilityForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * Denotes whether an email is publicly visible.
       */
      visibility: \\"public\\" | \\"private\\";
    };
  },
  Array<Email>
> = {
  id: \\"users/set-primary-email-visibility-for-authenticated-user\\",
};

/**
 * List email addresses for the authenticated user
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the \`user:email\` scope.
 */
export const listEmailsForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<Email>
> = {
  id: \\"users/list-emails-for-authenticated-user\\",
};

/**
 * Add an email address for the authenticated user
 * This endpoint is accessible with the \`user\` scope.
 */
export const addEmailForAuthenticatedUser: ApiHeroEndpoint<
  {
    body?:
      | {
          /**
           * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an \`array\` of emails addresses directly, but we recommend that you pass an object using the \`emails\` key.
           */
          emails: Array<string>;
        }
      | Array<string>
      | string;
  },
  Array<Email>
> = {
  id: \\"users/add-email-for-authenticated-user\\",
};

/**
 * Delete an email address for the authenticated user
 * This endpoint is accessible with the \`user\` scope.
 */
export const deleteEmailForAuthenticatedUser: ApiHeroEndpoint<
  {
    body?:
      | {
          /**
           * Email addresses associated with the GitHub user account.
           */
          emails: Array<string>;
        }
      | Array<string>
      | string;
  },
  void
> = {
  id: \\"users/delete-email-for-authenticated-user\\",
};

/**
 * List followers of the authenticated user
 * Lists the people following the authenticated user.
 */
export const listFollowersForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-followers-for-authenticated-user\\",
};

/**
 * List the people the authenticated user follows
 * Lists the people who the authenticated user follows.
 */
export const listFollowedByAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-followed-by-authenticated-user\\",
};

/**
 * Check if a person is followed by the authenticated user
 */
export const checkPersonIsFollowedByAuthenticated: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/check-person-is-followed-by-authenticated\\",
};

/**
 * Follow a user
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the \`user:follow\` scope.
 */
export const follow: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/follow\\",
};

/**
 * Unfollow a user
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the \`user:follow\` scope.
 */
export const unfollow: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/unfollow\\",
};

/**
 * List GPG keys for the authenticated user
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listGpgKeysForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<GpgKey>
> = {
  id: \\"users/list-gpg-keys-for-authenticated-user\\",
};

/**
 * Create a GPG key for the authenticated user
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least \`write:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const createGpgKeyForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * A descriptive name for the new key.
       */
      name?: string;

      /**
       * A GPG key in ASCII-armored format.
       */
      armored_public_key: string;
    };
  },
  GpgKey
> = {
  id: \\"users/create-gpg-key-for-authenticated-user\\",
};

/**
 * Get a GPG key for the authenticated user
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getGpgKeyForAuthenticatedUser: ApiHeroEndpoint<{ gpgKeyId: number }, GpgKey> = {
  id: \\"users/get-gpg-key-for-authenticated-user\\",
};

/**
 * Delete a GPG key for the authenticated user
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`admin:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteGpgKeyForAuthenticatedUser: ApiHeroEndpoint<{ gpgKeyId: number }, void> = {
  id: \\"users/delete-gpg-key-for-authenticated-user\\",
};

/**
 * List public SSH keys for the authenticated user
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listPublicSshKeysForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<Key>
> = {
  id: \\"users/list-public-ssh-keys-for-authenticated-user\\",
};

/**
 * Create a public SSH key for the authenticated user
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least \`write:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const createPublicSshKeyForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * A descriptive name for the new key.
       */
      title?: string;

      /**
       * The public SSH key to add to your GitHub account.
       */
      key: string;
    };
  },
  Key
> = {
  id: \\"users/create-public-ssh-key-for-authenticated-user\\",
};

/**
 * Get a public SSH key for the authenticated user
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getPublicSshKeyForAuthenticatedUser: ApiHeroEndpoint<{ keyId: number }, Key> = {
  id: \\"users/get-public-ssh-key-for-authenticated-user\\",
};

/**
 * Delete a public SSH key for the authenticated user
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`admin:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deletePublicSshKeyForAuthenticatedUser: ApiHeroEndpoint<{ keyId: number }, void> = {
  id: \\"users/delete-public-ssh-key-for-authenticated-user\\",
};

/**
 * List public email addresses for the authenticated user
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the \`user:email\` scope.
 */
export const listPublicEmailsForAuthenticatedUser: ApiHeroEndpoint<
  { perPage?: number; page?: number },
  Array<Email>
> = {
  id: \\"users/list-public-emails-for-authenticated-user\\",
};

/**
 * List users
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const list: ApiHeroEndpoint<{ since?: number; perPage?: number }, Array<SimpleUser>> = {
  id: \\"users/list\\",
};

/**
 * Get a user
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the \`Plan\` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See \\"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\\" for details about authentication. For an example response, see 'Response with GitHub plan information' below\\"
 *
 * The \`email\` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for \`email\`, then it will have a value of \`null\`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \\"[Emails API](https://docs.github.com/rest/reference/users#emails)\\".
 */
export const getByUsername: ApiHeroEndpoint<{ username: string }, PrivateUser | PublicUser> = {
  id: \\"users/get-by-username\\",
};

/**
 * List followers of a user
 * Lists the people following the specified user.
 */
export const listFollowersForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-followers-for-user\\",
};

/**
 * List the people a user follows
 * Lists the people who the specified user follows.
 */
export const listFollowingForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-following-for-user\\",
};

/**
 * Check if a user follows another user
 */
export const checkFollowingForUser: ApiHeroEndpoint<
  { username: string; targetUser: string },
  void
> = {
  id: \\"users/check-following-for-user\\",
};

/**
 * List GPG keys for a user
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const listGpgKeysForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<GpgKey>
> = {
  id: \\"users/list-gpg-keys-for-user\\",
};

/**
 * Get contextual information for a user
 * Provides hovercard information when authenticated through basic auth or OAuth with the \`repo\` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The \`subject_type\` and \`subject_id\` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about \`octocat\` who owns the \`Spoon-Knife\` repository via cURL, it would look like this:
 *
 * \`\`\`shell
 * curl -u username:token
 * https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * \`\`\`
 */
export const getContextForUser: ApiHeroEndpoint<
  {
    username: string;
    subjectType?: \\"organization\\" | \\"repository\\" | \\"issue\\" | \\"pull_request\\";
    subjectId?: string;
  },
  Hovercard
> = {
  id: \\"users/get-context-for-user\\",
};

/**
 * List public keys for a user
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const listPublicKeysForUser: ApiHeroEndpoint<
  { username: string; perPage?: number; page?: number },
  Array<KeySimple>
> = {
  id: \\"users/list-public-keys-for-user\\",
};
",
  "index.ts" => "import * as actions from \\"./actions\\";
import * as activity from \\"./activity\\";
import * as apps from \\"./apps\\";
import * as billing from \\"./billing\\";
import * as checks from \\"./checks\\";
import * as codeScanning from \\"./code-scanning\\";
import * as codesOfConduct from \\"./codes-of-conduct\\";
import * as codespaces from \\"./codespaces\\";
import * as emojis from \\"./emojis\\";
import * as enterpriseAdmin from \\"./enterprise-admin\\";
import * as dependabot from \\"./dependabot\\";
import * as dependencyGraph from \\"./dependency-graph\\";
import * as gists from \\"./gists\\";
import * as git from \\"./git\\";
import * as gitignore from \\"./gitignore\\";
import * as interactions from \\"./interactions\\";
import * as issues from \\"./issues\\";
import * as licenses from \\"./licenses\\";
import * as markdown from \\"./markdown\\";
import * as meta from \\"./meta\\";
import * as migrations from \\"./migrations\\";
import * as oauthAuthorizations from \\"./oauth-authorizations\\";
import * as oidc from \\"./oidc\\";
import * as orgs from \\"./orgs\\";
import * as packages from \\"./packages\\";
import * as projects from \\"./projects\\";
import * as pulls from \\"./pulls\\";
import * as rateLimit from \\"./rate-limit\\";
import * as reactions from \\"./reactions\\";
import * as repos from \\"./repos\\";
import * as scim from \\"./scim\\";
import * as search from \\"./search\\";
import * as secretScanning from \\"./secret-scanning\\";
import * as serverStatistics from \\"./server-statistics\\";
import * as teams from \\"./teams\\";
import * as users from \\"./users\\";

export {
  actions,
  activity,
  apps,
  billing,
  checks,
  codeScanning,
  codesOfConduct,
  codespaces,
  emojis,
  enterpriseAdmin,
  dependabot,
  dependencyGraph,
  gists,
  git,
  gitignore,
  interactions,
  issues,
  licenses,
  markdown,
  meta,
  migrations,
  oauthAuthorizations,
  oidc,
  orgs,
  packages,
  projects,
  pulls,
  rateLimit,
  reactions,
  repos,
  scim,
  search,
  secretScanning,
  serverStatistics,
  teams,
  users,
};

export * from \\"./@types\\";
",
}
`;

exports[`v3/petstore.json 1`] = `
Map {
  "@types.ts" => "export type ApiHeroEndpoint<Params, ResponseData> = { id: string; [key: string]: string | number };

export type Order = {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;

  /**
   * Order Status
   */
  status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
  complete?: boolean;
};

export type Customer = {
  id?: number;
  username?: string;
  address?: Array<Address>;
};

export type Address = {
  street?: string;
  city?: string;
  state?: string;
  zip?: string;
};

export type Category = {
  id?: number;
  name?: string;
};

export type User = {
  id?: number;
  username?: string;
  firstName?: string;

  /**
   * Please use firstName instead of lastName
   * @deprecated
   */
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;

  /**
   * User Status
   */
  userStatus?: number;
};

export type Tag = {
  id?: number;
  name?: string;
};

export type Pet = {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: Array<string>;
  tags?: Array<Tag>;

  /**
   * pet status in the store
   */
  status?: \\"available\\" | \\"pending\\" | \\"sold\\";
};

export type ApiResponse = {
  code?: number;
  type?: string;
  message?: string;
};
",
  "pet.ts" => "import { ApiResponse, Pet, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Add a new pet to the store
 */
export const addPet: ApiHeroEndpoint<{ body: Pet }, Pet> = {
  id: \\"addPet\\",
};

/**
 * Update an existing pet
 * Update an existing pet by Id
 */
export const updatePet: ApiHeroEndpoint<{ body: Pet }, Pet> = {
  id: \\"updatePet\\",
};

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus: ApiHeroEndpoint<
  { status?: \\"available\\" | \\"pending\\" | \\"sold\\" },
  Array<Pet>
> = {
  id: \\"findPetsByStatus\\",
};

/**
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags: ApiHeroEndpoint<{ tags?: Array<string> }, Array<Pet>> = {
  id: \\"findPetsByTags\\",
};

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById: ApiHeroEndpoint<{ petId: number }, Pet> = {
  id: \\"getPetById\\",
};

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm: ApiHeroEndpoint<
  { petId: number; name?: string; status?: string },
  void
> = {
  id: \\"updatePetWithForm\\",
};

/**
 * Deletes a pet
 */
export const deletePet: ApiHeroEndpoint<{ petId: number; apiKey?: string }, void> = {
  id: \\"deletePet\\",
};

/**
 * uploads an image
 */
export const uploadFile: ApiHeroEndpoint<
  { petId: number; additionalMetadata?: string; file?: ReadableStream },
  ApiResponse
> = {
  id: \\"uploadFile\\",
};
",
  "store.ts" => "import { Order, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory: ApiHeroEndpoint<never, Record<string, number>> = {
  id: \\"getInventory\\",
};

/**
 * Place an order for a pet
 * Place a new order in the store
 */
export const placeOrder: ApiHeroEndpoint<{ body?: Order }, Order> = {
  id: \\"placeOrder\\",
};

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById: ApiHeroEndpoint<{ orderId: number }, Order> = {
  id: \\"getOrderById\\",
};

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder: ApiHeroEndpoint<{ orderId: number }, void> = {
  id: \\"deleteOrder\\",
};
",
  "user.ts" => "import { User, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser: ApiHeroEndpoint<{ body?: User }, User> = {
  id: \\"createUser\\",
};

/**
 * Creates list of users with given input array
 */
export const createUsersWithListInput: ApiHeroEndpoint<{ body?: Array<User> }, User | any> = {
  id: \\"createUsersWithListInput\\",
};

/**
 * Logs user into the system
 */
export const loginUser: ApiHeroEndpoint<{ username?: string; password?: string }, string> = {
  id: \\"loginUser\\",
};

/**
 * Logs out current logged in user session
 */
export const logoutUser: ApiHeroEndpoint<never, any> = {
  id: \\"logoutUser\\",
};

/**
 * Get user by user name
 */
export const getUserByName: ApiHeroEndpoint<{ username: string }, User> = {
  id: \\"getUserByName\\",
};

/**
 * Update user
 * This can only be done by the logged in user.
 */
export const updateUser: ApiHeroEndpoint<{ username: string; body?: User }, any> = {
  id: \\"updateUser\\",
};

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"deleteUser\\",
};
",
  "index.ts" => "import * as pet from \\"./pet\\";
import * as store from \\"./store\\";
import * as user from \\"./user\\";

export { pet, store, user };

export * from \\"./@types\\";
",
}
`;

exports[`v3/petstore.json with additional options 1`] = `
Map {
  "@types.ts" => "export type ApiHeroEndpoint<Params, ResponseData> = { id: string; [key: string]: string | number };

export type Order = {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;

  /**
   * Order Status
   */
  status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
  complete?: boolean;
};

export type Customer = {
  id?: number;
  username?: string;
  address?: Array<Address>;
};

export type Address = {
  street?: string;
  city?: string;
  state?: string;
  zip?: string;
};

export type Category = {
  id?: number;
  name?: string;
};

export type User = {
  id?: number;
  username?: string;
  firstName?: string;

  /**
   * Please use firstName instead of lastName
   * @deprecated
   */
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;

  /**
   * User Status
   */
  userStatus?: number;
};

export type Tag = {
  id?: number;
  name?: string;
};

export type Pet = {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: Array<string>;
  tags?: Array<Tag>;

  /**
   * pet status in the store
   */
  status?: \\"available\\" | \\"pending\\" | \\"sold\\";
};

export type ApiResponse = {
  code?: number;
  type?: string;
  message?: string;
};
",
  "pet.ts" => "import { ApiHeroEndpoint } from \\"@apihero/endpoint\\";
import { ApiResponse, Pet, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Add a new pet to the store
 */
export const addPet: ApiHeroEndpoint<{ body: Pet }, Pet> = {
  id: \\"addPet\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Update an existing pet
 * Update an existing pet by Id
 */
export const updatePet: ApiHeroEndpoint<{ body: Pet }, Pet> = {
  id: \\"updatePet\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus: ApiHeroEndpoint<
  { status?: \\"available\\" | \\"pending\\" | \\"sold\\" },
  Array<Pet>
> = {
  id: \\"findPetsByStatus\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags: ApiHeroEndpoint<{ tags?: Array<string> }, Array<Pet>> = {
  id: \\"findPetsByTags\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById: ApiHeroEndpoint<{ petId: number }, Pet> = {
  id: \\"getPetById\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm: ApiHeroEndpoint<
  { petId: number; name?: string; status?: string },
  void
> = {
  id: \\"updatePetWithForm\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Deletes a pet
 */
export const deletePet: ApiHeroEndpoint<{ petId: number; apiKey?: string }, void> = {
  id: \\"deletePet\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * uploads an image
 */
export const uploadFile: ApiHeroEndpoint<
  { petId: number; additionalMetadata?: string; file?: ReadableStream },
  ApiResponse
> = {
  id: \\"uploadFile\\",
  clientId: \\"github\\",
  count: 12,
};
",
  "store.ts" => "import { ApiHeroEndpoint } from \\"@apihero/endpoint\\";
import { Order, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory: ApiHeroEndpoint<never, Record<string, number>> = {
  id: \\"getInventory\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Place an order for a pet
 * Place a new order in the store
 */
export const placeOrder: ApiHeroEndpoint<{ body?: Order }, Order> = {
  id: \\"placeOrder\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById: ApiHeroEndpoint<{ orderId: number }, Order> = {
  id: \\"getOrderById\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder: ApiHeroEndpoint<{ orderId: number }, void> = {
  id: \\"deleteOrder\\",
  clientId: \\"github\\",
  count: 12,
};
",
  "user.ts" => "import { ApiHeroEndpoint } from \\"@apihero/endpoint\\";
import { User, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser: ApiHeroEndpoint<{ body?: User }, User> = {
  id: \\"createUser\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Creates list of users with given input array
 */
export const createUsersWithListInput: ApiHeroEndpoint<{ body?: Array<User> }, User | any> = {
  id: \\"createUsersWithListInput\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Logs user into the system
 */
export const loginUser: ApiHeroEndpoint<{ username?: string; password?: string }, string> = {
  id: \\"loginUser\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Logs out current logged in user session
 */
export const logoutUser: ApiHeroEndpoint<never, any> = {
  id: \\"logoutUser\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Get user by user name
 */
export const getUserByName: ApiHeroEndpoint<{ username: string }, User> = {
  id: \\"getUserByName\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Update user
 * This can only be done by the logged in user.
 */
export const updateUser: ApiHeroEndpoint<{ username: string; body?: User }, any> = {
  id: \\"updateUser\\",
  clientId: \\"github\\",
  count: 12,
};

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"deleteUser\\",
  clientId: \\"github\\",
  count: 12,
};
",
  "index.ts" => "import * as pet from \\"./pet\\";
import * as store from \\"./store\\";
import * as user from \\"./user\\";

export { pet, store, user };

export * from \\"./@types\\";
",
}
`;

exports[`v3_1/github.json 1`] = `
Map {
  "@types.ts" => "export type ApiHeroEndpoint<Params, ResponseData> = { id: string; [key: string]: string | number };

/**
 * Information of a job execution in a workflow run
 */
export type Job = {
  /**
   * The id of the job.
   */
  id: number;
  url: string;

  /**
   * The name of the job.
   */
  name: string;

  /**
   * Steps in this job.
   */
  steps?: Array<{
    /**
     * The name of the job.
     */
    name: string;

    number: number;

    /**
     * The phase of the lifecycle that the job is currently in.
     */
    status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";

    /**
     * The outcome of the job.
     */
    conclusion: string;

    /**
     * The time that the step started, in ISO 8601 format.
     */
    started_at?: string;

    /**
     * The time that the job finished, in ISO 8601 format.
     */
    completed_at?: string;
  }>;

  /**
   * Labels for the workflow job. Specified by the \\"runs_on\\" attribute in the action's workflow file.
   */
  labels: Array<string>;

  /**
   * The id of the associated workflow run.
   */
  run_id: number;

  /**
   * The phase of the lifecycle that the job is currently in.
   */
  status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
  node_id: string;
  run_url: string;

  /**
   * The SHA of the commit that is being run.
   */
  head_sha: string;
  html_url: string;

  /**
   * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_id: number;

  /**
   * The outcome of the job.
   */
  conclusion: string;

  /**
   * The time that the job started, in ISO 8601 format.
   */
  started_at: string;

  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number;

  /**
   * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_name: string;

  /**
   * The time that the job finished, in ISO 8601 format.
   */
  completed_at: string;
  check_run_url: string;

  /**
   * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_group_id: number;

  /**
   * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_group_name: string;
};

/**
 * Key
 */
export type Key = {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  read_only: boolean;
  created_at: string;
};

/**
 * Tag
 */
export type Tag = {
  name: string;
  commit: {
    sha: string;

    url: string;
  };
  node_id: string;
  tarball_url: string;
  zipball_url: string;
};

/**
 * Blob
 */
export type Blob = {
  sha: string;
  url: string;
  size: number;
  content: string;
  node_id: string;
  encoding: string;
  highlighted_content?: string;
};

/**
 * Feed
 */
export type Feed = {
  _links: {
    user: LinkWithType;

    timeline: LinkWithType;

    current_user?: LinkWithType;

    current_user_actor?: LinkWithType;

    current_user_public?: LinkWithType;

    security_advisories?: LinkWithType;

    current_user_organization?: LinkWithType;

    current_user_organizations?: Array<LinkWithType>;
  };
  user_url: string;
  timeline_url: string;
  current_user_url?: string;
  current_user_actor_url?: string;
  current_user_public_url?: string;
  security_advisories_url?: string;
  current_user_organization_url?: string;
  current_user_organization_urls?: Array<string>;
};

/**
 * Webhooks for repositories.
 */
export type Hook = {
  /**
   * Unique identifier of the webhook.
   */
  id: number;
  url: string;

  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name: string;
  type: string;

  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active: boolean;
  config: {
    url?: WebhookConfigUrl;

    room?: string;

    email?: string;

    token?: string;

    digest?: string;

    secret?: WebhookConfigSecret;

    password?: string;

    subdomain?: string;

    content_type?: WebhookConfigContentType;

    insecure_ssl?: WebhookConfigInsecureSsl;
  };

  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  events: Array<string>;
  ping_url: string;
  test_url: string;
  created_at: string;
  updated_at: string;
  last_response: HookResponse;
  deliveries_url?: string;
};

/**
 * Hypermedia Link
 */
export type Link = {
  href: string;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export type Page = {
  /**
   * The API address for accessing this Page resource.
   */
  url: string;

  /**
   * The Pages site's custom domain
   */
  cname: string;

  /**
   * Whether the GitHub Pages site is publicly visible. If set to \`true\`, the site is accessible to anyone on the internet. If set to \`false\`, the site will only be accessible to users who have at least \`read\` access to the repository that published the site.
   */
  public: boolean;
  source?: PagesSourceHash;

  /**
   * The status of the most recent build of the Page.
   */
  status: \\"built\\" | \\"building\\" | \\"errored\\";

  /**
   * The web address the Page can be accessed from.
   */
  html_url?: string;

  /**
   * The process in which the Page will be built.
   */
  build_type?: \\"legacy\\" | \\"workflow\\";

  /**
   * Whether the Page has a custom 404 page.
   */
  custom_404: boolean;

  /**
   * Whether https is enabled on the domain
   */
  https_enforced?: boolean;
  https_certificate?: PagesHttpsCertificate;

  /**
   * The state if the domain is verified
   */
  protected_domain_state?: \\"pending\\" | \\"verified\\" | \\"unverified\\";

  /**
   * The timestamp when a pending domain becomes unverified.
   */
  pending_domain_unverified_at?: string;
};

export type Root = {
  hub_url: string;
  keys_url: string;
  user_url: string;
  feeds_url: string;
  gists_url: string;
  emails_url: string;
  emojis_url: string;
  events_url: string;
  issues_url: string;
  starred_url: string;
  followers_url: string;
  following_url: string;
  rate_limit_url: string;
  repository_url: string;
  code_search_url: string;
  user_search_url: string;
  current_user_url: string;
  issue_search_url: string;
  label_search_url: string;
  organization_url: string;
  public_gists_url: string;
  topic_search_url?: string;
  commit_search_url: string;
  notifications_url: string;
  starred_gists_url: string;
  authorizations_url: string;
  repository_search_url: string;
  user_repositories_url: string;
  organization_teams_url: string;
  user_organizations_url: string;
  current_user_repositories_url: string;
  organization_repositories_url: string;
  current_user_authorizations_html_url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type Team = {
  id: number;
  url: string;
  name: string;
  slug: string;
  parent: null | TeamSimple;
  node_id: string;
  privacy?: string;
  html_url: string;
  permission: string;
  description: string;
  members_url: string;
  permissions?: {
    pull: boolean;

    push: boolean;

    admin: boolean;

    triage: boolean;

    maintain: boolean;
  };
  repositories_url: string;
};

/**
 * Actor
 */
export type Actor = {
  id: number;
  url: string;
  login: string;
  avatar_url: string;
  gravatar_id: string;
  display_login?: string;
};

/**
 * Email
 */
export type Email = {
  email: string;
  primary: boolean;
  verified: boolean;
  visibility: string;
};

/**
 * Event
 */
export type Event = {
  id: string;
  org?: Actor;
  repo: {
    id: number;

    url: string;

    name: string;
  };
  type: string;
  actor: Actor;
  public: boolean;
  payload: {
    issue?: Issue;

    pages?: Array<{
      sha?: string;

      title?: string;

      action?: string;

      summary?: string;

      html_url?: string;

      page_name?: string;
    }>;

    action?: string;

    comment?: IssueComment;
  };
  created_at: string;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type Issue = {
  id: number;

  /**
   * URL for the issue
   */
  url: string;

  /**
   * Contents of the issue
   */
  body?: string;
  user: null | SimpleUser;
  draft?: boolean;

  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;

  /**
   * Title of the issue
   */
  title: string;

  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: Array<
    | string
    | {
        id?: number;

        url?: string;

        name?: string;

        color?: string;

        default?: boolean;

        node_id?: string;

        description?: string;
      }
  >;
  locked: boolean;

  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  node_id: string;
  assignee: null | SimpleUser;
  comments: number;
  html_url: string;
  assignees?: any[];
  body_html?: string;
  body_text?: string;
  closed_at: string;
  closed_by?: null | SimpleUser;
  milestone: null | Milestone;
  reactions?: ReactionRollup;
  created_at: string;
  events_url: string;
  labels_url: string;
  repository?: Repository;
  updated_at: string;
  comments_url: string;
  pull_request?: {
    url: string;

    diff_url: string;

    html_url: string;

    merged_at?: string;

    patch_url: string;
  };

  /**
   * The reason for the current state
   */
  state_reason?: string;
  timeline_url?: string;
  repository_url: string;
  active_lock_reason?: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: null | Integration;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export type Label = {
  id: number;

  /**
   * URL for the label
   */
  url: string;

  /**
   * The name of the label.
   */
  name: string;

  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
  node_id: string;
  description: string;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export type Topic = {
  names: Array<string>;
};

/**
 * Commit
 */
export type Commit = {
  sha: string;
  url: string;
  files?: Array<DiffEntry>;
  stats?: {
    total?: number;

    additions?: number;

    deletions?: number;
  };
  author: null | SimpleUser;
  commit: {
    url: string;

    tree: {
      sha: string;

      url: string;
    };

    author: null | GitUser;

    message: string;

    committer: null | GitUser;

    verification?: Verification;

    comment_count: number;
  };
  node_id: string;
  parents: Array<{
    sha: string;

    url: string;

    html_url?: string;
  }>;
  html_url: string;
  committer: null | SimpleUser;
  comments_url: string;
};

/**
 * A repository import from an external source.
 */
export type Import = {
  url: string;
  vcs: string;
  status:
    | \\"auth\\"
    | \\"error\\"
    | \\"none\\"
    | \\"detecting\\"
    | \\"choose\\"
    | \\"auth_failed\\"
    | \\"importing\\"
    | \\"mapping\\"
    | \\"waiting_to_push\\"
    | \\"pushing\\"
    | \\"complete\\"
    | \\"setup\\"
    | \\"unknown\\"
    | \\"detection_found_multiple\\"
    | \\"detection_found_nothing\\"
    | \\"detection_needs_auth\\";
  message?: string;
  use_lfs?: boolean;

  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  html_url: string;
  svc_root?: string;
  svn_root?: string;
  authors_url: string;
  failed_step?: string;
  status_text?: string;
  commit_count?: number;
  push_percent?: number;
  tfvc_project?: string;
  authors_count?: number;
  error_message?: string;
  import_percent?: number;
  repository_url: string;
  has_large_files?: boolean;
  project_choices?: Array<{
    vcs?: string;

    human_name?: string;

    tfvc_project?: string;
  }>;
  large_files_size?: number;
  large_files_count?: number;
};

/**
 * A self hosted runner
 */
export type Runner = {
  /**
   * The id of the runner.
   */
  id: number;

  /**
   * The Operating System of the runner.
   */
  os: string;
  busy: boolean;

  /**
   * The name of the runner.
   */
  name: string;
  labels: Array<RunnerLabel>;

  /**
   * The status of the runner.
   */
  status: string;
};

/**
 * The status of a commit.
 */
export type Status = {
  id: number;
  url: string;
  state: string;
  context: string;
  creator: null | SimpleUser;
  node_id: string;
  avatar_url: string;
  created_at: string;
  target_url: string;
  updated_at: string;
  description: string;
};

/**
 * Thread
 */
export type Thread = {
  id: string;
  url: string;
  reason: string;
  unread: boolean;
  subject: {
    url: string;

    type: string;

    title: string;

    latest_comment_url: string;
  };
  repository: MinimalRepository;
  updated_at: string;
  last_read_at: string;
  subscription_url: string;
};

/**
 * Git references within a repository
 */
export type GitRef = {
  ref: string;
  url: string;
  object: {
    /**
     * SHA for the reference
     */
    sha: string;

    url: string;

    type: string;
  };
  node_id: string;
};

/**
 * Metadata for a Git tag
 */
export type GitTag = {
  sha: string;

  /**
   * Name of the tag
   */
  tag: string;

  /**
   * URL for the tag
   */
  url: string;
  object: {
    sha: string;

    url: string;

    type: string;
  };
  tagger: {
    date: string;

    name: string;

    email: string;
  };

  /**
   * Message describing the purpose of the tag
   */
  message: string;
  node_id: string;
  verification?: Verification;
};

/**
 * A unique encryption key
 */
export type GpgKey = {
  id: number;
  name?: string;
  emails: Array<{
    email?: string;

    verified?: boolean;
  }>;
  key_id: string;
  raw_key: string;
  revoked: boolean;
  subkeys: Array<{
    id?: number;

    emails?: Array<{}>;

    key_id?: string;

    raw_key?: string;

    revoked?: boolean;

    subkeys?: Array<{}>;

    can_sign?: boolean;

    created_at?: string;

    expires_at?: string;

    public_key?: string;

    can_certify?: boolean;

    primary_key_id?: number;

    can_encrypt_comms?: boolean;

    can_encrypt_storage?: boolean;
  }>;
  can_sign: boolean;
  created_at: string;
  expires_at: string;
  public_key: string;
  can_certify: boolean;
  primary_key_id: number;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
};

/**
 * License
 */
export type License = {
  key: string;
  url: string;
  body: string;
  name: string;
  node_id: string;
  spdx_id: string;
  featured: boolean;
  html_url: string;
  conditions: Array<string>;
  description: string;
  limitations: Array<string>;
  permissions: Array<string>;
  implementation: string;
};

/**
 * A software package
 */
export type Package = {
  /**
   * Unique identifier of the package.
   */
  id: number;
  url: string;

  /**
   * The name of the package.
   */
  name: string;
  owner?: null | SimpleUser;
  html_url: string;
  created_at: string;
  repository?: null | MinimalRepository;
  updated_at: string;
  visibility: \\"private\\" | \\"public\\";
  package_type: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";

  /**
   * The number of versions of the package.
   */
  version_count: number;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export type Project = {
  id: number;
  url: string;

  /**
   * Body of the project
   */
  body: string;

  /**
   * Name of the project
   */
  name: string;

  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  number: number;
  creator: null | SimpleUser;
  node_id: string;

  /**
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
  html_url: string;
  owner_url: string;
  created_at: string;
  updated_at: string;
  columns_url: string;

  /**
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: \\"read\\" | \\"write\\" | \\"admin\\" | \\"none\\";
};

/**
 * A release.
 */
export type Release = {
  id: number;
  url: string;
  body?: string;
  name: string;

  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  assets: Array<ReleaseAsset>;
  author: SimpleUser;
  node_id: string;
  html_url: string;

  /**
   * The name of the tag.
   */
  tag_name: string;
  body_html?: string;
  body_text?: string;
  reactions?: ReactionRollup;
  assets_url: string;
  created_at: string;

  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  published_at: string;

  /**
   * The URL of the release discussion.
   */
  discussion_url?: string;
  mentions_count?: number;

  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
};

export type Traffic = {
  count: number;
  uniques: number;
  timestamp: string;
};

/**
 * An artifact
 */
export type Artifact = {
  id: number;
  url: string;

  /**
   * The name of the artifact.
   */
  name: string;

  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  node_id: string;
  created_at: string;
  expires_at: string;
  updated_at: string;
  workflow_run?: any;

  /**
   * The size in bytes of the artifact.
   */
  size_in_bytes: number;
  archive_download_url: string;
};

/**
 * An autolink reference.
 */
export type Autolink = {
  id: number;

  /**
   * The prefix of a key that is linkified.
   */
  key_prefix: string;

  /**
   * A template for the target URL that is generated if a key was found.
   */
  url_template: string;

  /**
   * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference is a legacy autolink that only matches numeric characters.
   */
  is_alphanumeric?: boolean;
};

/**
 * The hierarchy between files in a Git repository.
 */
export type GitTree = {
  sha: string;
  url: string;

  /**
   * Objects specifying a tree structure
   */
  tree: Array<{
    sha?: string;

    url?: string;

    mode?: string;

    path?: string;

    size?: number;

    type?: string;
  }>;
  truncated: boolean;
};

/**
 * Metaproperties for Git author/committer information.
 */
export type GitUser = {
  date?: string;
  name?: string;
  email?: string;
};

/**
 * Language
 */
export type Language = Record<string, number>;

/**
 * A collection of related dependencies declared in a file or representing a logical group of dependencies.
 */
export type Manifest = {
  file?: {
    /**
     * The path of the manifest file relative to the root of the Git repository.
     */
    source_location?: string;
  };

  /**
   * The name of the manifest.
   */
  name: string;
  metadata?: Metadata;
  resolved?: {};
};

/**
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
export type Metadata = Record<string, string | number | boolean>;

/**
 * Org Hook
 */
export type OrgHook = {
  id: number;
  url: string;
  name: string;
  type: string;
  active: boolean;
  config: {
    url?: string;

    secret?: string;

    content_type?: string;

    insecure_ssl?: string;
  };
  events: Array<string>;
  ping_url: string;
  created_at: string;
  updated_at: string;
  deliveries_url?: string;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export type Reaction = {
  id: number;
  user: null | SimpleUser;

  /**
   * The reaction to use
   */
  content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  node_id: string;
  created_at: string;
};

/**
 * Create a new snapshot of a repository's dependencies.
 */
export type Snapshot = {
  job: {
    /**
     * The external ID of the job.
     */
    id: string;

    /**
     * The url for the job.
     */
    html_url?: string;

    /**
     * Correlator provides a key that is used to group snapshots submitted over time. Only the \\"latest\\" submitted snapshot for a given combination of \`job.correlator\` and \`detector.name\` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \\"wave\\" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
     */
    correlator: string;
  };

  /**
   * The repository branch that triggered this snapshot.
   */
  ref: string;

  /**
   * The commit SHA associated with this dependency snapshot.
   */
  sha: string;

  /**
   * The time at which the snapshot was scanned.
   */
  scanned: string;

  /**
   * The version of the repository snapshot submission.
   */
  version: number;

  /**
   * A description of the detector used.
   */
  detector: {
    /**
     * The url of the detector used.
     */
    url: string;

    /**
     * The name of the detector used.
     */
    name: string;

    /**
     * The version of the detector used.
     */
    version: string;
  };
  metadata?: Metadata;

  /**
   * A collection of package manifests
   */
  manifests?: Record<string, Manifest>;
};

/**
 * A GitHub Actions workflow
 */
export type Workflow = {
  id: number;
  url: string;
  name: string;
  path: string;
  state: \\"active\\" | \\"deleted\\" | \\"disabled_fork\\" | \\"disabled_inactivity\\" | \\"disabled_manually\\";
  node_id: string;
  html_url: string;
  badge_url: string;
  created_at: string;
  deleted_at?: string;
  updated_at: string;
};

/**
 * The REST API URL of the alert resource.
 */
export type AlertUrl = string;

/**
 * Base Gist
 */
export type BaseGist = {
  id: string;
  url: string;
  user: null | SimpleUser;
  files: Record<
    string,
    {
      size?: number;

      type?: string;

      raw_url?: string;

      filename?: string;

      language?: string;
    }
  >;
  forks?: Array<{}>;
  owner?: SimpleUser;
  public: boolean;
  history?: Array<{}>;
  node_id: string;
  comments: number;
  html_url: string;
  forks_url: string;
  truncated?: boolean;
  created_at: string;
  updated_at: string;
  commits_url: string;
  description: string;
  comments_url: string;
  git_pull_url: string;
  git_push_url: string;
};

/**
 * A check performed on the code of a given code change
 */
export type CheckRun = {
  /**
   * The id of the check.
   */
  id: number;
  app: null | Integration;
  url: string;

  /**
   * The name of the check.
   */
  name: string;
  output: {
    text: string;

    title: string;

    summary: string;

    annotations_url: string;

    annotations_count: number;
  };

  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
  node_id: string;

  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  html_url: string;
  conclusion:
    | \\"success\\"
    | \\"failure\\"
    | \\"neutral\\"
    | \\"cancelled\\"
    | \\"skipped\\"
    | \\"timed_out\\"
    | \\"action_required\\";
  deployment?: DeploymentSimple;
  started_at: string;
  check_suite: any;
  details_url: string;
  external_id: string;
  completed_at: string;
  pull_requests: Array<PullRequestMinimal>;
};

/**
 * A codespace.
 */
export type Codespace = {
  id: number;

  /**
   * API URL for this codespace.
   */
  url: string;

  /**
   * Automatically generated name of this codespace.
   */
  name: string;
  owner: SimpleUser;

  /**
   * State of this codespace.
   */
  state:
    | \\"Unknown\\"
    | \\"Created\\"
    | \\"Queued\\"
    | \\"Provisioning\\"
    | \\"Available\\"
    | \\"Awaiting\\"
    | \\"Unavailable\\"
    | \\"Deleted\\"
    | \\"Moved\\"
    | \\"Shutdown\\"
    | \\"Archived\\"
    | \\"Starting\\"
    | \\"ShuttingDown\\"
    | \\"Failed\\"
    | \\"Exporting\\"
    | \\"Updating\\"
    | \\"Rebuilding\\";
  machine: null | CodespaceMachine;

  /**
   * URL to access this codespace on the web.
   */
  web_url: string;

  /**
   * The Azure region where this codespace is located.
   */
  location: \\"EastUs\\" | \\"SouthEastAsia\\" | \\"WestEurope\\" | \\"WestUs2\\";

  /**
   * Whether the codespace was created from a prebuild.
   */
  prebuild: boolean;

  /**
   * API URL to stop this codespace.
   */
  stop_url: string;

  /**
   * API URL for the Pull Request associated with this codespace, if any.
   */
  pulls_url: string;

  /**
   * API URL to start this codespace.
   */
  start_url: string;
  created_at: string;

  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     */
    ref?: string;

    /**
     * The number of commits the local repository is ahead of the remote.
     */
    ahead?: number;

    /**
     * The number of commits the local repository is behind the remote.
     */
    behind?: number;

    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;

    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;
  };
  repository: MinimalRepository;
  updated_at: string;

  /**
   * Display name for this codespace.
   */
  display_name?: string;

  /**
   * Last known time this codespace was started.
   */
  last_used_at: string;

  /**
   * API URL to access available alternate machine types for this codespace.
   */
  machines_url: string;
  billable_owner: SimpleUser;

  /**
   * UUID identifying this codespace's environment.
   */
  environment_id: string;
  recent_folders: Array<string>;

  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   */
  devcontainer_path?: string;

  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean;

  /**
   * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  idle_timeout_notice?: string;
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: any[];
  };

  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   */
  idle_timeout_minutes: number;

  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string;
};

/**
 * Hovercard
 */
export type Hovercard = {
  contexts: Array<{
    message: string;

    octicon: string;
  }>;
};

/**
 * A migration.
 */
export type Migration = {
  id: number;
  url: string;
  guid: string;
  owner: null | SimpleUser;
  state: string;
  exclude?: Array<{}>;
  node_id: string;
  created_at: string;
  updated_at: string;
  archive_url?: string;
  repositories: Array<Repository>;
  exclude_git_data: boolean;
  exclude_metadata: boolean;
  exclude_releases: boolean;
  lock_repositories: boolean;
  org_metadata_only: boolean;
  exclude_attachments: boolean;
  exclude_owner_projects: boolean;
};

/**
 * A collection of related issues and pull requests.
 */
export type Milestone = {
  id: number;
  url: string;

  /**
   * The state of the milestone.
   */
  state: \\"open\\" | \\"closed\\";

  /**
   * The title of the milestone.
   */
  title: string;
  due_on: string;

  /**
   * The number of the milestone.
   */
  number: number;
  creator: null | SimpleUser;
  node_id: string;
  html_url: string;
  closed_at: string;
  created_at: string;
  labels_url: string;
  updated_at: string;
  description: string;
  open_issues: number;
  closed_issues: number;
};

/**
 * SCIM /Users provisioning endpoints
 */
export type ScimUser = {
  /**
   * Unique identifier of an external identity
   */
  id: string;
  meta: {
    created?: string;

    location?: string;

    lastModified?: string;

    resourceType?: string;
  };
  name: {
    formatted?: string;

    givenName: string;

    familyName: string;
  };

  /**
   * The active status of the User.
   */
  active: boolean;

  /**
   * user emails
   */
  emails: Array<{
    value: string;

    primary?: boolean;
  }>;

  /**
   * associated groups
   */
  groups?: Array<{}>;

  /**
   * SCIM schema used.
   */
  schemas: Array<string>;

  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;

  /**
   * The ID of the User.
   */
  externalId: string;

  /**
   * Set of operations to be performed
   */
  operations?: Array<{
    op: \\"add\\" | \\"remove\\" | \\"replace\\";

    path?: string;

    value?: string;
  }>;

  /**
   * The name of the user, suitable for display to end-users
   */
  displayName?: string;

  /**
   * The ID of the organization.
   */
  organization_id?: number;
};

/**
 * Stargazer
 */
export type Stargazer = {
  user: null | SimpleUser;
  starred_at: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamFull = {
  /**
   * Unique identifier of the team
   */
  id: number;

  /**
   * URL for the team
   */
  url: string;

  /**
   * Name of the team
   */
  name: string;
  slug: string;
  parent?: null | TeamSimple;

  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  node_id: string;

  /**
   * The level of privacy this team should have
   */
  privacy?: \\"closed\\" | \\"secret\\";
  html_url: string;
  created_at: string;

  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  updated_at: string;
  description: string;
  members_url: string;
  repos_count: number;
  organization: OrganizationFull;
  members_count: number;
  repositories_url: string;
};

/**
 * The status of auto merging a pull request.
 */
export type AutoMerge = any | null;

/**
 * A single package dependency.
 */
export type Dependency = {
  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   */
  scope?: \\"runtime\\" | \\"development\\";
  metadata?: Metadata;

  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   */
  package_url?: string;

  /**
   * Array of package-url (PURLs) of direct child dependencies.
   */
  dependencies?: Array<string>;

  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   */
  relationship?: \\"direct\\" | \\"indirect\\";
};

/**
 * An SSH key granting access to a single repository.
 */
export type DeployKey = {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  read_only: boolean;
  created_at: string;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export type Deployment = {
  /**
   * Unique identifier of the deployment
   */
  id: number;

  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   */
  ref: string;
  sha: string;
  url: string;

  /**
   * Parameter to specify a task to execute
   */
  task: string;
  creator: null | SimpleUser;
  node_id: string;
  payload: string;
  created_at: string;
  updated_at: string;
  description: string;

  /**
   * Name for the target deployment environment.
   */
  environment: string;
  statuses_url: string;
  repository_url: string;
  original_environment?: string;

  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean;

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean;
  performed_via_github_app?: null | Integration;
};

/**
 * Diff Entry
 */
export type DiffEntry = {
  sha: string;
  patch?: string;
  status: \\"added\\" | \\"removed\\" | \\"modified\\" | \\"renamed\\" | \\"copied\\" | \\"changed\\" | \\"unchanged\\";
  changes: number;
  raw_url: string;
  blob_url: string;
  filename: string;
  additions: number;
  deletions: number;
  contents_url: string;
  previous_filename?: string;
};

/**
 * An enterprise account
 */
export type Enterprise = {
  /**
   * Unique identifier of the enterprise
   */
  id: number;

  /**
   * The name of the enterprise.
   */
  name: string;

  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  node_id: string;
  html_url: string;
  avatar_url: string;
  created_at: string;
  updated_at: string;

  /**
   * A short description of the enterprise.
   */
  description?: string;

  /**
   * The enterprise's website URL.
   */
  website_url?: string;
};

/**
 * Low-level Git commit operations within a repository
 */
export type GitCommit = {
  /**
   * SHA for the commit
   */
  sha: string;
  url: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;
  };

  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Name of the git user
     */
    name: string;

    /**
     * Git email address of the user
     */
    email: string;
  };

  /**
   * Message describing the purpose of the commit
   */
  message: string;
  node_id: string;
  parents: Array<{
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;

    html_url: string;
  }>;
  html_url: string;

  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Name of the git user
     */
    name: string;

    /**
     * Git email address of the user
     */
    email: string;
  };
  verification: {
    reason: string;

    payload: string;

    verified: boolean;

    signature: string;
  };
};

/**
 * Key Simple
 */
export type KeySimple = {
  id: number;
  key: string;
};

/**
 * Page Build
 */
export type PageBuild = {
  url: string;
  error: {
    message: string;
  };
  commit: string;
  pusher: null | SimpleUser;
  status: string;
  duration: number;
  created_at: string;
  updated_at: string;
};

export type RateLimit = {
  used: number;
  limit: number;
  reset: number;
  remaining: number;
};

/**
 * A git repository
 */
export type Repository = {
  /**
   * Unique identifier of the repository
   */
  id: number;
  url: string;
  fork: boolean;

  /**
   * The name of the repository.
   */
  name: string;
  size: number;
  forks: number;
  owner: SimpleUser;
  topics?: Array<string>;
  git_url: string;
  license: null | LicenseSimple;
  node_id: string;

  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  ssh_url: string;
  svn_url: string;

  /**
   * Whether the repository is archived.
   */
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  homepage: string;
  html_url: string;
  keys_url: string;
  language: string;
  tags_url: string;
  watchers: number;
  blobs_url: string;
  clone_url: string;
  forks_url: string;
  full_name: string;
  has_pages: boolean;
  hooks_url: string;
  pulls_url: string;
  pushed_at: string;
  teams_url: string;
  trees_url: string;
  created_at: string;
  events_url: string;

  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  issues_url: string;
  labels_url: string;
  merges_url: string;
  mirror_url: string;
  starred_at?: string;
  updated_at: string;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  archive_url: string;
  commits_url: string;
  compare_url: string;
  description: string;
  forks_count: number;

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  open_issues: number;
  permissions?: {
    pull: boolean;

    push: boolean;

    admin: boolean;

    triage?: boolean;

    maintain?: boolean;
  };
  branches_url: string;
  comments_url: string;
  contents_url: string;
  git_refs_url: string;
  git_tags_url: string;

  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  organization?: null | SimpleUser;
  releases_url: string;
  statuses_url: string;

  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  assignees_url: string;
  downloads_url: string;

  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  languages_url: string;
  master_branch?: string;
  network_count?: number;

  /**
   * The default branch of the repository.
   */
  default_branch: string;
  milestones_url: string;
  stargazers_url: string;
  watchers_count: number;
  deployments_url: string;
  git_commits_url: string;
  subscribers_url: string;

  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  contributors_url: string;
  issue_events_url: string;
  stargazers_count: number;
  subscription_url: string;
  temp_clone_token?: string;
  collaborators_url: string;
  issue_comment_url: string;
  notifications_url: string;
  open_issues_count: number;
  subscribers_count?: number;

  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;

  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;

  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;

  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;
  template_repository?: any;

  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;

  /**
   * Whether a squash merge commit can use the pull request title as default.
   */
  use_squash_pr_title_as_default?: boolean;
};

/**
 * Scim Error
 */
export type ScimError = {
  detail?: string;
  status?: number;
  message?: string;
  schemas?: Array<string>;
  scimType?: string;
  documentation_url?: string;
};

/**
 * Short Blob
 */
export type ShortBlob = {
  sha: string;
  url: string;
};

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 */
export type WaitTimer = number;

/**
 * Basic Error
 */
export type BasicError = {
  url?: string;
  status?: string;
  message?: string;
  documentation_url?: string;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export type CheckSuite = {
  id: number;
  app: null | Integration;
  url: string;
  after: string;
  before: string;
  status: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
  node_id: string;

  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha: string;
  conclusion:
    | \\"success\\"
    | \\"failure\\"
    | \\"neutral\\"
    | \\"cancelled\\"
    | \\"skipped\\"
    | \\"timed_out\\"
    | \\"action_required\\";
  created_at: string;
  repository: MinimalRepository;
  updated_at: string;
  head_branch: string;
  head_commit: SimpleCommit;
  pull_requests: any[];
  rerequestable?: boolean;
  check_runs_url: string;
  runs_rerequestable?: boolean;
  latest_check_runs_count: number;
};

/**
 * Contributor
 */
export type Contributor = {
  id?: number;
  url?: string;
  name?: string;
  type: string;
  email?: string;
  login?: string;
  node_id?: string;
  html_url?: string;
  gists_url?: string;
  repos_url?: string;
  avatar_url?: string;
  events_url?: string;
  site_admin?: boolean;
  gravatar_id?: string;
  starred_url?: string;
  contributions: number;
  followers_url?: string;
  following_url?: string;
  organizations_url?: string;
  subscriptions_url?: string;
  received_events_url?: string;
};

/**
 * Details of a deployment environment
 */
export type Environment = {
  /**
   * The id of the environment.
   */
  id: number;
  url: string;

  /**
   * The name of the environment.
   */
  name: string;
  node_id: string;
  html_url: string;

  /**
   * The time that the environment was created, in ISO 8601 format.
   */
  created_at: string;

  /**
   * The time that the environment was last updated, in ISO 8601 format.
   */
  updated_at: string;
  protection_rules?: Array<
    | {
        id: number;

        type: string;

        node_id: string;

        wait_timer?: WaitTimer;
      }
    | {
        id: number;

        type: string;

        node_id: string;

        /**
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: Array<{
          type?: DeploymentReviewerType;

          reviewer?: SimpleUser | Team;
        }>;
      }
    | {
        id: number;

        type: string;

        node_id: string;
      }
  >;
  deployment_branch_policy?: DeploymentBranchPolicy;
};

/**
 * File Commit
 */
export type FileCommit = {
  commit: {
    sha?: string;

    url?: string;

    tree?: {
      sha?: string;

      url?: string;
    };

    author?: {
      date?: string;

      name?: string;

      email?: string;
    };

    message?: string;

    node_id?: string;

    parents?: Array<{
      sha?: string;

      url?: string;

      html_url?: string;
    }>;

    html_url?: string;

    committer?: {
      date?: string;

      name?: string;

      email?: string;
    };

    verification?: {
      reason?: string;

      payload?: string;

      verified?: boolean;

      signature?: string;
    };
  };
  content: any;
};

/**
 * Gist Commit
 */
export type GistCommit = {
  url: string;
  user: null | SimpleUser;
  version: string;
  committed_at: string;
  change_status: {
    total?: number;

    additions?: number;

    deletions?: number;
  };
};

/**
 * Gist Simple
 */
export type GistSimple = {
  id?: string;
  url?: string;
  user?: string;
  files?: Record<string, any | null>;

  /**
   * @deprecated
   */
  forks?: any[];
  owner?: SimpleUser;
  public?: boolean;

  /**
   * Gist
   */
  fork_of?: any;

  /**
   * @deprecated
   */
  history?: any[];
  node_id?: string;
  comments?: number;
  html_url?: string;
  forks_url?: string;
  truncated?: boolean;
  created_at?: string;
  updated_at?: string;
  commits_url?: string;
  description?: string;
  comments_url?: string;
  git_pull_url?: string;
  git_push_url?: string;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type Integration = {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  pem?: string;

  /**
   * The name of the GitHub app
   */
  name: string;

  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  owner: null | SimpleUser;

  /**
   * The list of events for the GitHub app
   */
  events: Array<string>;
  node_id: string;
  html_url: string;
  client_id?: string;
  created_at: string;
  updated_at: string;
  description: string;

  /**
   * The set of permissions for the GitHub app
   */
  permissions: Record<string, string>;
  external_url: string;
  client_secret?: string;
  webhook_secret?: string;

  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
};

/**
 * Issue Event
 */
export type IssueEvent = {
  id: number;
  url: string;
  actor: null | SimpleUser;
  event: string;
  issue?: null | Issue;
  label?: IssueEventLabel;
  rename?: IssueEventRename;
  node_id: string;
  assignee?: null | SimpleUser;
  assigner?: null | SimpleUser;
  commit_id: string;
  milestone?: IssueEventMilestone;
  commit_url: string;
  created_at: string;
  lock_reason?: string;
  project_card?: IssueEventProjectCard;
  requested_team?: Team;
  dismissed_review?: IssueEventDismissedReview;
  review_requester?: null | SimpleUser;
  author_association?: AuthorAssociation;
  requested_reviewer?: null | SimpleUser;
  performed_via_github_app?: null | Integration;
};

/**
 * Public User
 */
export type PublicUser = {
  id: number;
  bio: string;
  url: string;
  blog: string;
  name: string;
  plan?: {
    name: string;

    space: number;

    collaborators: number;

    private_repos: number;
  };
  type: string;
  email: string;
  login: string;
  company: string;
  node_id: string;
  hireable: boolean;
  html_url: string;
  location: string;
  followers: number;
  following: number;
  gists_url: string;
  repos_url: string;
  avatar_url: string;
  created_at: string;
  disk_usage?: number;
  events_url: string;
  site_admin: boolean;
  updated_at: string;
  gravatar_id: string;
  starred_url: string;
  public_gists: number;
  public_repos: number;
  suspended_at?: string;
  collaborators?: number;
  followers_url: string;
  following_url: string;
  private_gists?: number;
  twitter_username?: string;
  organizations_url: string;
  subscriptions_url: string;
  owned_private_repos?: number;
  received_events_url: string;
  total_private_repos?: number;
};

/**
 * Simple User
 */
export type SimpleUser = {
  id: number;
  url: string;
  name?: string;
  type: string;
  email?: string;
  login: string;
  node_id: string;
  html_url: string;
  gists_url: string;
  repos_url: string;
  avatar_url: string;
  events_url: string;
  site_admin: boolean;
  starred_at?: string;
  gravatar_id: string;
  starred_url: string;
  followers_url: string;
  following_url: string;
  organizations_url: string;
  subscriptions_url: string;
  received_events_url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamSimple = {
  /**
   * Unique identifier of the team
   */
  id: number;

  /**
   * URL for the team
   */
  url: string;

  /**
   * Name of the team
   */
  name: string;
  slug: string;

  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  node_id: string;

  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;

  /**
   * Permission that the team will have for its repositories
   */
  permission: string;

  /**
   * Description of the team
   */
  description: string;
  members_url: string;
  repositories_url: string;
};

/**
 * The security alert number.
 */
export type AlertNumber = number;

/**
 * Api Overview
 */
export type ApiOverview = {
  api?: Array<string>;
  git?: Array<string>;
  web?: Array<string>;
  hooks?: Array<string>;
  pages?: Array<string>;
  actions?: Array<string>;
  importer?: Array<string>;
  packages?: Array<string>;
  ssh_keys?: Array<string>;
  dependabot?: Array<string>;
  ssh_key_fingerprints?: {
    SHA256_DSA?: string;

    SHA256_RSA?: string;

    SHA256_ECDSA?: string;

    SHA256_ED25519?: string;
  };
  verifiable_password_authentication: boolean;
};

/**
 * Branch Short
 */
export type BranchShort = {
  name: string;
  commit: {
    sha: string;

    url: string;
  };
  protected: boolean;
};

/**
 * Collaborator
 */
export type Collaborator = {
  id: number;
  url: string;
  name?: string;
  type: string;
  email?: string;
  login: string;
  node_id: string;
  html_url: string;
  gists_url: string;
  repos_url: string;
  role_name: string;
  avatar_url: string;
  events_url: string;
  site_admin: boolean;
  gravatar_id: string;
  permissions?: {
    pull: boolean;

    push: boolean;

    admin: boolean;

    triage?: boolean;

    maintain?: boolean;
  };
  starred_url: string;
  followers_url: string;
  following_url: string;
  organizations_url: string;
  subscriptions_url: string;
  received_events_url: string;
};

/**
 * Content File
 */
export type ContentFile = {
  sha: string;
  url: string;
  name: string;
  path: string;
  size: number;
  type: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
  target?: string;
  content: string;
  git_url: string;
  encoding: string;
  html_url: string;
  download_url: string;
  submodule_git_url?: string;
};

/**
 * Content Tree
 */
export type ContentTree = {
  sha: string;
  url: string;
  name: string;
  path: string;
  size: number;
  type: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
  entries?: Array<{
    sha: string;

    url: string;

    name: string;

    path: string;

    size: number;

    type: string;

    _links: {
      git: string;

      html: string;

      self: string;
    };

    content?: string;

    git_url: string;

    html_url: string;

    download_url: string;
  }>;
  git_url: string;
  html_url: string;
  download_url: string;
};

/**
 * An object without any properties.
 */
export type EmptyObject = {};

/**
 * A comment made to a gist.
 */
export type GistComment = {
  id: number;
  url: string;

  /**
   * The comment text.
   */
  body: string;
  user: null | SimpleUser;
  node_id: string;
  created_at: string;
  updated_at: string;
  author_association: AuthorAssociation;
};

/**
 * Gist History
 */
export type GistHistory = {
  url?: string;
  user?: null | SimpleUser;
  version?: string;
  committed_at?: string;
  change_status?: {
    total?: number;

    additions?: number;

    deletions?: number;
  };
};

/**
 * Installation
 */
export type Installation = {
  /**
   * The ID of the installation.
   */
  id: number;
  app_id: number;
  events: Array<string>;
  account: SimpleUser | Enterprise;
  app_slug: string;
  html_url: string;

  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  created_at: string;
  updated_at: string;
  permissions: AppPermissions;
  target_type: string;
  suspended_at: string;
  suspended_by: null | SimpleUser;
  contact_email?: string;
  repositories_url: string;
  single_file_name: string;
  access_tokens_url: string;
  single_file_paths?: Array<string>;

  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: \\"all\\" | \\"selected\\";
  has_multiple_single_files?: boolean;
};

/**
 * Private User
 */
export type PrivateUser = {
  id: number;
  bio: string;
  url: string;
  blog: string;
  name: string;
  plan?: {
    name: string;

    space: number;

    collaborators: number;

    private_repos: number;
  };
  type: string;
  email: string;
  login: string;
  company: string;
  ldap_dn?: string;
  node_id: string;
  hireable: boolean;
  html_url: string;
  location: string;
  followers: number;
  following: number;
  gists_url: string;
  repos_url: string;
  avatar_url: string;
  created_at: string;
  disk_usage: number;
  events_url: string;
  site_admin: boolean;
  updated_at: string;
  gravatar_id: string;
  starred_url: string;
  public_gists: number;
  public_repos: number;
  suspended_at?: string;
  business_plus?: boolean;
  collaborators: number;
  followers_url: string;
  following_url: string;
  private_gists: number;
  twitter_username?: string;
  organizations_url: string;
  subscriptions_url: string;
  owned_private_repos: number;
  received_events_url: string;
  total_private_repos: number;
  two_factor_authentication: boolean;
};

/**
 * Project cards represent a scope of work.
 */
export type ProjectCard = {
  /**
   * The project card's ID
   */
  id: number;
  url: string;
  note: string;
  creator: null | SimpleUser;
  node_id: string;

  /**
   * Whether or not the card is archived
   */
  archived?: boolean;
  column_url: string;
  created_at: string;
  project_id?: string;
  updated_at: string;
  column_name?: string;
  content_url?: string;
  project_url: string;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export type PullRequest = {
  id: number;
  url: string;
  base: {
    ref: string;

    sha: string;

    repo: {
      id: number;

      url: string;

      fork: boolean;

      name: string;

      size: number;

      forks: number;

      owner: {
        id: number;

        url: string;

        type: string;

        login: string;

        node_id: string;

        html_url: string;

        gists_url: string;

        repos_url: string;

        avatar_url: string;

        events_url: string;

        site_admin: boolean;

        gravatar_id: string;

        starred_url: string;

        followers_url: string;

        following_url: string;

        organizations_url: string;

        subscriptions_url: string;

        received_events_url: string;
      };

      topics?: Array<string>;

      git_url: string;

      license: null | LicenseSimple;

      node_id: string;

      private: boolean;

      ssh_url: string;

      svn_url: string;

      archived: boolean;

      disabled: boolean;

      has_wiki: boolean;

      homepage: string;

      html_url: string;

      keys_url: string;

      language: string;

      tags_url: string;

      watchers: number;

      blobs_url: string;

      clone_url: string;

      forks_url: string;

      full_name: string;

      has_pages: boolean;

      hooks_url: string;

      pulls_url: string;

      pushed_at: string;

      teams_url: string;

      trees_url: string;

      created_at: string;

      events_url: string;

      has_issues: boolean;

      issues_url: string;

      labels_url: string;

      merges_url: string;

      mirror_url: string;

      updated_at: string;

      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;

      archive_url: string;

      commits_url: string;

      compare_url: string;

      description: string;

      forks_count: number;

      is_template?: boolean;

      open_issues: number;

      permissions?: {
        pull: boolean;

        push: boolean;

        admin: boolean;

        triage?: boolean;

        maintain?: boolean;
      };

      branches_url: string;

      comments_url: string;

      contents_url: string;

      git_refs_url: string;

      git_tags_url: string;

      has_projects: boolean;

      releases_url: string;

      statuses_url: string;

      allow_forking?: boolean;

      assignees_url: string;

      downloads_url: string;

      has_downloads: boolean;

      languages_url: string;

      master_branch?: string;

      default_branch: string;

      milestones_url: string;

      stargazers_url: string;

      watchers_count: number;

      deployments_url: string;

      git_commits_url: string;

      subscribers_url: string;

      contributors_url: string;

      issue_events_url: string;

      stargazers_count: number;

      subscription_url: string;

      temp_clone_token?: string;

      collaborators_url: string;

      issue_comment_url: string;

      notifications_url: string;

      open_issues_count: number;

      allow_merge_commit?: boolean;

      allow_rebase_merge?: boolean;

      allow_squash_merge?: boolean;
    };

    user: {
      id: number;

      url: string;

      type: string;

      login: string;

      node_id: string;

      html_url: string;

      gists_url: string;

      repos_url: string;

      avatar_url: string;

      events_url: string;

      site_admin: boolean;

      gravatar_id: string;

      starred_url: string;

      followers_url: string;

      following_url: string;

      organizations_url: string;

      subscriptions_url: string;

      received_events_url: string;
    };

    label: string;
  };
  body: string;
  head: {
    ref: string;

    sha: string;

    repo: any;

    user: {
      id: number;

      url: string;

      type: string;

      login: string;

      node_id: string;

      html_url: string;

      gists_url: string;

      repos_url: string;

      avatar_url: string;

      events_url: string;

      site_admin: boolean;

      gravatar_id: string;

      starred_url: string;

      followers_url: string;

      following_url: string;

      organizations_url: string;

      subscriptions_url: string;

      received_events_url: string;
    };

    label: string;
  };
  user: null | SimpleUser;

  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;

  /**
   * State of this Pull Request. Either \`open\` or \`closed\`.
   */
  state: \\"open\\" | \\"closed\\";

  /**
   * The title of the pull request.
   */
  title: string;
  _links: {
    html: Link;

    self: Link;

    issue: Link;

    commits: Link;

    comments: Link;

    statuses: Link;

    review_comment: Link;

    review_comments: Link;
  };
  labels: Array<{
    id: number;

    url: string;

    name: string;

    color: string;

    default: boolean;

    node_id: string;

    description: string;
  }>;
  locked: boolean;
  merged: boolean;

  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number: number;
  commits: number;
  node_id: string;
  assignee: null | SimpleUser;
  comments: number;
  diff_url: string;
  html_url: string;
  additions: number;
  assignees?: any[];
  closed_at: string;
  deletions: number;
  issue_url: string;
  mergeable: boolean;
  merged_at: string;
  merged_by: null | SimpleUser;
  milestone: null | Milestone;
  patch_url: string;
  auto_merge: AutoMerge;
  created_at: string;
  rebaseable?: boolean;
  updated_at: string;
  commits_url: string;
  comments_url: string;
  statuses_url: string;
  changed_files: number;
  mergeable_state: string;
  requested_teams?: any[];
  review_comments: number;
  merge_commit_sha: string;
  active_lock_reason?: string;
  author_association: AuthorAssociation;
  review_comment_url: string;
  requested_reviewers?: any[];
  review_comments_url: string;

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify: boolean;
};

/**
 * A label for a self hosted runner
 */
export type RunnerLabel = {
  /**
   * Unique identifier of the label.
   */
  id?: number;

  /**
   * Name of the label.
   */
  name: string;

  /**
   * The type of label. Read-only labels are applied automatically when the runner is configured.
   */
  type?: \\"read-only\\" | \\"custom\\";
};

/**
 * Short Branch
 */
export type ShortBranch = {
  name: string;
  commit: {
    sha: string;

    url: string;
  };
  protected: boolean;
  protection?: BranchProtection;
  protection_url?: string;
};

/**
 * A team's access to a project.
 */
export type TeamProject = {
  id: number;
  url: string;
  body: string;
  name: string;
  state: string;
  number: number;
  creator: SimpleUser;
  node_id: string;

  /**
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  html_url: string;
  owner_url: string;
  created_at: string;
  updated_at: string;
  columns_url: string;
  permissions: {
    read: boolean;

    admin: boolean;

    write: boolean;
  };

  /**
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;
};

export type Verification = {
  reason: string;
  payload: string;
  verified: boolean;
  signature: string;
};

/**
 * View Traffic
 */
export type ViewTraffic = {
  count: number;
  views: Array<Traffic>;
  uniques: number;
};

/**
 * An invocation of a workflow
 */
export type WorkflowRun = {
  /**
   * The ID of the workflow run.
   */
  id: number;

  /**
   * The URL to the workflow run.
   */
  url: string;

  /**
   * The name of the workflow run.
   */
  name?: string;

  /**
   * The full path of the workflow
   */
  path: string;
  actor?: SimpleUser;
  event: string;
  status: string;
  node_id: string;

  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   */
  head_sha: string;
  html_url: string;

  /**
   * The URL to the jobs for the workflow run.
   */
  jobs_url: string;

  /**
   * The URL to download the logs for the workflow run.
   */
  logs_url: string;

  /**
   * The URL to rerun the workflow run.
   */
  rerun_url: string;

  /**
   * The URL to cancel the workflow run.
   */
  cancel_url: string;
  conclusion: string;
  created_at: string;
  repository: MinimalRepository;

  /**
   * The auto incrementing run number for the workflow run.
   */
  run_number: number;
  updated_at: string;
  head_branch: string;
  head_commit: null | SimpleCommit;

  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number;

  /**
   * The ID of the parent workflow.
   */
  workflow_id: number;

  /**
   * The URL to the workflow.
   */
  workflow_url: string;

  /**
   * The URL to the artifacts for the workflow run.
   */
  artifacts_url: string;
  pull_requests: any[];

  /**
   * The ID of the associated check suite.
   */
  check_suite_id?: number;

  /**
   * The start time of the latest run. Resets on re-run.
   */
  run_started_at?: string;

  /**
   * The URL to the associated check suite.
   */
  check_suite_url: string;
  head_repository: MinimalRepository;
  triggering_actor?: SimpleUser;
  head_repository_id?: number;

  /**
   * The node ID of the associated check suite.
   */
  check_suite_node_id?: string;

  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   */
  previous_attempt_url?: string;
  referenced_workflows?: any[];
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export type Authorization = {
  id: number;
  app: {
    url: string;

    name: string;

    client_id: string;
  };
  url: string;
  note: string;
  user?: null | SimpleUser;
  token: string;

  /**
   * A list of scopes that this authorization is in.
   */
  scopes: any[];
  note_url: string;
  created_at: string;
  expires_at: string;
  updated_at: string;
  fingerprint: string;
  hashed_token: string;
  installation?: null | ScopedInstallation;
  token_last_eight: string;
};

/**
 * Clone Traffic
 */
export type CloneTraffic = {
  count: number;
  clones: Array<Traffic>;
  uniques: number;
};

/**
 * External Groups to be mapped to a team for membership
 */
export type GroupMapping = {
  /**
   * Array of groups to be mapped to this team
   */
  groups?: Array<{
    /**
     * synchronization status for this group mapping
     */
    status?: string;

    /**
     * The ID of the group
     */
    group_id: string;

    /**
     * the time of the last sync for this group-mapping
     */
    synced_at?: string;

    /**
     * The name of the group
     */
    group_name: string;

    /**
     * a description of the group
     */
    group_description: string;
  }>;
};

/**
 * Delivery made by a webhook.
 */
export type HookDelivery = {
  /**
   * Unique identifier of the delivery.
   */
  id: number;

  /**
   * The URL target of the delivery.
   */
  url?: string;

  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   */
  guid: string;

  /**
   * The event that triggered the delivery.
   */
  event: string;

  /**
   * The type of activity for the event that triggered the delivery.
   */
  action: string;

  /**
   * Description of the status of the attempted delivery
   */
  status: string;
  request: {
    /**
     * The request headers sent with the webhook delivery.
     */
    headers: any;

    /**
     * The webhook payload.
     */
    payload: any;
  };

  /**
   * Time spent delivering.
   */
  duration: number;
  response: {
    /**
     * The response headers received when the delivery was made.
     */
    headers: any;

    /**
     * The response payload received.
     */
    payload: string;
  };

  /**
   * Whether the delivery is a redelivery.
   */
  redelivery: boolean;

  /**
   * Status code received when delivery was made.
   */
  status_code: number;

  /**
   * Time when the delivery was delivered.
   */
  delivered_at: string;

  /**
   * The id of the repository associated with this event.
   */
  repository_id: number;

  /**
   * The id of the GitHub App installation associated with this event.
   */
  installation_id: number;
};

export type HookResponse = {
  code: number;
  status: string;
  message: string;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export type IssueComment = {
  /**
   * Unique identifier of the issue comment
   */
  id: number;

  /**
   * URL for the issue comment
   */
  url: string;

  /**
   * Contents of the issue comment
   */
  body?: string;
  user: null | SimpleUser;
  node_id: string;
  html_url: string;
  body_html?: string;
  body_text?: string;
  issue_url: string;
  reactions?: ReactionRollup;
  created_at: string;
  updated_at: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: null | Integration;
};

/**
 * Porter Author
 */
export type PorterAuthor = {
  id: number;
  url: string;
  name: string;
  email: string;
  remote_id: string;
  import_url: string;
  remote_name: string;
};

/**
 * Data related to a release.
 */
export type ReleaseAsset = {
  id: number;
  url: string;

  /**
   * The file name of the asset.
   */
  name: string;
  size: number;
  label: string;

  /**
   * State of the release asset.
   */
  state: \\"uploaded\\" | \\"open\\";
  node_id: string;
  uploader: null | SimpleUser;
  created_at: string;
  updated_at: string;
  content_type: string;
  download_count: number;
  browser_download_url: string;
};

/**
 * Simple Commit
 */
export type SimpleCommit = {
  id: string;
  author: any;
  message: string;
  tree_id: string;
  committer: any;
  timestamp: string;
};

/**
 * Set secrets for GitHub Actions.
 */
export type ActionsSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
};

/**
 * The GitHub URL of the alert resource.
 */
export type AlertHtmlUrl = string;

/**
 * Commit Comment
 */
export type CommitComment = {
  id: number;
  url: string;
  body: string;
  line: number;
  path: string;
  user: null | SimpleUser;
  node_id: string;
  html_url: string;
  position: number;
  commit_id: string;
  reactions?: ReactionRollup;
  created_at: string;
  updated_at: string;
  author_association: AuthorAssociation;
};

/**
 * Information about an external group's usage and its members
 */
export type ExternalGroup = {
  /**
   * An array of teams linked to this group
   */
  teams: Array<{
    /**
     * The id for a team
     */
    team_id: number;

    /**
     * The name of the team
     */
    team_name: string;
  }>;

  /**
   * An array of external members linked to this group
   */
  members: Array<{
    /**
     * The internal user ID of the identity
     */
    member_id: number;

    /**
     * The user display name/profile name
     */
    member_name: string;

    /**
     * An email attached to a user
     */
    member_email: string;

    /**
     * The handle/login for the user
     */
    member_login: string;
  }>;

  /**
   * The internal ID of the group
   */
  group_id: number;

  /**
   * The display name for the group
   */
  group_name: string;

  /**
   * The date when the group was last updated_at
   */
  updated_at?: string;
};

/**
 * License Simple
 */
export type LicenseSimple = {
  key: string;
  url: string;
  name: string;
  node_id: string;
  spdx_id: string;
  html_url?: string;
};

/**
 * Hypermedia Link with Type
 */
export type LinkWithType = {
  href: string;
  type: string;
};

/**
 * Org Membership
 */
export type OrgMembership = {
  url: string;

  /**
   * The user's membership type in the organization.
   */
  role: \\"admin\\" | \\"member\\" | \\"billing_manager\\";
  user: null | SimpleUser;

  /**
   * The state of the member in the organization. The \`pending\` state indicates the user has not yet accepted an invitation.
   */
  state: \\"active\\" | \\"pending\\";
  permissions?: {
    can_create_repository: boolean;
  };
  organization: OrganizationSimple;
  organization_url: string;
};

/**
 * Project columns contain cards of work.
 */
export type ProjectColumn = {
  /**
   * The unique identifier of the project column
   */
  id: number;
  url: string;

  /**
   * Name of the project column
   */
  name: string;
  node_id: string;
  cards_url: string;
  created_at: string;
  updated_at: string;
  project_url: string;
};

/**
 * Legacy Review Comment
 */
export type ReviewComment = {
  id: number;
  url: string;
  body: string;

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number;
  path: string;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  side?: \\"LEFT\\" | \\"RIGHT\\";
  user: null | SimpleUser;
  _links: {
    html: Link;

    self: Link;

    pull_request: Link;
  };
  node_id: string;
  html_url: string;
  position: number;
  body_html?: string;
  body_text?: string;
  commit_id: string;
  diff_hunk: string;
  reactions?: ReactionRollup;
  created_at: string;

  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: \\"LEFT\\" | \\"RIGHT\\";
  updated_at: string;

  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number;
  in_reply_to_id?: number;
  pull_request_url: string;
  original_position: number;
  author_association: AuthorAssociation;
  original_commit_id: string;

  /**
   * The original first line of the range for a multi-line comment.
   */
  original_start_line?: number;
  pull_request_review_id: number;
};

/**
 * SCIM User List
 */
export type ScimUserList = {
  /**
   * SCIM schema used.
   */
  schemas: Array<string>;
  Resources: Array<ScimUser>;
  startIndex: number;
  itemsPerPage: number;
  totalResults: number;
};

/**
 * Tag protection
 */
export type TagProtection = {
  id?: number;
  enabled?: boolean;
  pattern: string;
  created_at?: string;
  updated_at?: string;
};

/**
 * Configuration object of the webhook
 */
export type WebhookConfig = {
  url?: WebhookConfigUrl;
  secret?: WebhookConfigSecret;
  content_type?: WebhookConfigContentType;
  insecure_ssl?: WebhookConfigInsecureSsl;
};

/**
 * Workflow Usage
 */
export type WorkflowUsage = {
  billable: {
    MACOS?: {
      total_ms?: number;
    };

    UBUNTU?: {
      total_ms?: number;
    };

    WINDOWS?: {
      total_ms?: number;
    };
  };
};

/**
 * Whether GitHub Actions is enabled on the repository.
 */
export type ActionsEnabled = boolean;

/**
 * The permissions policy that controls the actions and reusable workflows that are allowed to run.
 */
export type AllowedActions = \\"all\\" | \\"local_only\\" | \\"selected\\";

/**
 * The permissions granted to the user-to-server access token.
 */
export type AppPermissions = {
  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
   */
  pages?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for checks on code.
   */
  checks?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
   */
  issues?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
   */
  actions?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for organization teams and members.
   */
  members?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage repository secrets.
   */
  secrets?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
   */
  contents?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
   */
  metadata?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for packages published to GitHub Packages.
   */
  packages?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for commit statuses.
   */
  statuses?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files.
   */
  workflows?: \\"write\\";

  /**
   * The level of permission to grant the access token for deployments and deployment statuses.
   */
  deployments?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage just a single file.
   */
  single_file?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for managing repository environments.
   */
  environments?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
   */
  pull_requests?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
   */
  administration?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts.
   */
  security_events?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository.
   */
  repository_hooks?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage team discussions and related comments.
   */
  team_discussions?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for viewing an organization's plan.
   */
  organization_plan?: \\"read\\";

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization.
   */
  organization_hooks?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards.
   */
  repository_projects?: \\"read\\" | \\"write\\" | \\"admin\\";

  /**
   * The level of permission to grant the access token to manage organization secrets.
   */
  organization_secrets?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage Dependabot alerts.
   */
  vulnerability_alerts?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages.
   */
  organization_packages?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage organization projects and projects beta (where available).
   */
  organization_projects?: \\"read\\" | \\"write\\" | \\"admin\\";

  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts.
   */
  secret_scanning_alerts?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization.
   */
  organization_user_blocking?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to manage access to an organization.
   */
  organization_administration?: \\"read\\" | \\"write\\";

  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
   */
  organization_self_hosted_runners?: \\"read\\" | \\"write\\";
};

export type AuditLogEvent = {
  org?: string;
  data?: {};
  name?: string;

  /**
   * The name of the repository.
   */
  repo?: string;
  team?: string;

  /**
   * The user that was affected by the action performed (if available).
   */
  user?: string;

  /**
   * The actor who performed the action.
   */
  actor?: string;
  emoji?: string;

  /**
   * The name of the action that was performed, for example \`user.login\` or \`repo.create\`.
   */
  action?: string;
  active?: boolean;
  config?: Array<{}>;
  events?: Array<{}>;
  org_id?: number;
  hook_id?: number;
  message?: string;

  /**
   * The id of the actor who performed the action.
   */
  actor_id?: number;
  business?: string;
  old_user?: string;
  read_only?: boolean;

  /**
   * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  \\"@timestamp\\"?: number;
  active_was?: boolean;
  config_was?: Array<{}>;

  /**
   * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  created_at?: number;

  /**
   * The name of the repository.
   */
  repository?: string;

  /**
   * The repository visibility, for example \`public\` or \`private\`.
   */
  visibility?: string;
  events_were?: Array<{}>;
  explanation?: string;
  fingerprint?: string;

  /**
   * A unique identifier for an audit event.
   */
  _document_id?: string;

  /**
   * The username of the account being blocked.
   */
  blocked_user?: string;
  content_type?: string;
  target_login?: string;
  actor_location?: {
    country_name?: string;
  };
  repository_public?: boolean;
  openssh_public_key?: string;

  /**
   * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol?: number;
  previous_visibility?: string;
  limited_availability?: boolean;
  deploy_key_fingerprint?: string;

  /**
   * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol_name?: string;
};

/**
 * Code Of Conduct
 */
export type CodeOfConduct = {
  key: string;
  url: string;
  body?: string;
  name: string;
  html_url: string;
};

/**
 * Commit Activity
 */
export type CommitActivity = {
  days: Array<number>;
  week: number;
  total: number;
};

/**
 * An object describing a symlink
 */
export type ContentSymlink = {
  sha: string;
  url: string;
  name: string;
  path: string;
  size: number;
  type: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
  target: string;
  git_url: string;
  html_url: string;
  download_url: string;
};

/**
 * Content Traffic
 */
export type ContentTraffic = {
  path: string;
  count: number;
  title: string;
  uniques: number;
};

/**
 * A list of external groups available to be connected to a team
 */
export type ExternalGroups = {
  /**
   * An array of external groups available to be mapped to a team
   */
  groups?: Array<{
    /**
     * The internal ID of the group
     */
    group_id: number;

    /**
     * The display name of the group
     */
    group_name: string;

    /**
     * The time of the last update for this group
     */
    updated_at: string;
  }>;
};

/**
 * Full Repository
 */
export type FullRepository = {
  id: number;
  url: string;
  fork: boolean;
  name: string;
  size: number;
  forks: number;
  owner: SimpleUser;
  parent?: Repository;
  source?: Repository;
  topics?: Array<string>;
  git_url: string;
  license: null | LicenseSimple;
  node_id: string;
  private: boolean;
  ssh_url: string;
  svn_url: string;
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  has_wiki: boolean;
  homepage: string;
  html_url: string;
  keys_url: string;
  language: string;
  tags_url: string;
  watchers: number;
  blobs_url: string;
  clone_url: string;
  forks_url: string;
  full_name: string;
  has_pages: boolean;
  hooks_url: string;
  pulls_url: string;
  pushed_at: string;
  teams_url: string;
  trees_url: string;
  created_at: string;
  events_url: string;
  has_issues: boolean;
  issues_url: string;
  labels_url: string;
  merges_url: string;
  mirror_url: string;
  updated_at: string;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  archive_url: string;
  commits_url: string;
  compare_url: string;
  description: string;
  forks_count: number;
  is_template?: boolean;
  open_issues: number;
  permissions?: {
    pull: boolean;

    push: boolean;

    admin: boolean;

    triage?: boolean;

    maintain?: boolean;
  };
  branches_url: string;
  comments_url: string;
  contents_url: string;
  git_refs_url: string;
  git_tags_url: string;
  has_projects: boolean;
  organization?: null | SimpleUser;
  releases_url: string;
  statuses_url: string;
  allow_forking?: boolean;
  assignees_url: string;
  downloads_url: string;
  has_downloads: boolean;
  languages_url: string;
  master_branch?: string;
  network_count: number;
  default_branch: string;
  milestones_url: string;
  stargazers_url: string;
  watchers_count: number;
  code_of_conduct?: CodeOfConductSimple;
  deployments_url: string;
  git_commits_url: string;
  subscribers_url: string;
  allow_auto_merge?: boolean;
  contributors_url: string;
  issue_events_url: string;
  stargazers_count: number;
  subscription_url: string;
  temp_clone_token?: string;
  collaborators_url: string;
  issue_comment_url: string;
  notifications_url: string;
  open_issues_count: number;
  subscribers_count: number;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  allow_update_branch?: boolean;
  template_repository?: null | Repository;
  security_and_analysis?: SecurityAndAnalysis;
  delete_branch_on_merge?: boolean;

  /**
   * Whether anonymous git access is allowed.
   */
  anonymous_access_enabled?: boolean;
  use_squash_pr_title_as_default?: boolean;
};

/**
 * License Content
 */
export type LicenseContent = {
  sha: string;
  url: string;
  name: string;
  path: string;
  size: number;
  type: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
  content: string;
  git_url: string;
  license: null | LicenseSimple;
  encoding: string;
  html_url: string;
  download_url: string;
};

/**
 * Results of a successful merge upstream request
 */
export type MergedUpstream = {
  message?: string;
  merge_type?: \\"merge\\" | \\"fast-forward\\" | \\"none\\";
  base_branch?: string;
};

/**
 * Actions OIDC Subject customization
 */
export type OidcCustomSub = {
  include_claim_keys: Array<string>;
};

/**
 * A version of a software package
 */
export type PackageVersion = {
  /**
   * Unique identifier of the package version.
   */
  id: number;
  url: string;

  /**
   * The name of the package version.
   */
  name: string;
  license?: string;
  html_url?: string;
  metadata?: {
    docker?: {
      tag?: Array<string>;
    };

    container?: {
      tags: Array<string>;
    };

    package_type: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  };
  created_at: string;
  deleted_at?: string;
  updated_at: string;
  description?: string;
  package_html_url: string;
};

/**
 * The GitHub Pages deployment status.
 */
export type PageDeployment = {
  /**
   * The URI to the deployed GitHub Pages.
   */
  page_url: string;

  /**
   * The URI to monitor GitHub Pages deployment status.
   */
  status_url: string;

  /**
   * The URI to the deployed GitHub Pages preview.
   */
  preview_url?: string;
};

export type ReactionRollup = {
  \\"+1\\": number;
  \\"-1\\": number;
  url: string;
  eyes: number;
  heart: number;
  laugh: number;
  hooray: number;
  rocket: number;
  confused: number;
  total_count: number;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export type TeamDiscussion = {
  url: string;

  /**
   * The main text of the discussion.
   */
  body: string;

  /**
   * The title of the discussion.
   */
  title: string;
  author: null | SimpleUser;

  /**
   * The unique sequence number of a team discussion.
   */
  number: number;

  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  node_id: string;

  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  html_url: string;
  team_url: string;
  body_html: string;
  reactions?: ReactionRollup;
  created_at: string;
  updated_at: string;

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_url: string;
  comments_count: number;
  last_edited_at: string;
};

/**
 * Team Membership
 */
export type TeamMembership = {
  url: string;

  /**
   * The role of the user in the team.
   */
  role: \\"member\\" | \\"maintainer\\";

  /**
   * The state of the user's membership in the team.
   */
  state: \\"active\\" | \\"pending\\";
};

/**
 * A team's access to a repository.
 */
export type TeamRepository = {
  /**
   * Unique identifier of the repository
   */
  id: number;
  url: string;
  fork: boolean;

  /**
   * The name of the repository.
   */
  name: string;
  size: number;
  forks: number;
  owner: null | SimpleUser;
  topics?: Array<string>;
  git_url: string;
  license: null | LicenseSimple;
  node_id: string;

  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  ssh_url: string;
  svn_url: string;

  /**
   * Whether the repository is archived.
   */
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  homepage: string;
  html_url: string;
  keys_url: string;
  language: string;
  tags_url: string;
  watchers: number;
  blobs_url: string;
  clone_url: string;
  forks_url: string;
  full_name: string;
  has_pages: boolean;
  hooks_url: string;
  pulls_url: string;
  pushed_at: string;
  role_name?: string;
  teams_url: string;
  trees_url: string;
  created_at: string;
  events_url: string;

  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  issues_url: string;
  labels_url: string;
  merges_url: string;
  mirror_url: string;
  updated_at: string;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  archive_url: string;
  commits_url: string;
  compare_url: string;
  description: string;
  forks_count: number;

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  open_issues: number;
  permissions?: {
    pull: boolean;

    push: boolean;

    admin: boolean;

    triage?: boolean;

    maintain?: boolean;
  };
  branches_url: string;
  comments_url: string;
  contents_url: string;
  git_refs_url: string;
  git_tags_url: string;

  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  releases_url: string;
  statuses_url: string;

  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  assignees_url: string;
  downloads_url: string;

  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  languages_url: string;
  master_branch?: string;
  network_count?: number;

  /**
   * The default branch of the repository.
   */
  default_branch: string;
  milestones_url: string;
  stargazers_url: string;
  watchers_count: number;
  deployments_url: string;
  git_commits_url: string;
  subscribers_url: string;

  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  contributors_url: string;
  issue_events_url: string;
  stargazers_count: number;
  subscription_url: string;
  temp_clone_token?: string;
  collaborators_url: string;
  issue_comment_url: string;
  notifications_url: string;
  open_issues_count: number;
  subscribers_count?: number;

  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;

  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;

  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  template_repository?: null | Repository;

  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
};

/**
 * The time that the alert was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type AlertCreatedAt = string;

/**
 * The time that the alert was last updated in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type AlertUpdatedAt = string;

/**
 * Check Annotation
 */
export type CheckAnnotation = {
  path: string;
  title: string;
  message: string;
  end_line: number;
  blob_href: string;
  end_column: number;
  start_line: number;
  raw_details: string;
  start_column: number;
  annotation_level: string;
};

/**
 * Branch protections protect branches
 */
export type ProtectedBranch = {
  url: string;
  restrictions?: BranchRestrictionPolicy;
  enforce_admins?: {
    url: string;

    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  required_signatures?: {
    url: string;

    enabled: boolean;
  };
  required_status_checks?: StatusCheckPolicy;
  required_linear_history?: {
    enabled: boolean;
  };
  required_pull_request_reviews?: {
    url: string;

    dismiss_stale_reviews?: boolean;

    dismissal_restrictions?: {
      url: string;

      apps?: Array<Integration>;

      teams: Array<Team>;

      users: Array<SimpleUser>;

      teams_url: string;

      users_url: string;
    };

    require_code_owner_reviews?: boolean;

    bypass_pull_request_allowances?: {
      apps?: Array<Integration>;

      teams: Array<Team>;

      users: Array<SimpleUser>;
    };

    required_approving_review_count?: number;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
};

/**
 * Referrer Traffic
 */
export type ReferrerTraffic = {
  count: number;
  uniques: number;
  referrer: string;
};

export type SelectedActions = {
  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, \`monalisa/octocat@*\`, \`monalisa/octocat@v2\`, \`monalisa/*\`.\\"
   */
  patterns_allowed?: Array<string>;

  /**
   * Whether actions from GitHub Marketplace verified creators are allowed. Set to \`true\` to allow all actions by GitHub Marketplace verified creators.
   */
  verified_allowed?: boolean;

  /**
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the \`actions\` organization.
   */
  github_owned_allowed?: boolean;
};

/**
 * Validation Error
 */
export type ValidationError = {
  errors?: Array<{
    code: string;

    field?: string;

    index?: number;

    value?: string | null | number | null | any[] | null;

    message?: string;

    resource?: string;
  }>;
  message: string;
  documentation_url: string;
};

/**
 * The authorization associated with an OAuth Access.
 */
export type ApplicationGrant = {
  id: number;
  app: {
    url: string;

    name: string;

    client_id: string;
  };
  url: string;
  user?: null | SimpleUser;
  scopes: Array<string>;
  created_at: string;
  updated_at: string;
};

/**
 * Branch Protection
 */
export type BranchProtection = {
  url?: string;
  name?: string;
  enabled?: boolean;
  restrictions?: BranchRestrictionPolicy;
  enforce_admins?: ProtectedBranchAdminEnforced;
  protection_url?: string;
  allow_deletions?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  required_signatures?: {
    url: string;

    enabled: boolean;
  };
  required_status_checks?: ProtectedBranchRequiredStatusCheck;
  required_linear_history?: {
    enabled?: boolean;
  };
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
};

/** 
* The full Git reference, formatted as \`refs/heads/<branch name>\`,
\`refs/pull/<number>/merge\`, or \`refs/pull/<number>/head\`.
*/
export type CodeScanningRef = string;

/**
 * A list of errors found in a repo's CODEOWNERS file
 */
export type CodeownersErrors = {
  errors: Array<{
    /**
     * The type of error.
     */
    kind: string;

    /**
     * The line number where this errors occurs.
     */
    line: number;

    /**
     * The path of the file where the error occured.
     */
    path: string;

    /**
     * The column number where this errors occurs.
     */
    column: number;

    /**
     * The contents of the line where the error occurs.
     */
    source?: string;

    /**
     * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     */
    message: string;

    /**
     * Suggested action to fix the error. This will usually be \`null\`, but is provided for some common errors.
     */
    suggestion?: string;
  }>;
};

/**
 * A description of the machine powering a codespace.
 */
export type CodespaceMachine = {
  /**
   * How many cores are available to the codespace.
   */
  cpus: number;

  /**
   * The name of the machine.
   */
  name: string;

  /**
   * The display name of the machine includes cores, memory, and storage.
   */
  display_name: string;

  /**
   * How much memory is available to the codespace.
   */
  memory_in_bytes: number;

  /**
   * The operating system of the machine.
   */
  operating_system: string;

  /**
   * How much storage is available to the codespace.
   */
  storage_in_bytes: number;

  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \\"null\\" if prebuilds are not supported or prebuild availability could not be determined. Value will be \\"none\\" if no prebuild is available. Latest values \\"ready\\" and \\"in_progress\\" indicate the prebuild availability status.
   */
  prebuild_availability: \\"none\\" | \\"ready\\" | \\"in_progress\\";
};

/**
 * Secrets for a GitHub Codespace.
 */
export type CodespacesSecret = {
  /**
   * The name of the secret
   */
  name: string;

  /**
   * Secret created at
   */
  created_at: string;

  /**
   * Secret last updated at
   */
  updated_at: string;

  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: \\"all\\" | \\"private\\" | \\"selected\\";

  /**
   * API URL at which the list of repositories this secret is vicible can be retrieved
   */
  selected_repositories_url: string;
};

/**
 * Commit Comparison
 */
export type CommitComparison = {
  url: string;
  files?: Array<DiffEntry>;
  status: \\"diverged\\" | \\"ahead\\" | \\"behind\\" | \\"identical\\";
  commits: Array<Commit>;
  ahead_by: number;
  diff_url: string;
  html_url: string;
  behind_by: number;
  patch_url: string;
  base_commit: Commit;
  permalink_url: string;
  total_commits: number;
  merge_base_commit: Commit;
};

/**
 * Community Profile
 */
export type CommunityProfile = {
  files: {
    readme: null | CommunityHealthFile;

    license: null | LicenseSimple;

    contributing: null | CommunityHealthFile;

    issue_template: null | CommunityHealthFile;

    code_of_conduct: null | CodeOfConductSimple;

    code_of_conduct_file: null | CommunityHealthFile;

    pull_request_template: null | CommunityHealthFile;
  };
  updated_at: string;
  description: string;
  documentation: string;
  health_percentage: number;
  content_reports_enabled?: boolean;
};

/**
 * A list of directory items
 */
export type ContentDirectory = Array<{
  sha: string;

  url: string;

  name: string;

  path: string;

  size: number;

  type: string;

  _links: {
    git: string;

    html: string;

    self: string;
  };

  content?: string;

  git_url: string;

  html_url: string;

  download_url: string;
}>;

/**
 * An object describing a symlink
 */
export type ContentSubmodule = {
  sha: string;
  url: string;
  name: string;
  path: string;
  size: number;
  type: string;
  _links: {
    git: string;

    html: string;

    self: string;
  };
  git_url: string;
  html_url: string;
  download_url: string;
  submodule_git_url: string;
};

/**
 * Set secrets for Dependabot.
 */
export type DependabotSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
};

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export type DeploymentSimple = {
  /**
   * Unique identifier of the deployment
   */
  id: number;
  url: string;

  /**
   * Parameter to specify a task to execute
   */
  task: string;
  node_id: string;
  created_at: string;
  updated_at: string;
  description: string;

  /**
   * Name for the target deployment environment.
   */
  environment: string;
  statuses_url: string;
  repository_url: string;
  original_environment?: string;

  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean;

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean;
  performed_via_github_app?: null | Integration;
};

/**
 * The status of a deployment.
 */
export type DeploymentStatus = {
  id: number;
  url: string;

  /**
   * The state of the status.
   */
  state: \\"error\\" | \\"failure\\" | \\"inactive\\" | \\"pending\\" | \\"success\\" | \\"queued\\" | \\"in_progress\\";
  creator: null | SimpleUser;

  /**
   * The URL to associate with this status.
   */
  log_url?: string;
  node_id: string;
  created_at: string;

  /**
   * Deprecated: the URL to associate with this status.
   */
  target_url: string;
  updated_at: string;

  /**
   * A short description of the status.
   */
  description: string;

  /**
   * The environment of the deployment that the status is for.
   */
  environment?: string;
  deployment_url: string;
  repository_url: string;

  /**
   * The URL for accessing your environment.
   */
  environment_url?: string;
  performed_via_github_app?: null | Integration;
};

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 */
export type InteractionGroup = \\"existing_users\\" | \\"contributors_only\\" | \\"collaborators_only\\";

/**
 * Limit interactions to a specific type of user for a specified duration
 */
export type InteractionLimit = {
  limit: InteractionGroup;
  expiry?: InteractionExpiry;
};

/**
 * Issue Event Label
 */
export type IssueEventLabel = {
  name: string;
  color: string;
};

/**
 * Organization Full
 */
export type OrganizationFull = {
  id: number;
  url: string;
  blog?: string;
  name?: string;
  plan?: {
    name: string;

    seats?: number;

    space: number;

    filled_seats?: number;

    private_repos: number;
  };
  type: string;
  email?: string;
  login: string;
  company?: string;
  node_id: string;
  html_url: string;
  location?: string;
  followers: number;
  following: number;
  hooks_url: string;
  repos_url: string;
  avatar_url: string;
  created_at: string;
  disk_usage?: number;
  events_url: string;
  issues_url: string;
  updated_at: string;
  description: string;
  is_verified?: boolean;
  members_url: string;
  public_gists: number;
  public_repos: number;
  billing_email?: string;
  collaborators?: number;
  private_gists?: number;
  twitter_username?: string;
  public_members_url: string;
  owned_private_repos?: number;
  total_private_repos?: number;
  has_repository_projects: boolean;
  members_can_create_pages?: boolean;
  has_organization_projects: boolean;
  default_repository_permission?: string;
  two_factor_requirement_enabled?: boolean;
  members_can_create_public_pages?: boolean;
  members_can_create_repositories?: boolean;
  members_can_create_private_pages?: boolean;
  members_can_fork_private_repositories?: boolean;
  members_can_create_public_repositories?: boolean;
  members_can_create_private_repositories?: boolean;
  members_allowed_repository_creation_type?: string;
  members_can_create_internal_repositories?: boolean;
};

/**
 * Page Build Status
 */
export type PageBuildStatus = {
  url: string;
  status: string;
};

export type PagesSourceHash = {
  path: string;
  branch: string;
};

/**
 * Porter Large File
 */
export type PorterLargeFile = {
  oid: string;
  path: string;
  size: number;
  ref_name: string;
};

export type RunnerGroupsOrg = {
  id: number;
  name: string;
  default: boolean;
  inherited: boolean;
  visibility: string;
  runners_url: string;

  /**
   * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
   */
  selected_workflows?: Array<string>;

  /**
   * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
   */
  restricted_to_workflows?: boolean;

  /**
   * Link to the selected repositories resource for this runner group. Not present unless visibility was set to \`selected\`
   */
  selected_repositories_url?: string;
  allows_public_repositories: boolean;

  /**
   * If \`true\`, the \`restricted_to_workflows\` and \`selected_workflows\` fields cannot be modified.
   */
  workflow_restrictions_read_only?: boolean;
  inherited_allows_public_repositories?: boolean;
};

/**
 * Response of S4 Proxy endpoint that provides GHES statistics
 */
export type ServerStatistics = {};

/**
 * Simple Repository
 */
export type SimpleRepository = {
  /**
   * A unique identifier of the repository.
   */
  id: number;

  /**
   * The URL to get more information about the repository from the GitHub API.
   */
  url: string;

  /**
   * Whether the repository is a fork.
   */
  fork: boolean;

  /**
   * The name of the repository.
   */
  name: string;
  owner: SimpleUser;

  /**
   * The GraphQL identifier of the repository.
   */
  node_id: string;

  /**
   * Whether the repository is private.
   */
  private: boolean;

  /**
   * The URL to view the repository on GitHub.com.
   */
  html_url: string;

  /**
   * A template for the API URL to get information about deploy keys on the repository.
   */
  keys_url: string;

  /**
   * The API URL to get information about tags on the repository.
   */
  tags_url: string;

  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   */
  blobs_url: string;

  /**
   * The API URL to list the forks of the repository.
   */
  forks_url: string;

  /**
   * The full, globally unique, name of the repository.
   */
  full_name: string;

  /**
   * The API URL to list the hooks on the repository.
   */
  hooks_url: string;

  /**
   * A template for the API URL to get information about pull requests on the repository.
   */
  pulls_url: string;

  /**
   * The API URL to list the teams on the repository.
   */
  teams_url: string;

  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   */
  trees_url: string;

  /**
   * The API URL to list the events of the repository.
   */
  events_url: string;

  /**
   * A template for the API URL to get information about issues on the repository.
   */
  issues_url: string;

  /**
   * A template for the API URL to get information about labels of the repository.
   */
  labels_url: string;

  /**
   * The API URL to merge branches in the repository.
   */
  merges_url: string;

  /**
   * A template for the API URL to download the repository as an archive.
   */
  archive_url: string;

  /**
   * A template for the API URL to get information about commits on the repository.
   */
  commits_url: string;

  /**
   * A template for the API URL to compare two commits or refs.
   */
  compare_url: string;

  /**
   * The repository description.
   */
  description: string;

  /**
   * A template for the API URL to get information about branches in the repository.
   */
  branches_url: string;

  /**
   * A template for the API URL to get information about comments on the repository.
   */
  comments_url: string;

  /**
   * A template for the API URL to get the contents of the repository.
   */
  contents_url: string;

  /**
   * A template for the API URL to get information about Git refs of the repository.
   */
  git_refs_url: string;

  /**
   * A template for the API URL to get information about Git tags of the repository.
   */
  git_tags_url: string;

  /**
   * A template for the API URL to get information about releases on the repository.
   */
  releases_url: string;

  /**
   * A template for the API URL to get information about statuses of a commit.
   */
  statuses_url: string;

  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   */
  assignees_url: string;

  /**
   * The API URL to list the downloads on the repository.
   */
  downloads_url: string;

  /**
   * The API URL to get information about the languages of the repository.
   */
  languages_url: string;

  /**
   * A template for the API URL to get information about milestones of the repository.
   */
  milestones_url: string;

  /**
   * The API URL to list the stargazers on the repository.
   */
  stargazers_url: string;

  /**
   * The API URL to list the deployments of the repository.
   */
  deployments_url: string;

  /**
   * A template for the API URL to get information about Git commits of the repository.
   */
  git_commits_url: string;

  /**
   * The API URL to list the subscribers on the repository.
   */
  subscribers_url: string;

  /**
   * A template for the API URL to list the contributors to the repository.
   */
  contributors_url: string;

  /**
   * A template for the API URL to get information about issue events on the repository.
   */
  issue_events_url: string;

  /**
   * The API URL to subscribe to notifications for this repository.
   */
  subscription_url: string;

  /**
   * A template for the API URL to get information about collaborators of the repository.
   */
  collaborators_url: string;

  /**
   * A template for the API URL to get information about issue comments on the repository.
   */
  issue_comment_url: string;

  /**
   * A template for the API URL to get information about notifications on the repository.
   */
  notifications_url: string;
};

/**
 * Repository actions caches
 */
export type ActionsCacheList = {
  /**
   * Total number of caches
   */
  total_count: number;

  /**
   * Array of caches
   */
  actions_caches: Array<{
    id?: number;

    key?: string;

    ref?: string;

    version?: string;

    created_at?: string;

    size_in_bytes?: number;

    last_accessed_at?: string;
  }>;
};

/**
 * The public key used for setting Actions Secrets.
 */
export type ActionsPublicKey = {
  id?: number;

  /**
   * The Base64 encoded public key.
   */
  key: string;
  url?: string;
  title?: string;

  /**
   * The identifier for the key.
   */
  key_id: string;
  created_at?: string;
};

/**
 * How the author is associated with the repository.
 */
export type AuthorAssociation =
  | \\"COLLABORATOR\\"
  | \\"CONTRIBUTOR\\"
  | \\"FIRST_TIMER\\"
  | \\"FIRST_TIME_CONTRIBUTOR\\"
  | \\"MANNEQUIN\\"
  | \\"MEMBER\\"
  | \\"NONE\\"
  | \\"OWNER\\";

/**
 * Gitignore Template
 */
export type GitignoreTemplate = {
  name: string;
  source: string;
};

/**
 * Delivery made by a webhook, without request and response information.
 */
export type HookDeliveryItem = {
  /**
   * Unique identifier of the webhook delivery.
   */
  id: number;

  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   */
  guid: string;

  /**
   * The event that triggered the delivery.
   */
  event: string;

  /**
   * The type of activity for the event that triggered the delivery.
   */
  action: string;

  /**
   * Describes the response returned after attempting the delivery.
   */
  status: string;

  /**
   * Time spent delivering.
   */
  duration: number;

  /**
   * Whether the webhook delivery is a redelivery.
   */
  redelivery: boolean;

  /**
   * Status code received when delivery was made.
   */
  status_code: number;

  /**
   * Time when the webhook delivery occurred.
   */
  delivered_at: string;

  /**
   * The id of the repository associated with this event.
   */
  repository_id: number;

  /**
   * The id of the GitHub App installation associated with this event.
   */
  installation_id: number;
};

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
export type InstallationToken = {
  token: string;
  expires_at: string;
  permissions?: AppPermissions;
  single_file?: string;
  repositories?: Array<Repository>;
  single_file_paths?: Array<string>;
  repository_selection?: \\"all\\" | \\"selected\\";
  has_multiple_single_files?: boolean;
};

/**
 * The duration of the interaction restriction. Default: \`one_day\`.
 */
export type InteractionExpiry = \\"one_day\\" | \\"three_days\\" | \\"one_week\\" | \\"one_month\\" | \\"six_months\\";

/**
 * Issue Event Rename
 */
export type IssueEventRename = {
  to: string;
  from: string;
};

/**
 * Locked Issue Event
 */
export type LockedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  lock_reason: string;
  performed_via_github_app: null | Integration;
};

/**
 * Minimal Repository
 */
export type MinimalRepository = {
  id: number;
  url: string;
  fork: boolean;
  name: string;
  size?: number;
  forks?: number;
  owner: SimpleUser;
  topics?: Array<string>;
  git_url?: string;
  license?: any;
  node_id: string;
  private: boolean;
  ssh_url?: string;
  svn_url?: string;
  archived?: boolean;
  disabled?: boolean;
  has_wiki?: boolean;
  homepage?: string;
  html_url: string;
  keys_url: string;
  language?: string;
  tags_url: string;
  watchers?: number;
  blobs_url: string;
  clone_url?: string;
  forks_url: string;
  full_name: string;
  has_pages?: boolean;
  hooks_url: string;
  pulls_url: string;
  pushed_at?: string;
  role_name?: string;
  teams_url: string;
  trees_url: string;
  created_at?: string;
  events_url: string;
  has_issues?: boolean;
  issues_url: string;
  labels_url: string;
  merges_url: string;
  mirror_url?: string;
  updated_at?: string;
  visibility?: string;
  archive_url: string;
  commits_url: string;
  compare_url: string;
  description: string;
  forks_count?: number;
  is_template?: boolean;
  open_issues?: number;
  permissions?: {
    pull?: boolean;

    push?: boolean;

    admin?: boolean;

    triage?: boolean;

    maintain?: boolean;
  };
  branches_url: string;
  comments_url: string;
  contents_url: string;
  git_refs_url: string;
  git_tags_url: string;
  has_projects?: boolean;
  releases_url: string;
  statuses_url: string;
  allow_forking?: boolean;
  assignees_url: string;
  downloads_url: string;
  has_downloads?: boolean;
  languages_url: string;
  network_count?: number;
  default_branch?: string;
  milestones_url: string;
  stargazers_url: string;
  watchers_count?: number;
  code_of_conduct?: CodeOfConduct;
  deployments_url: string;
  git_commits_url: string;
  subscribers_url: string;
  contributors_url: string;
  issue_events_url: string;
  stargazers_count?: number;
  subscription_url: string;
  temp_clone_token?: string;
  collaborators_url: string;
  issue_comment_url: string;
  notifications_url: string;
  open_issues_count?: number;
  subscribers_count?: number;
  template_repository?: null | Repository;
  delete_branch_on_merge?: boolean;
};

/**
 * Pages Health Check Status
 */
export type PagesHealthCheck = {
  domain?: {
    uri?: string;

    host?: string;

    reason?: string;

    is_valid?: boolean;

    caa_error?: string;

    is_proxied?: boolean;

    https_error?: string;

    is_a_record?: boolean;

    nameservers?: string;

    dns_resolves?: boolean;

    is_fastly_ip?: boolean;

    enforces_https?: boolean;

    is_apex_domain?: boolean;

    is_pages_domain?: boolean;

    is_valid_domain?: boolean;

    has_cname_record?: boolean;

    is_cloudflare_ip?: boolean;

    is_https_eligible?: boolean;

    is_old_ip_address?: boolean;

    responds_to_https?: boolean;

    is_cname_to_fastly?: boolean;

    is_served_by_pages?: boolean;

    should_be_a_record?: boolean;

    has_mx_records_present?: boolean;

    is_pointed_to_github_pages_ip?: boolean;

    is_cname_to_github_user_domain?: boolean;

    is_non_github_pages_ip_present?: boolean;

    is_cname_to_pages_dot_github_dot_com?: boolean;
  };
  alt_domain?: any;
};

/**
 * Details of a deployment that is waiting for protection rules to pass
 */
export type PendingDeployment = {
  /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: Array<{
    type?: DeploymentReviewerType;

    reviewer?: SimpleUser | Team;
  }>;

  /**
   * The set duration of the wait timer
   */
  wait_timer: number;
  environment: {
    /**
     * The id of the environment.
     */
    id?: number;

    url?: string;

    /**
     * The name of the environment.
     */
    name?: string;

    node_id?: string;

    html_url?: string;
  };

  /**
   * The time that the wait timer began.
   */
  wait_timer_started_at: string;

  /**
   * Whether the currently authenticated user can approve the deployment
   */
  current_user_can_approve: boolean;
};

/**
 * Runner Application
 */
export type RunnerApplication = {
  os: string;
  filename: string;
  architecture: string;
  download_url: string;
  sha256_checksum?: string;

  /**
   * A short lived bearer token used to download the runner, if needed.
   */
  temp_download_token?: string;
};

/**
 * Starred Repository
 */
export type StarredRepository = {
  repo: Repository;
  starred_at: string;
};

/**
 * The URL to which the payloads will be delivered.
 */
export type WebhookConfigUrl = string;

/**
 * Workflow Run Usage
 */
export type WorkflowRunUsage = {
  billable: {
    MACOS?: {
      jobs: number;

      job_runs?: Array<{
        job_id: number;

        duration_ms: number;
      }>;

      total_ms: number;
    };

    UBUNTU?: {
      jobs: number;

      job_runs?: Array<{
        job_id: number;

        duration_ms: number;
      }>;

      total_ms: number;
    };

    WINDOWS?: {
      jobs: number;

      job_runs?: Array<{
        job_id: number;

        duration_ms: number;
      }>;

      total_ms: number;
    };
  };
  run_duration_ms?: number;
};

/**
 * The REST API URL for fetching the list of instances for an alert.
 */
export type AlertInstancesUrl = string;

/**
 * Code Frequency Stat
 */
export type CodeFrequencyStat = Array<number>;

export type CodeScanningAlert = {
  url: AlertUrl;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  state: CodeScanningAlertState;
  number: AlertNumber;
  fixed_at?: CodeScanningAlertFixedAt;
  html_url: AlertHtmlUrl;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_by: null | SimpleUser;
  instances_url: AlertInstancesUrl;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  most_recent_instance: CodeScanningAlertInstance;
};

/**
 * Labeled Issue Event
 */
export type LabeledIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  label: {
    name: string;

    color: string;
  };
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

export type MarketplaceAccount = {
  id: number;
  url: string;
  type: string;
  email?: string;
  login: string;
  node_id?: string;
  organization_billing_email?: string;
};

/**
 * Organization Simple
 */
export type OrganizationSimple = {
  id: number;
  url: string;
  login: string;
  node_id: string;
  hooks_url: string;
  repos_url: string;
  avatar_url: string;
  events_url: string;
  issues_url: string;
  description: string;
  members_url: string;
  public_members_url: string;
};

export type ParticipationStats = {
  all: Array<number>;
  owner: Array<number>;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export type PullRequestReview = {
  /**
   * Unique identifier of the review
   */
  id: number;

  /**
   * The text of the review.
   */
  body: string;
  user: null | SimpleUser;
  state: string;
  _links: {
    html: {
      href: string;
    };

    pull_request: {
      href: string;
    };
  };
  node_id: string;
  html_url: string;
  body_html?: string;
  body_text?: string;

  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  submitted_at?: string;
  pull_request_url: string;
  author_association: AuthorAssociation;
};

/**
 * Pull Request Simple
 */
export type PullRequestSimple = {
  id: number;
  url: string;
  base: {
    ref: string;

    sha: string;

    repo: Repository;

    user: null | SimpleUser;

    label: string;
  };
  body: string;
  head: {
    ref: string;

    sha: string;

    repo: Repository;

    user: null | SimpleUser;

    label: string;
  };
  user: null | SimpleUser;

  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
  state: string;
  title: string;
  _links: {
    html: Link;

    self: Link;

    issue: Link;

    commits: Link;

    comments: Link;

    statuses: Link;

    review_comment: Link;

    review_comments: Link;
  };
  labels: Array<{
    id: number;

    url: string;

    name: string;

    color: string;

    default: boolean;

    node_id: string;

    description: string;
  }>;
  locked: boolean;
  number: number;
  node_id: string;
  assignee: null | SimpleUser;
  diff_url: string;
  html_url: string;
  assignees?: any[];
  closed_at: string;
  issue_url: string;
  merged_at: string;
  milestone: null | Milestone;
  patch_url: string;
  auto_merge: AutoMerge;
  created_at: string;
  updated_at: string;
  commits_url: string;
  comments_url: string;
  statuses_url: string;
  requested_teams?: any[];
  merge_commit_sha: string;
  active_lock_reason?: string;
  author_association: AuthorAssociation;
  review_comment_url: string;
  requested_reviewers?: any[];
  review_comments_url: string;
};

/**
 * Rate Limit Overview
 */
export type RateLimitOverview = {
  rate: RateLimit;
  resources: {
    core: RateLimit;

    scim?: RateLimit;

    search: RateLimit;

    graphql?: RateLimit;

    source_import?: RateLimit;

    code_scanning_upload?: RateLimit;

    dependency_snapshots?: RateLimit;

    integration_manifest?: RateLimit;

    actions_runner_registration?: RateLimit;
  };
};

/**
 * A workflow referenced/reused by the initial caller workflow
 */
export type ReferencedWorkflow = {
  ref?: string;
  sha: string;
  path: string;
};

/**
 * Renamed Issue Event
 */
export type RenamedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  rename: {
    to: string;

    from: string;
  };
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

export type ScopedInstallation = {
  account: SimpleUser;
  permissions: AppPermissions;
  repositories_url: string;
  single_file_name: string;
  single_file_paths?: Array<string>;

  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: \\"all\\" | \\"selected\\";
  has_multiple_single_files?: boolean;
};

/**
 * Simple Installation
 */
export type SimpleInstallation = {
  /**
   * The ID of the installation.
   */
  id: number;

  /**
   * The global node ID of the installation.
   */
  node_id: string;
};

/**
 * Status Check Policy
 */
export type StatusCheckPolicy = {
  url: string;
  checks: Array<{
    app_id: number;

    context: string;
  }>;
  strict: boolean;
  contexts: Array<string>;
  contexts_url: string;
};

/**
 * Thread Subscription
 */
export type ThreadSubscription = {
  url: string;
  reason: string;
  ignored: boolean;
  created_at: string;
  subscribed: boolean;
  thread_url?: string;
  repository_url?: string;
};

/**
 * Assigned Issue Event
 */
export type AssignedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  assignee: SimpleUser;
  assigner: SimpleUser;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: Integration;
};

/**
 * Authentication Token
 */
export type AuthenticationToken = {
  /**
   * The token used for authentication
   */
  token: string;

  /**
   * The time this token expires
   */
  expires_at: string;
  permissions?: {};
  single_file?: string;

  /**
   * The repositories this token has access to
   */
  repositories?: Array<Repository>;

  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: \\"all\\" | \\"selected\\";
};

/**
 * Contributor Activity
 */
export type ContributorActivity = {
  total: number;
  weeks: Array<{
    a?: number;

    c?: number;

    d?: number;

    w?: number;
  }>;
  author: null | SimpleUser;
};

/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
 */
export type EnabledRepositories = \\"all\\" | \\"none\\" | \\"selected\\";

/**
 * Marketplace Purchase
 */
export type MarketplacePurchase = {
  id: number;
  url: string;
  type: string;
  email?: string;
  login: string;
  marketplace_purchase: {
    plan?: MarketplaceListingPlan;

    unit_count?: number;

    updated_at?: string;

    is_installed?: boolean;

    billing_cycle?: string;

    on_free_trial?: boolean;

    next_billing_date?: string;

    free_trial_ends_on?: string;
  };
  marketplace_pending_change?: any;
  organization_billing_email?: string;
};

export type PullRequestMinimal = {
  id: number;
  url: string;
  base: {
    ref: string;

    sha: string;

    repo: {
      id: number;

      url: string;

      name: string;
    };
  };
  head: {
    ref: string;

    sha: string;

    repo: {
      id: number;

      url: string;

      name: string;
    };
  };
  number: number;
};

export type ScimEnterpriseUser = {
  id: string;
  meta?: {
    created?: string;

    location?: string;

    lastModified?: string;

    resourceType?: string;
  };
  name?: {
    givenName?: string;

    familyName?: string;
  };
  active?: boolean;
  emails?: Array<{
    type?: string;

    value?: string;

    primary?: boolean;
  }>;
  groups?: Array<{
    value?: string;
  }>;
  schemas: Array<string>;
  userName?: string;
  externalId?: string;
};

/**
 * The API URL to use to get or set the actions and reusable workflows that are allowed to run, when \`allowed_actions\` is set to \`selected\`.
 */
export type SelectedActionsUrl = string;

export type SimpleCommitStatus = {
  id: number;
  url: string;
  state: string;
  context: string;
  node_id: string;
  required?: boolean;
  avatar_url: string;
  created_at: string;
  target_url: string;
  updated_at: string;
  description: string;
};

export type ActionsBillingUsage = {
  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;

  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS?: number;

    /**
     * Total minutes used on all runner machines.
     */
    total?: number;

    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;

    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;

    /**
     * Total minutes used on Ubuntu 4 core runner machines.
     */
    ubuntu_4_core?: number;

    /**
     * Total minutes used on Ubuntu 8 core runner machines.
     */
    ubuntu_8_core?: number;

    /**
     * Total minutes used on Ubuntu 16 core runner machines.
     */
    ubuntu_16_core?: number;

    /**
     * Total minutes used on Ubuntu 32 core runner machines.
     */
    ubuntu_32_core?: number;

    /**
     * Total minutes used on Ubuntu 64 core runner machines.
     */
    ubuntu_64_core?: number;

    /**
     * Total minutes used on Windows 4 core runner machines.
     */
    windows_4_core?: number;

    /**
     * Total minutes used on Windows 8 core runner machines.
     */
    windows_8_core?: number;

    /**
     * Total minutes used on Windows 16 core runner machines.
     */
    windows_16_core?: number;

    /**
     * Total minutes used on Windows 32 core runner machines.
     */
    windows_32_core?: number;

    /**
     * Total minutes used on Windows 64 core runner machines.
     */
    windows_64_core?: number;
  };

  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
};

/**
 * The public key used for setting Codespaces secrets.
 */
export type CodespacesPublicKey = {
  id?: number;

  /**
   * The Base64 encoded public key.
   */
  key: string;
  url?: string;
  title?: string;

  /**
   * The identifier for the key.
   */
  key_id: string;
  created_at?: string;
};

export type CommunityHealthFile = {
  url: string;
  html_url: string;
};

/**
 * The public key used for setting Dependabot Secrets.
 */
export type DependabotPublicKey = {
  /**
   * The Base64 encoded public key.
   */
  key: string;

  /**
   * The identifier for the key.
   */
  key_id: string;
};

/**
 * A diff of the dependencies between two commits.
 */
export type DependencyGraphDiff = Array<{
  name: string;

  license: string;

  version: string;

  manifest: string;

  ecosystem: string;

  change_type: \\"added\\" | \\"removed\\";

  package_url: string;

  vulnerabilities: Array<{
    severity: string;

    advisory_url: string;

    advisory_ghsa_id: string;

    advisory_summary: string;
  }>;

  source_repository_url: string;
}>;

/**
 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
 */
export type EnabledOrganizations = \\"all\\" | \\"none\\" | \\"selected\\";

/**
 * An entry in the reviews log for environment deployments
 */
export type EnvironmentApprovals = {
  user: SimpleUser;

  /**
   * Whether deployment to the environment(s) was approved or rejected
   */
  state: \\"approved\\" | \\"rejected\\";

  /**
   * The comment submitted with the deployment review
   */
  comment: string;

  /**
   * The list of environments that were approved or rejected
   */
  environments: Array<{
    /**
     * The id of the environment.
     */
    id?: number;

    url?: string;

    /**
     * The name of the environment.
     */
    name?: string;

    node_id?: string;

    html_url?: string;

    /**
     * The time that the environment was created, in ISO 8601 format.
     */
    created_at?: string;

    /**
     * The time that the environment was last updated, in ISO 8601 format.
     */
    updated_at?: string;
  }>;
};

/**
 * Issue Event for Issue
 */
export type IssueEventForIssue =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | AssignedIssueEvent
  | UnassignedIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent;

/**
 * Issue Event Milestone
 */
export type IssueEventMilestone = {
  title: string;
};

/**
 * Generated name and body describing a release
 */
export type ReleaseNotesContent = {
  /**
   * The generated body describing the contents of the release supporting markdown formatting
   */
  body: string;

  /**
   * The generated name of the release
   */
  name: string;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositoryInvitation = {
  /**
   * Unique identifier of the repository invitation.
   */
  id: number;

  /**
   * URL for the repository invitation
   */
  url: string;

  /**
   * Whether or not the invitation has expired
   */
  expired?: boolean;
  invitee: null | SimpleUser;
  inviter: null | SimpleUser;
  node_id: string;
  html_url: string;
  created_at: string;
  repository: MinimalRepository;

  /**
   * The permission associated with the invitation.
   */
  permissions: \\"read\\" | \\"write\\" | \\"admin\\" | \\"triage\\" | \\"maintain\\";
};

export type ScimEnterpriseGroup = {
  id: string;
  meta?: {
    created?: string;

    location?: string;

    lastModified?: string;

    resourceType?: string;
  };
  members?: Array<{
    $ref?: string;

    value?: string;

    display?: string;
  }>;
  schemas: Array<string>;
  externalId?: string;
  displayName?: string;
};

export type SecretScanningAlert = {
  url?: AlertUrl;
  state?: SecretScanningAlertState;
  number?: AlertNumber;

  /**
   * The secret that was detected.
   */
  secret?: string;
  html_url?: AlertHtmlUrl;
  created_at?: AlertCreatedAt;
  resolution?: SecretScanningAlertResolution;
  updated_at?: AlertUpdatedAt;

  /**
   * The time that the alert was resolved in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  resolved_at?: string;
  resolved_by?: null | SimpleUser;

  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;

  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;

  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean;

  /** 
* User-friendly name for the detected secret, matching the \`secret_type\`.
For a list of built-in patterns, see \\"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\\"
*/
  secret_type_display_name?: string;

  /**
   * The time that push protection was bypassed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  push_protection_bypassed_at?: string;
  push_protection_bypassed_by?: null | SimpleUser;
};

export type SecurityAndAnalysis = any | null;

/**
 * Timeline Event
 */
export type TimelineIssueEvents =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent
  | TimelineCommentEvent
  | TimelineCrossReferencedEvent
  | TimelineCommittedEvent
  | TimelineReviewedEvent
  | TimelineLineCommentedEvent
  | TimelineCommitCommentedEvent
  | TimelineAssignedIssueEvent
  | TimelineUnassignedIssueEvent
  | StateChangeIssueEvent;

/**
 * Unlabeled Issue Event
 */
export type UnlabeledIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  label: {
    name: string;

    color: string;
  };
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

/**
 * If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 */
export type WebhookConfigSecret = string;

/**
 * Branch With Protection
 */
export type BranchWithProtection = {
  name: string;
  _links: {
    html: string;

    self: string;
  };
  commit: Commit;
  pattern?: string;
  protected: boolean;
  protection: BranchProtection;
  protection_url: string;
  required_approving_review_count?: number;
};

/**
 * Check suite configuration preferences for a repository.
 */
export type CheckSuitePreference = {
  repository: MinimalRepository;
  preferences: {
    auto_trigger_checks?: Array<{
      app_id: number;

      setting: boolean;
    }>;
  };
};

/**
 * Code of Conduct Simple
 */
export type CodeOfConductSimple = {
  key: string;
  url: string;
  name: string;
  html_url: string;
};

export type CodeScanningAnalysis = {
  /**
   * Unique identifier for this analysis.
   */
  id: number;
  ref: CodeScanningRef;
  url: CodeScanningAnalysisUrl;
  tool: CodeScanningAnalysisTool;
  error: string;

  /**
   * Warning generated when processing the analysis
   */
  warning: string;
  category?: CodeScanningAnalysisCategory;
  sarif_id: CodeScanningAnalysisSarifId;
  deletable: boolean;
  commit_sha: CodeScanningAnalysisCommitSha;
  created_at: CodeScanningAnalysisCreatedAt;
  environment: CodeScanningAnalysisEnvironment;

  /**
   * The total number of rules used in the analysis.
   */
  rules_count: number;
  analysis_key: CodeScanningAnalysisAnalysisKey;

  /**
   * The total number of results in the analysis.
   */
  results_count: number;
};

export type CombinedBillingUsage = {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;

  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;

  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
};

/**
 * Combined Commit Status
 */
export type CombinedCommitStatus = {
  sha: string;
  url: string;
  state: string;
  statuses: Array<SimpleCommitStatus>;
  commit_url: string;
  repository: MinimalRepository;
  total_count: number;
};

/**
 * Milestoned Issue Event
 */
export type MilestonedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  milestone: {
    title: string;
  };
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

export type PackagesBillingUsage = {
  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;

  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;

  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
};

/**
 * Set repository secrets for GitHub Codespaces.
 */
export type RepoCodespacesSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
};

/**
 * Timeline Comment Event
 */
export type TimelineCommentEvent = {
  /**
   * Unique identifier of the issue comment
   */
  id: number;

  /**
   * URL for the issue comment
   */
  url: string;

  /**
   * Contents of the issue comment
   */
  body?: string;
  user: SimpleUser;
  actor: SimpleUser;
  event: string;
  node_id: string;
  html_url: string;
  body_html?: string;
  body_text?: string;
  issue_url: string;
  reactions?: ReactionRollup;
  created_at: string;
  updated_at: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: null | Integration;
};

/**
 * Unassigned Issue Event
 */
export type UnassignedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  assignee: SimpleUser;
  assigner: SimpleUser;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

/**
 * Code Search Result Item
 */
export type CodeSearchResultItem = {
  sha: string;
  url: string;
  name: string;
  path: string;
  score: number;
  git_url: string;
  html_url: string;
  language?: string;
  file_size?: number;
  repository: MinimalRepository;
  line_numbers?: Array<string>;
  text_matches?: SearchResultTextMatches;
  last_modified_at?: string;
};

/**
 * OIDC Customer Subject
 */
export type OptOutOidcCustomSub = {
  use_default: boolean;
};

/**
 * Organization Invitation
 */
export type OrganizationInvitation = {
  id: number;
  role: string;
  email: string;
  login: string;
  inviter: SimpleUser;
  node_id: string;
  failed_at?: string;
  created_at: string;
  team_count: number;
  failed_reason?: string;
  invitation_teams_url: string;
};

export type PagesHttpsCertificate = {
  state:
    | \\"new\\"
    | \\"authorization_created\\"
    | \\"authorization_pending\\"
    | \\"authorized\\"
    | \\"authorization_revoked\\"
    | \\"issued\\"
    | \\"uploaded\\"
    | \\"approved\\"
    | \\"errored\\"
    | \\"bad_authz\\"
    | \\"destroy_pending\\"
    | \\"dns_changed\\";

  /**
   * Array of the domain set and its alternate name (if it is configured)
   */
  domains: Array<string>;
  expires_at?: string;
  description: string;
};

/**
 * Repo Search Result Item
 */
export type RepoSearchResultItem = {
  id: number;
  url: string;
  fork: boolean;
  name: string;
  size: number;
  forks: number;
  owner: null | SimpleUser;
  score: number;
  topics?: Array<string>;
  git_url: string;
  license: null | LicenseSimple;
  node_id: string;
  private: boolean;
  ssh_url: string;
  svn_url: string;
  archived: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  has_wiki: boolean;
  homepage: string;
  html_url: string;
  keys_url: string;
  language: string;
  tags_url: string;
  watchers: number;
  blobs_url: string;
  clone_url: string;
  forks_url: string;
  full_name: string;
  has_pages: boolean;
  hooks_url: string;
  pulls_url: string;
  pushed_at: string;
  teams_url: string;
  trees_url: string;
  created_at: string;
  events_url: string;
  has_issues: boolean;
  issues_url: string;
  labels_url: string;
  merges_url: string;
  mirror_url: string;
  updated_at: string;

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  archive_url: string;
  commits_url: string;
  compare_url: string;
  description: string;
  forks_count: number;
  is_template?: boolean;
  open_issues: number;
  permissions?: {
    pull: boolean;

    push: boolean;

    admin: boolean;

    triage?: boolean;

    maintain?: boolean;
  };
  branches_url: string;
  comments_url: string;
  contents_url: string;
  git_refs_url: string;
  git_tags_url: string;
  has_projects: boolean;
  releases_url: string;
  statuses_url: string;
  text_matches?: SearchResultTextMatches;
  allow_forking?: boolean;
  assignees_url: string;
  downloads_url: string;
  has_downloads: boolean;
  languages_url: string;
  master_branch?: string;
  default_branch: string;
  milestones_url: string;
  stargazers_url: string;
  watchers_count: number;
  deployments_url: string;
  git_commits_url: string;
  subscribers_url: string;
  allow_auto_merge?: boolean;
  contributors_url: string;
  issue_events_url: string;
  stargazers_count: number;
  subscription_url: string;
  temp_clone_token?: string;
  collaborators_url: string;
  issue_comment_url: string;
  notifications_url: string;
  open_issues_count: number;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  delete_branch_on_merge?: boolean;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositorySubscription = {
  url: string;
  reason: string;

  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  created_at: string;

  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed: boolean;
  repository_url: string;
};

/**
 * A reply to a discussion within a team.
 */
export type TeamDiscussionComment = {
  url: string;

  /**
   * The main text of the comment.
   */
  body: string;
  author: null | SimpleUser;

  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  node_id: string;
  html_url: string;
  body_html: string;
  reactions?: ReactionRollup;
  created_at: string;
  updated_at: string;

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  discussion_url: string;
  last_edited_at: string;
};

/**
 * Timeline Reviewed Event
 */
export type TimelineReviewedEvent = {
  /**
   * Unique identifier of the review
   */
  id: number;

  /**
   * The text of the review.
   */
  body: string;
  user: SimpleUser;
  event: string;
  state: string;
  _links: {
    html: {
      href: string;
    };

    pull_request: {
      href: string;
    };
  };
  node_id: string;
  html_url: string;
  body_html?: string;
  body_text?: string;

  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  submitted_at?: string;
  pull_request_url: string;
  author_association: AuthorAssociation;
};

/**
 * User Search Result Item
 */
export type UserSearchResultItem = {
  id: number;
  bio?: string;
  url: string;
  blog?: string;
  name?: string;
  type: string;
  email?: string;
  login: string;
  score: number;
  company?: string;
  node_id: string;
  hireable?: boolean;
  html_url: string;
  location?: string;
  followers?: number;
  following?: number;
  gists_url: string;
  repos_url: string;
  avatar_url: string;
  created_at?: string;
  events_url: string;
  site_admin: boolean;
  updated_at?: string;
  gravatar_id: string;
  starred_url: string;
  public_gists?: number;
  public_repos?: number;
  suspended_at?: string;
  text_matches?: SearchResultTextMatches;
  followers_url: string;
  following_url: string;
  organizations_url: string;
  subscriptions_url: string;
  received_events_url: string;
};

/**
 * Validation Error Simple
 */
export type ValidationErrorSimple = {
  errors?: Array<string>;
  message: string;
  documentation_url: string;
};

export type CodeScanningAlertRule = {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string;

  /**
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string;

  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;

  /**
   * A set of tags applicable for the rule.
   */
  tags?: any[];

  /**
   * The severity of the alert.
   */
  severity?: \\"none\\" | \\"note\\" | \\"warning\\" | \\"error\\";

  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;

  /**
   * description of the rule used to detect the alert.
   */
  full_description?: string;

  /**
   * The security severity of the alert.
   */
  security_severity_level?: \\"low\\" | \\"medium\\" | \\"high\\" | \\"critical\\";
};

/**
 * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
export type CodespaceExportDetails = {
  /**
   * Id for the export details
   */
  id?: string;

  /**
   * Git commit SHA of the exported branch
   */
  sha?: string;

  /**
   * State of the latest export
   */
  state?: string;

  /**
   * Name of the exported branch
   */
  branch?: string;

  /**
   * Web url for the exported branch
   */
  html_url?: string;

  /**
   * Url for fetching export details
   */
  export_url?: string;

  /**
   * Completion time of the last export operation
   */
  completed_at?: string;
};

/**
 * Credential Authorization
 */
export type CredentialAuthorization = {
  /**
   * User login that owns the underlying credential.
   */
  login: string;

  /**
   * List of oauth scopes the token has been granted.
   */
  scopes?: Array<string>;

  /**
   * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
   */
  fingerprint?: string;

  /**
   * Unique identifier for the credential.
   */
  credential_id: number;

  /**
   * Human-readable description of the credential type.
   */
  credential_type: string;

  /**
   * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
   */
  token_last_eight?: string;

  /**
   * Date when the credential was last accessed. May be null if it was never accessed
   */
  credential_accessed_at: string;
  authorized_credential_id: number;

  /**
   * Date when the credential was authorized for use.
   */
  credential_authorized_at: string;

  /**
   * The note given to the token. This will only be present when the credential is a token.
   */
  authorized_credential_note?: string;

  /**
   * The title given to the ssh key. This will only be present when the credential is an ssh key.
   */
  authorized_credential_title?: string;

  /**
   * The expiry for the token. This will only be present when the credential is a token.
   */
  authorized_credential_expires_at?: string;
};

/**
 * Demilestoned Issue Event
 */
export type DemilestonedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  milestone: {
    title: string;
  };
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to \`null\`.
 */
export type DeploymentBranchPolicy = any | null;

/**
 * The type of reviewer.
 */
export type DeploymentReviewerType = \\"User\\" | \\"Team\\";

/**
 * Issue Event Project Card
 */
export type IssueEventProjectCard = {
  id: number;
  url: string;
  project_id: number;
  column_name: string;
  project_url: string;
  previous_column_name?: string;
};

/**
 * Issue Search Result Item
 */
export type IssueSearchResultItem = {
  id: number;
  url: string;
  body?: string;
  user: null | SimpleUser;
  draft?: boolean;
  score: number;
  state: string;
  title: string;
  labels: Array<{
    id?: number;

    url?: string;

    name?: string;

    color?: string;

    default?: boolean;

    node_id?: string;

    description?: string;
  }>;
  locked: boolean;
  number: number;
  node_id: string;
  assignee: null | SimpleUser;
  comments: number;
  html_url: string;
  assignees?: any[];
  body_html?: string;
  body_text?: string;
  closed_at: string;
  milestone: null | Milestone;
  reactions?: ReactionRollup;
  created_at: string;
  events_url: string;
  labels_url: string;
  repository?: Repository;
  updated_at: string;
  comments_url: string;
  pull_request?: {
    url: string;

    diff_url: string;

    html_url: string;

    merged_at?: string;

    patch_url: string;
  };
  state_reason?: string;
  text_matches?: SearchResultTextMatches;
  timeline_url?: string;
  repository_url: string;
  active_lock_reason?: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: null | Integration;
};

/**
 * Label Search Result Item
 */
export type LabelSearchResultItem = {
  id: number;
  url: string;
  name: string;
  color: string;
  score: number;
  default: boolean;
  node_id: string;
  description: string;
  text_matches?: SearchResultTextMatches;
};

/**
 * Marketplace Listing Plan
 */
export type MarketplaceListingPlan = {
  id: number;
  url: string;
  name: string;
  state: string;
  number: number;
  bullets: Array<string>;
  unit_name: string;
  description: string;
  price_model: string;
  accounts_url: string;
  has_free_trial: boolean;
  yearly_price_in_cents: number;
  monthly_price_in_cents: number;
};

export type RunnerGroupsEnterprise = {
  id: number;
  name: string;
  default: boolean;
  visibility: string;
  runners_url: string;

  /**
   * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
   */
  selected_workflows?: Array<string>;

  /**
   * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
   */
  restricted_to_workflows?: boolean;
  allows_public_repositories: boolean;
  selected_organizations_url?: string;

  /**
   * If \`true\`, the \`restricted_to_workflows\` and \`selected_workflows\` fields cannot be modified.
   */
  workflow_restrictions_read_only?: boolean;
};

export type SecretScanningLocation = {
  /**
   * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
   */
  type: \\"commit\\";
  details: SecretScanningLocationCommit;
};

/**
 * State Change Issue Event
 */
export type StateChangeIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  state_reason?: string;
  performed_via_github_app: null | Integration;
};

/**
 * Timeline Committed Event
 */
export type TimelineCommittedEvent = {
  /**
   * SHA for the commit
   */
  sha: string;
  url: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;
  };
  event?: string;

  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Name of the git user
     */
    name: string;

    /**
     * Git email address of the user
     */
    email: string;
  };

  /**
   * Message describing the purpose of the commit
   */
  message: string;
  node_id: string;
  parents: Array<{
    /**
     * SHA for the commit
     */
    sha: string;

    url: string;

    html_url: string;
  }>;
  html_url: string;

  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;

    /**
     * Name of the git user
     */
    name: string;

    /**
     * Git email address of the user
     */
    email: string;
  };
  verification: {
    reason: string;

    payload: string;

    verified: boolean;

    signature: string;
  };
};

/**
 * Topic Search Result Item
 */
export type TopicSearchResultItem = {
  name: string;
  score: number;
  aliases?: any[];
  curated: boolean;
  related?: any[];
  featured: boolean;
  logo_url?: string;
  released: string;
  created_at: string;
  created_by: string;
  updated_at: string;
  description: string;
  display_name: string;
  text_matches?: SearchResultTextMatches;
  repository_count?: number;
  short_description: string;
};

/**
 * Branch Restriction Policy
 */
export type BranchRestrictionPolicy = {
  url: string;
  apps: Array<{
    id?: number;

    name?: string;

    slug?: string;

    owner?: {
      id?: number;

      url?: string;

      type?: string;

      login?: string;

      node_id?: string;

      html_url?: string;

      gists_url?: string;

      hooks_url?: string;

      repos_url?: string;

      avatar_url?: string;

      events_url?: string;

      issues_url?: string;

      site_admin?: boolean;

      description?: string;

      gravatar_id?: string;

      members_url?: string;

      starred_url?: string;

      followers_url?: string;

      following_url?: string;

      organizations_url?: string;

      subscriptions_url?: string;

      public_members_url?: string;

      received_events_url?: string;
    };

    events?: Array<string>;

    node_id?: string;

    html_url?: string;

    created_at?: string;

    updated_at?: string;

    description?: string;

    permissions?: {
      issues?: string;

      contents?: string;

      metadata?: string;

      single_file?: string;
    };

    external_url?: string;
  }>;
  teams: Array<{
    id?: number;

    url?: string;

    name?: string;

    slug?: string;

    parent?: string;

    node_id?: string;

    privacy?: string;

    html_url?: string;

    permission?: string;

    description?: string;

    members_url?: string;

    repositories_url?: string;
  }>;
  users: Array<{
    id?: number;

    url?: string;

    type?: string;

    login?: string;

    node_id?: string;

    html_url?: string;

    gists_url?: string;

    repos_url?: string;

    avatar_url?: string;

    events_url?: string;

    site_admin?: boolean;

    gravatar_id?: string;

    starred_url?: string;

    followers_url?: string;

    following_url?: string;

    organizations_url?: string;

    subscriptions_url?: string;

    received_events_url?: string;
  }>;
  apps_url: string;
  teams_url: string;
  users_url: string;
};

export type CodeScanningAlertItems = {
  url: AlertUrl;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  state: CodeScanningAlertState;
  number: AlertNumber;
  fixed_at?: CodeScanningAlertFixedAt;
  html_url: AlertHtmlUrl;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_by: null | SimpleUser;
  instances_url: AlertInstancesUrl;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  most_recent_instance: CodeScanningAlertInstance;
};

/**
 * State of a code scanning alert.
 */
export type CodeScanningAlertState = \\"open\\" | \\"closed\\" | \\"dismissed\\" | \\"fixed\\";

/**
 * Commit Search Result Item
 */
export type CommitSearchResultItem = {
  sha: string;
  url: string;
  score: number;
  author: null | SimpleUser;
  commit: {
    url: string;

    tree: {
      sha: string;

      url: string;
    };

    author: {
      date: string;

      name: string;

      email: string;
    };

    message: string;

    committer: null | GitUser;

    verification?: Verification;

    comment_count: number;
  };
  node_id: string;
  parents: Array<{
    sha?: string;

    url?: string;

    html_url?: string;
  }>;
  html_url: string;
  committer: null | GitUser;
  repository: MinimalRepository;
  comments_url: string;
  text_matches?: SearchResultTextMatches;
};

/**
 * Pull Request Merge Result
 */
export type PullRequestMergeResult = {
  sha: string;
  merged: boolean;
  message: string;
};

export type ScimUserListEnterprise = {
  schemas: Array<string>;
  Resources: Array<{
    id: string;

    meta?: {
      created?: string;

      location?: string;

      lastModified?: string;

      resourceType?: string;
    };

    name?: {
      givenName?: string;

      familyName?: string;
    };

    active?: boolean;

    emails?: Array<{
      type?: string;

      value?: string;

      primary?: boolean;
    }>;

    groups?: Array<{
      value?: string;
    }>;

    schemas: Array<string>;

    userName?: string;

    externalId?: string;
  }>;
  startIndex: number;
  itemsPerPage: number;
  totalResults: number;
};

/**
 * User Marketplace Purchase
 */
export type UserMarketplacePurchase = {
  plan: MarketplaceListingPlan;
  account: MarketplaceAccount;
  unit_count: number;
  updated_at: string;
  billing_cycle: string;
  on_free_trial: boolean;
  next_billing_date: string;
  free_trial_ends_on: string;
};

/**
 * The REST API URL of the analysis resource.
 */
export type CodeScanningAnalysisUrl = string;

/**
 * The public key used for setting user Codespaces' Secrets.
 */
export type CodespacesUserPublicKey = {
  /**
   * The Base64 encoded public key.
   */
  key: string;

  /**
   * The identifier for the key.
   */
  key_id: string;
};

/**
 * Interaction limit settings.
 */
export type InteractionLimitResponse = {
  limit: InteractionGroup;
  origin: string;
  expires_at: string;
};

export type ScimGroupListEnterprise = {
  schemas: Array<string>;
  Resources: Array<{
    id: string;

    meta?: {
      created?: string;

      location?: string;

      lastModified?: string;

      resourceType?: string;
    };

    members?: Array<{
      $ref?: string;

      value?: string;

      display?: string;
    }>;

    schemas: Array<string>;

    externalId?: string;

    displayName?: string;
  }>;
  startIndex: number;
  itemsPerPage: number;
  totalResults: number;
};

export type SearchResultTextMatches = Array<{
  matches?: Array<{
    text?: string;

    indices?: Array<number>;
  }>;

  fragment?: string;

  property?: string;

  object_url?: string;

  object_type?: string;
}>;

export type CodeScanningAnalysisTool = {
  guid?: CodeScanningAnalysisToolGuid;
  name?: CodeScanningAnalysisToolName;
  version?: CodeScanningAnalysisToolVersion;
};

export type CodeScanningSarifsStatus = {
  /**
   * Any errors that ocurred during processing of the delivery.
   */
  readonly errors?: any[];

  /**
   * The REST API URL for getting the analyses associated with the upload.
   */
  readonly analyses_url?: string;

  /**
   * \`pending\` files have not yet been processed, while \`complete\` means results from the SARIF have been stored. \`failed\` files have either not been processed at all, or could only be partially processed.
   */
  processing_status?: \\"pending\\" | \\"complete\\" | \\"failed\\";
};

/**
 * Secrets for GitHub Actions for an organization.
 */
export type OrganizationActionsSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;

  /**
   * Visibility of a secret
   */
  visibility: \\"all\\" | \\"private\\" | \\"selected\\";
  selected_repositories_url?: string;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export type PullRequestReviewComment = {
  /**
   * The ID of the pull request review comment.
   */
  id: number;

  /**
   * URL for the pull request review comment
   */
  url: string;

  /**
   * The text of the comment.
   */
  body: string;

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number;

  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;

  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side?: \\"LEFT\\" | \\"RIGHT\\";
  user: SimpleUser;
  _links: {
    html: {
      href: string;
    };

    self: {
      href: string;
    };

    pull_request: {
      href: string;
    };
  };

  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;

  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;

  /**
   * The line index in the diff to which the comment applies. This field is deprecated; use \`line\` instead.
   */
  position: number;
  body_html?: string;
  body_text?: string;

  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;

  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  reactions?: ReactionRollup;
  created_at: string;

  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: \\"LEFT\\" | \\"RIGHT\\";
  updated_at: string;

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number;

  /**
   * The comment ID to reply to.
   */
  in_reply_to_id?: number;

  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;

  /**
   * The index of the original line in the diff to which the comment applies. This field is deprecated; use \`original_line\` instead.
   */
  original_position: number;
  author_association: AuthorAssociation;

  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;

  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line?: number;

  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;
};

/**
 * Pull Request Review Request
 */
export type PullRequestReviewRequest = {
  teams: Array<Team>;
  users: Array<SimpleUser>;
};

/**
 * Sets the state of the secret scanning alert. Can be either \`open\` or \`resolved\`. You must provide \`resolution\` when you set the state to \`resolved\`.
 */
export type SecretScanningAlertState = \\"open\\" | \\"resolved\\";

/**
 * The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`.
 */
export type WebhookConfigContentType = string;

export type WebhookConfigInsecureSsl = string | number;

/**
 * Added to Project Issue Event
 */
export type AddedToProjectIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    column_name: string;

    project_url: string;

    previous_column_name?: string;
  };
  performed_via_github_app: null | Integration;
};

/**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type CodeScanningAlertFixedAt = string | null;

export type CodeScanningAlertInstance = {
  ref?: CodeScanningRef;
  state?: CodeScanningAlertState;
  message?: {
    text?: string;
  };
  category?: CodeScanningAnalysisCategory;
  html_url?: string;
  location?: CodeScanningAlertLocation;
  commit_sha?: string;
  environment?: CodeScanningAlertEnvironment;
  analysis_key?: CodeScanningAnalysisAnalysisKey;

  /** 
* Classifications that have been applied to the file that triggered the alert.
For example identifying it as documentation, or a generated file.
*/
  classifications?: Array<CodeScanningAlertClassification>;
};

/**
 * Describe a region within a file for the alert.
 */
export type CodeScanningAlertLocation = {
  path?: string;
  end_line?: number;
  end_column?: number;
  start_line?: number;
  start_column?: number;
};

export type CodeScanningSarifsReceipt = {
  id?: CodeScanningAnalysisSarifId;

  /**
   * The REST API URL for checking the status of the upload.
   */
  readonly url?: string;
};

export type IssueEventDismissedReview = {
  state: string;
  review_id: number;
  dismissal_message: string;
  dismissal_commit_id?: string;
};

export type MergeGroupChecksRequested = {
  action: string;
  sender?: SimpleUser;
  repository?: Repository;
  merge_group: {
    base_ref: string;

    head_ref: string;

    head_sha: string;
  };
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
};

/**
 * Review Dismissed Issue Event
 */
export type ReviewDismissedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  dismissed_review: {
    state: string;

    review_id: number;

    dismissal_message: string;

    dismissal_commit_id?: string;
  };
  performed_via_github_app: null | Integration;
};

/**
 * Review Requested Issue Event
 */
export type ReviewRequestedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  requested_team?: Team;
  review_requester: SimpleUser;
  requested_reviewer?: SimpleUser;
  performed_via_github_app: null | Integration;
};

/**
 * Sets the state of the code scanning alert. You must provide \`dismissed_reason\` when you set the state to \`dismissed\`.
 */
export type CodeScanningAlertSetState = \\"open\\" | \\"dismissed\\";

/**
 * Timeline Assigned Issue Event
 */
export type TimelineAssignedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  assignee: SimpleUser;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

/**
 * Timeline Line Commented Event
 */
export type TimelineLineCommentedEvent = {
  event?: string;
  node_id?: string;
  comments?: Array<PullRequestReviewComment>;
};

export type ActionsEnterprisePermissions = {
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
  enabled_organizations: EnabledOrganizations;

  /**
   * The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when \`enabled_organizations\` is set to \`selected\`.
   */
  selected_organizations_url?: string;
};

export type ActionsRepositoryPermissions = {
  enabled: ActionsEnabled;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};

/**
 * Secrets for GitHub Dependabot for an organization.
 */
export type OrganizationDependabotSecret = {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;

  /**
   * Visibility of a secret
   */
  visibility: \\"all\\" | \\"private\\" | \\"selected\\";
  selected_repositories_url?: string;
};

/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
export type CodeScanningAlertEnvironment = string;

/**
 * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 */
export type CodeScanningAnalysisCategory = string;

/**
 * Successful deletion of a code scanning analysis
 */
export type CodeScanningAnalysisDeletion = {
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   */
  readonly next_analysis_url: string;

  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   */
  readonly confirm_delete_url: string;
};

/**
 * An identifier for the upload.
 */
export type CodeScanningAnalysisSarifId = string;

/**
 * Project Collaborator Permission
 */
export type ProjectCollaboratorPermission = {
  user: null | SimpleUser;
  permission: string;
};

/**
 * Protected Branch Admin Enforced
 */
export type ProtectedBranchAdminEnforced = {
  url: string;
  enabled: boolean;
};

/**
 * Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
 */
export type SecretScanningLocationCommit = {
  /**
   * The file path in the repository
   */
  path: string;

  /**
   * SHA-1 hash ID of the associated blob
   */
  blob_sha: string;

  /**
   * The API URL to get the associated blob resource
   */
  blob_url: string;

  /**
   * Line number at which the secret ends in the file
   */
  end_line: number;

  /**
   * SHA-1 hash ID of the associated commit
   */
  commit_sha: string;

  /**
   * The API URL to get the associated commit resource
   */
  commit_url: string;

  /**
   * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
   */
  end_column: number;

  /**
   * Line number at which the secret starts in the file
   */
  start_line: number;

  /**
   * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
   */
  start_column: number;
};

/**
 * Timeline Commit Commented Event
 */
export type TimelineCommitCommentedEvent = {
  event?: string;
  node_id?: string;
  comments?: Array<CommitComment>;
  commit_id?: string;
};

/**
 * Timeline Cross Referenced Event
 */
export type TimelineCrossReferencedEvent = {
  actor?: SimpleUser;
  event: string;
  source: {
    type?: string;

    issue?: Issue;
  };
  created_at: string;
  updated_at: string;
};

/**
 * Timeline Unassigned Issue Event
 */
export type TimelineUnassignedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  assignee: SimpleUser;
  commit_id: string;
  commit_url: string;
  created_at: string;
  performed_via_github_app: null | Integration;
};

export type ActionsOrganizationPermissions = {
  allowed_actions?: AllowedActions;
  enabled_repositories: EnabledRepositories;
  selected_actions_url?: SelectedActionsUrl;

  /**
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when \`enabled_repositories\` is set to \`selected\`.
   */
  selected_repositories_url?: string;
};

/**
 * The time that the alert was dismissed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type CodeScanningAlertDismissedAt = string | null;

export type CodeScanningAlertRuleSummary = {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string;

  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;

  /**
   * A set of tags applicable for the rule.
   */
  tags?: any[];

  /**
   * The severity of the alert.
   */
  severity?: \\"none\\" | \\"note\\" | \\"warning\\" | \\"error\\";

  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
};

/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
export type CodeScanningAnalysisToolGuid = string | null;

/**
 * The name of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolName = string;

/**
 * Removed from Project Issue Event
 */
export type RemovedFromProjectIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    column_name: string;

    project_url: string;

    previous_column_name?: string;
  };
  performed_via_github_app: null | Integration;
};

/**
 * **Required when the \`state\` is \`resolved\`.** The reason for resolving the alert.
 */
export type SecretScanningAlertResolution =
  | \\"false_positive\\"
  | \\"wont_fix\\"
  | \\"revoked\\"
  | \\"used_in_tests\\"
  | null;

/**
 * GitHub Actions Cache Usage by repository.
 */
export type ActionsCacheUsageByRepository = {
  /**
   * The repository owner and name for the cache usage being shown.
   */
  full_name: string;

  /**
   * The number of active caches in the repository.
   */
  active_caches_count: number;

  /**
   * The sum of the size in bytes of all the active cache items in the repository.
   */
  active_caches_size_in_bytes: number;
};

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 */
export type CodeScanningAnalysisCommitSha = string;

/**
 * The time that the analysis was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 */
export type CodeScanningAnalysisCreatedAt = string;

/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [\`gzip\`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \\"[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\\"
 */
export type CodeScanningAnalysisSarifFile = string;

export type ActionsCacheUsageOrgEnterprise = {
  /**
   * The count of active caches across all repositories of an enterprise or an organization.
   */
  total_active_caches_count: number;

  /**
   * The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
   */
  total_active_caches_size_in_bytes: number;
};

/**
 * A classification of the file. For example to identify it as generated.
 */
export type CodeScanningAlertClassification = \\"source\\" | \\"generated\\" | \\"test\\" | \\"library\\" | null;

/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 */
export type CodeScanningAnalysisEnvironment = string;

export type OrganizationSecretScanningAlert = {
  url?: AlertUrl;
  state?: SecretScanningAlertState;
  number?: AlertNumber;

  /**
   * The secret that was detected.
   */
  secret?: string;
  html_url?: AlertHtmlUrl;
  created_at?: AlertCreatedAt;
  repository?: SimpleRepository;
  resolution?: SecretScanningAlertResolution;
  updated_at?: null | AlertUpdatedAt;

  /**
   * The time that the alert was resolved in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  resolved_at?: string;
  resolved_by?: null | SimpleUser;

  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;

  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;

  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean;

  /** 
* User-friendly name for the detected secret, matching the \`secret_type\`.
For a list of built-in patterns, see \\"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\\"
*/
  secret_type_display_name?: string;

  /**
   * The time that push protection was bypassed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   */
  push_protection_bypassed_at?: string;
  push_protection_bypassed_by?: null | SimpleUser;
};

/**
 * Repository Collaborator Permission
 */
export type RepositoryCollaboratorPermission = {
  user: null | Collaborator;
  role_name: string;
  permission: string;
};

/**
 * Review Request Removed Issue Event
 */
export type ReviewRequestRemovedIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  requested_team?: Team;
  review_requester: SimpleUser;
  requested_reviewer?: SimpleUser;
  performed_via_github_app: null | Integration;
};

export type AdvancedSecurityActiveCommitters = {
  total_count?: number;
  repositories: Array<AdvancedSecurityActiveCommittersRepository>;
  total_advanced_security_committers?: number;
};

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
export type CodeScanningAnalysisAnalysisKey = string;

/**
 * The version of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolVersion = string | null;

/**
 * Converted Note to Issue Issue Event
 */
export type ConvertedNoteToIssueIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    column_name: string;

    project_url: string;

    previous_column_name?: string;
  };
  performed_via_github_app: Integration;
};

/**
 * Moved Column in Project Issue Event
 */
export type MovedColumnInProjectIssueEvent = {
  id: number;
  url: string;
  actor: SimpleUser;
  event: string;
  node_id: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  project_card?: {
    id: number;

    url: string;

    project_id: number;

    column_name: string;

    project_url: string;

    previous_column_name?: string;
  };
  performed_via_github_app: null | Integration;
};

/**
 * Custom repository roles created by organization administrators
 */
export type OrganizationCustomRepositoryRole = {
  /**
   * The unique identifier of the custom role.
   */
  id: number;

  /**
   * The name of the custom role.
   */
  name: string;
};

/**
 * The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
 */
export type ActionsDefaultWorkflowPermissions = \\"read\\" | \\"write\\";

/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
 */
export type CodeScanningAlertDismissedReason =
  | \\"false positive\\"
  | \\"won't fix\\"
  | \\"used in tests\\"
  | null;

/**
 * Protected Branch Pull Request Review
 */
export type ProtectedBranchPullRequestReview = {
  url?: string;
  dismiss_stale_reviews: boolean;
  dismissal_restrictions?: {
    url?: string;

    /**
     * The list of apps with review dismissal access.
     */
    apps?: Array<Integration>;

    /**
     * The list of teams with review dismissal access.
     */
    teams?: Array<Team>;

    /**
     * The list of users with review dismissal access.
     */
    users?: Array<SimpleUser>;

    teams_url?: string;

    users_url?: string;
  };
  require_code_owner_reviews: boolean;

  /**
   * Allow specific users, teams, or apps to bypass pull request requirements.
   */
  bypass_pull_request_allowances?: {
    /**
     * The list of apps allowed to bypass pull request requirements.
     */
    apps?: Array<Integration>;

    /**
     * The list of teams allowed to bypass pull request requirements.
     */
    teams?: Array<Team>;

    /**
     * The list of users allowed to bypass pull request requirements.
     */
    users?: Array<SimpleUser>;
  };
  required_approving_review_count?: number;
};

export type ActionsWorkflowAccessToRepository = {
  /** 
* Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
repository. \`none\` means access is only possible from workflows in this repository.
*/
  access_level: \\"none\\" | \\"organization\\" | \\"enterprise\\";
};

/**
 * The dismissal comment associated with the dismissal of the alert.
 */
export type CodeScanningAlertDismissedComment = string | null;

export type CodeScanningOrganizationAlertItems = {
  url: AlertUrl;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  state: CodeScanningAlertState;
  number: AlertNumber;
  fixed_at?: CodeScanningAlertFixedAt;
  html_url: AlertHtmlUrl;
  created_at: AlertCreatedAt;
  repository: SimpleRepository;
  updated_at?: AlertUpdatedAt;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_by: null | SimpleUser;
  instances_url: AlertInstancesUrl;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  most_recent_instance: CodeScanningAlertInstance;
};

/**
 * Protected Branch Required Status Check
 */
export type ProtectedBranchRequiredStatusCheck = {
  url?: string;
  checks: Array<{
    app_id: number;

    context: string;
  }>;
  strict?: boolean;
  contexts: Array<string>;
  contexts_url?: string;
  enforcement_level?: string;
};

/**
 * Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
 */
export type ActionsCanApprovePullRequestReviews = boolean;

export type ActionsGetDefaultWorkflowPermissions = {
  default_workflow_permissions: ActionsDefaultWorkflowPermissions;
  can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews;
};

export type ActionsSetDefaultWorkflowPermissions = {
  default_workflow_permissions?: ActionsDefaultWorkflowPermissions;
  can_approve_pull_request_reviews?: ActionsCanApprovePullRequestReviews;
};

export type AdvancedSecurityActiveCommittersUser = {
  user_login: string;
  last_pushed_date: string;
};

export type AdvancedSecurityActiveCommittersRepository = {
  name: string;
  advanced_security_committers: number;
  advanced_security_committers_breakdown: Array<AdvancedSecurityActiveCommittersUser>;
};

export type ActionsOidcCustomIssuerPolicyForEnterprise = {
  /**
   * Whether the enterprise customer requested a custom issuer URL.
   */
  include_enterprise_slug?: boolean;
};
",
  "actions.ts" => "import {
  ActionsCacheList,
  ActionsCacheUsageByRepository,
  ActionsCacheUsageOrgEnterprise,
  ActionsEnabled,
  ActionsGetDefaultWorkflowPermissions,
  ActionsOidcCustomIssuerPolicyForEnterprise,
  ActionsOrganizationPermissions,
  ActionsPublicKey,
  ActionsRepositoryPermissions,
  ActionsSecret,
  ActionsSetDefaultWorkflowPermissions,
  ActionsWorkflowAccessToRepository,
  AllowedActions,
  Artifact,
  AuthenticationToken,
  CodeScanningRef,
  Deployment,
  EmptyObject,
  EnabledRepositories,
  EnvironmentApprovals,
  Job,
  MinimalRepository,
  OptOutOidcCustomSub,
  OrganizationActionsSecret,
  PendingDeployment,
  Repository,
  Runner,
  RunnerApplication,
  RunnerGroupsOrg,
  RunnerLabel,
  SelectedActions,
  Workflow,
  WorkflowRun,
  WorkflowRunUsage,
  WorkflowUsage,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List self-hosted runners for an organization
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listSelfHostedRunnersForOrg: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  {
    runners: Array<Runner>;

    total_count: number;
  }
> = {
  id: \\"actions/list-self-hosted-runners-for-org\\",
};

/**
 * List organization secrets
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const listOrgSecrets: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  {
    secrets: Array<OrganizationActionsSecret>;

    total_count: number;
  }
> = {
  id: \\"actions/list-org-secrets\\",
};

/**
 * Get GitHub Actions cache usage for an organization
 * Gets the total GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the \`read:org\` scope to use this endpoint. GitHub Apps must have the \`organization_admistration:read\` permission to use this endpoint.
 */
export const getActionsCacheUsageForOrg: ApiHeroEndpoint<
  { org: string },
  ActionsCacheUsageOrgEnterprise
> = {
  id: \\"actions/get-actions-cache-usage-for-org\\",
};

/**
 * Get GitHub Actions permissions for an organization
 * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const getGithubActionsPermissionsOrganization: ApiHeroEndpoint<
  { org: string },
  ActionsOrganizationPermissions
> = {
  id: \\"actions/get-github-actions-permissions-organization\\",
};

/**
 * Set GitHub Actions permissions for an organization
 * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as \`allowed_actions\` to \`selected\` actions and reusable workflows, then you cannot override them for the organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setGithubActionsPermissionsOrganization: ApiHeroEndpoint<
  {
    org: string;
    body: {
      allowed_actions?: AllowedActions;

      enabled_repositories: EnabledRepositories;
    };
  },
  void
> = {
  id: \\"actions/set-github-actions-permissions-organization\\",
};

/**
 * List self-hosted runner groups for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listSelfHostedRunnerGroupsForOrg: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number; visibleToRepository?: string },
  {
    total_count: number;

    runner_groups: Array<RunnerGroupsOrg>;
  }
> = {
  id: \\"actions/list-self-hosted-runner-groups-for-org\\",
};

/**
 * Create a self-hosted runner group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Creates a new self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const createSelfHostedRunnerGroupForOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * Name of the runner group.
       */
      name: string;

      /**
       * List of runner IDs to add to the runner group.
       */
      runners?: Array<number>;

      /**
       * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
       */
      visibility?: \\"selected\\" | \\"all\\" | \\"private\\";

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * List of repository IDs that can access the runner group.
       */
      selected_repository_ids?: Array<number>;

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;
    };
  },
  RunnerGroupsOrg
> = {
  id: \\"actions/create-self-hosted-runner-group-for-org\\",
};

/**
 * List workflow runs for a repository
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listWorkflowRunsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    checkSuiteId?: number;
    status?:
      | \\"completed\\"
      | \\"action_required\\"
      | \\"cancelled\\"
      | \\"failure\\"
      | \\"neutral\\"
      | \\"skipped\\"
      | \\"stale\\"
      | \\"success\\"
      | \\"timed_out\\"
      | \\"in_progress\\"
      | \\"queued\\"
      | \\"requested\\"
      | \\"waiting\\";
    created?: string;
    excludePullRequests?: boolean;
    actor?: string;
    event?: string;
    branch?: string;
  },
  {
    total_count: number;

    workflow_runs: Array<WorkflowRun>;
  }
> = {
  id: \\"actions/list-workflow-runs-for-repo\\",
};

/**
 * List GitHub Actions caches for a repository
 * Lists the GitHub Actions caches for a repository.
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 * GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getActionsCacheList: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    sort?: \\"created_at\\" | \\"last_accessed_at\\" | \\"size_in_bytes\\";
    key?: string;
    ref?: CodeScanningRef;
  },
  ActionsCacheList
> = {
  id: \\"actions/get-actions-cache-list\\",
};

/**
 * Delete GitHub Actions caches for a repository (using a cache key)
 * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 *
 * GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteActionsCacheByKey: ApiHeroEndpoint<
  { owner: string; repo: string; key: string; ref?: CodeScanningRef },
  ActionsCacheList
> = {
  id: \\"actions/delete-actions-cache-by-key\\",
};

/**
 * List runner applications for an organization
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listRunnerApplicationsForOrg: ApiHeroEndpoint<
  { org: string },
  Array<RunnerApplication>
> = {
  id: \\"actions/list-runner-applications-for-org\\",
};

/**
 * List self-hosted runners for a repository
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const listSelfHostedRunnersForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    runners: Array<Runner>;

    total_count: number;
  }
> = {
  id: \\"actions/list-self-hosted-runners-for-repo\\",
};

/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const listRepoSecrets: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    secrets: Array<ActionsSecret>;

    total_count: number;
  }
> = {
  id: \\"actions/list-repo-secrets\\",
};

/**
 * Get an organization public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const getOrgPublicKey: ApiHeroEndpoint<{ org: string }, ActionsPublicKey> = {
  id: \\"actions/get-org-public-key\\",
};

/**
 * Get a self-hosted runner for an organization
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const getSelfHostedRunnerForOrg: ApiHeroEndpoint<{ org: string; runnerId: number }, Runner> =
  {
    id: \\"actions/get-self-hosted-runner-for-org\\",
  };

/**
 * Delete a self-hosted runner from an organization
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerFromOrg: ApiHeroEndpoint<
  { org: string; runnerId: number },
  void
> = {
  id: \\"actions/delete-self-hosted-runner-from-org\\",
};

/**
 * List artifacts for a repository
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listArtifactsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    artifacts: Array<Artifact>;

    total_count: number;
  }
> = {
  id: \\"actions/list-artifacts-for-repo\\",
};

/**
 * List repository workflows
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listRepoWorkflows: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    workflows: Array<Workflow>;

    total_count: number;
  }
> = {
  id: \\"actions/list-repo-workflows\\",
};

/**
 * Get default workflow permissions for an organization
 * Gets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an organization,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * \\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const getGithubActionsDefaultWorkflowPermissionsOrganization: ApiHeroEndpoint<
  { org: string },
  ActionsGetDefaultWorkflowPermissions
> = {
  id: \\"actions/get-github-actions-default-workflow-permissions-organization\\",
};

/**
 * Set default workflow permissions for an organization
 * Sets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an organization, and sets if GitHub Actions
 * can submit approving pull request reviews. For more information, see
 * \\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setGithubActionsDefaultWorkflowPermissionsOrganization: ApiHeroEndpoint<
  { org: string; body?: ActionsSetDefaultWorkflowPermissions },
  void
> = {
  id: \\"actions/set-github-actions-default-workflow-permissions-organization\\",
};

/**
 * Create a remove token for an organization
 * Returns a token that you can pass to the \`config\` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace \`TOKEN\` with the remove token provided by this
 * endpoint.
 *
 * \`\`\`
 * ./config.sh remove --token TOKEN
 * \`\`\`
 */
export const createRemoveTokenForOrg: ApiHeroEndpoint<{ org: string }, AuthenticationToken> = {
  id: \\"actions/create-remove-token-for-org\\",
};

/**
 * Get an organization secret
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const getOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string },
  OrganizationActionsSecret
> = {
  id: \\"actions/get-org-secret\\",
};

/**
 * Create or update an organization secret
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;

      /**
       * Which type of organization repositories have access to the organization secret. \`selected\` means only the repositories specified by \`selected_repository_ids\` can access the secret.
       */
      visibility: \\"all\\" | \\"private\\" | \\"selected\\";

      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
       */
      encrypted_value?: string;

      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids?: Array<number>;
    };
  },
  EmptyObject
> = {
  id: \\"actions/create-or-update-org-secret\\",
};

/**
 * Delete an organization secret
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const deleteOrgSecret: ApiHeroEndpoint<{ org: string; secretName: string }, void> = {
  id: \\"actions/delete-org-secret\\",
};

/**
 * Get GitHub Actions cache usage for a repository
 * Gets GitHub Actions cache usage for a repository.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getActionsCacheUsage: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsCacheUsageByRepository
> = {
  id: \\"actions/get-actions-cache-usage\\",
};

/**
 * Get GitHub Actions permissions for a repository
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const getGithubActionsPermissionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsRepositoryPermissions
> = {
  id: \\"actions/get-github-actions-permissions-repository\\",
};

/**
 * Set GitHub Actions permissions for a repository
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
 *
 * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as \`allowed_actions\` to \`selected\` actions and reusable workflows, then you cannot override them for the repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const setGithubActionsPermissionsRepository: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      enabled: ActionsEnabled;

      allowed_actions?: AllowedActions;
    };
  },
  void
> = {
  id: \\"actions/set-github-actions-permissions-repository\\",
};

/**
 * Get a job for a workflow run
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getJobForWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; jobId: number },
  Job
> = {
  id: \\"actions/get-job-for-workflow-run\\",
};

/**
 * Get a workflow run
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number; excludePullRequests?: boolean },
  WorkflowRun
> = {
  id: \\"actions/get-workflow-run\\",
};

/**
 * Delete a workflow run
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:write\` permission to use
 * this endpoint.
 */
export const deleteWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  void
> = {
  id: \\"actions/delete-workflow-run\\",
};

/**
 * List selected repositories enabled for GitHub Actions in an organization
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const listSelectedRepositoriesEnabledGithubActionsOrganization: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<Repository>;
  }
> = {
  id: \\"actions/list-selected-repositories-enabled-github-actions-organization\\",
};

/**
 * Set selected repositories enabled for GitHub Actions in an organization
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setSelectedRepositoriesEnabledGithubActionsOrganization: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * List of repository IDs to enable for GitHub Actions.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-selected-repositories-enabled-github-actions-organization\\",
};

/**
 * Get GitHub Actions cache usage for an enterprise
 * Gets the total GitHub Actions cache usage for an enterprise.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const getActionsCacheUsageForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  ActionsCacheUsageOrgEnterprise
> = {
  id: \\"actions/get-actions-cache-usage-for-enterprise\\",
};

/**
 * List repositories with GitHub Actions cache usage for an organization
 * Lists repositories and their GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the \`read:org\` scope to use this endpoint. GitHub Apps must have the \`organization_admistration:read\` permission to use this endpoint.
 */
export const getActionsCacheUsageByRepoForOrg: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  {
    total_count: number;

    repository_cache_usages: Array<ActionsCacheUsageByRepository>;
  }
> = {
  id: \\"actions/get-actions-cache-usage-by-repo-for-org\\",
};

/**
 * Create a registration token for an organization
 * Returns a token that you can pass to the \`config\` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * \`\`\`
 */
export const createRegistrationTokenForOrg: ApiHeroEndpoint<{ org: string }, AuthenticationToken> =
  {
    id: \\"actions/create-registration-token-for-org\\",
  };

/**
 * List labels for a self-hosted runner for an organization
 * Lists all labels for a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listLabelsForSelfHostedRunnerForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/list-labels-for-self-hosted-runner-for-org\\",
};

/**
 * Add custom labels to a self-hosted runner for an organization
 * Add custom labels to a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const addCustomLabelsToSelfHostedRunnerForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to add to the runner.
       */
      labels: Array<string>;
    };
  },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/add-custom-labels-to-self-hosted-runner-for-org\\",
};

/**
 * Set custom labels for a self-hosted runner for an organization
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const setCustomLabelsForSelfHostedRunnerForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
       */
      labels: Array<string>;
    };
  },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/set-custom-labels-for-self-hosted-runner-for-org\\",
};

/**
 * Remove all custom labels from a self-hosted runner for an organization
 * Remove all custom labels from a self-hosted runner configured in an
 * organization. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeAllCustomLabelsFromSelfHostedRunnerForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/remove-all-custom-labels-from-self-hosted-runner-for-org\\",
};

/**
 * Delete a GitHub Actions cache for a repository (using a cache ID)
 * Deletes a GitHub Actions cache for a repository, using a cache ID.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 *
 * GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteActionsCacheById: ApiHeroEndpoint<
  { cacheId: number; owner: string; repo: string },
  void
> = {
  id: \\"actions/delete-actions-cache-by-id\\",
};

/**
 * List runner applications for a repository
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const listRunnerApplicationsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<RunnerApplication>
> = {
  id: \\"actions/list-runner-applications-for-repo\\",
};

/**
 * Get allowed actions and reusable workflows for an organization
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const getAllowedActionsOrganization: ApiHeroEndpoint<{ org: string }, SelectedActions> = {
  id: \\"actions/get-allowed-actions-organization\\",
};

/**
 * Set allowed actions and reusable workflows for an organization
 * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * If the organization belongs to an enterprise that has \`selected\` actions and reusable workflows set at the enterprise level, then you cannot override any of the enterprise's allowed actions and reusable workflows settings.
 *
 * To use the \`patterns_allowed\` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the \`patterns_allowed\` setting only applies to public repositories in the organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const setAllowedActionsOrganization: ApiHeroEndpoint<
  { org: string; body?: SelectedActions },
  void
> = {
  id: \\"actions/set-allowed-actions-organization\\",
};

/**
 * Download job logs for a workflow run
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for \`Location:\` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must
 * have the \`actions:read\` permission to use this endpoint.
 */
export const downloadJobLogsForWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; jobId: number },
  void
> = {
  id: \\"actions/download-job-logs-for-workflow-run\\",
};

/**
 * Get the level of access for workflows outside of the repository
 * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to internal repositories. For more information, see \\"[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the
 * repository \`administration\` permission to use this endpoint.
 */
export const getWorkflowAccessToRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsWorkflowAccessToRepository
> = {
  id: \\"actions/get-workflow-access-to-repository\\",
};

/**
 * Set the level of access for workflows outside of the repository
 * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to internal repositories. For more information, see \\"[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the
 * repository \`administration\` permission to use this endpoint.
 */
export const setWorkflowAccessToRepository: ApiHeroEndpoint<
  { owner: string; repo: string; body: ActionsWorkflowAccessToRepository },
  void
> = {
  id: \\"actions/set-workflow-access-to-repository\\",
};

/**
 * List jobs for a workflow run
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const listJobsForWorkflowRun: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    page?: number;
    perPage?: number;
    filter?: \\"latest\\" | \\"all\\";
  },
  {
    jobs: Array<Job>;

    total_count: number;
  }
> = {
  id: \\"actions/list-jobs-for-workflow-run\\",
};

/**
 * Download workflow run logs
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * \`Location:\` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have
 * the \`actions:read\` permission to use this endpoint.
 */
export const downloadWorkflowRunLogs: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  void
> = {
  id: \\"actions/download-workflow-run-logs\\",
};

/**
 * Delete workflow run logs
 * Deletes all logs for a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteWorkflowRunLogs: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  void
> = {
  id: \\"actions/delete-workflow-run-logs\\",
};

/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getRepoPublicKey: ApiHeroEndpoint<{ owner: string; repo: string }, ActionsPublicKey> =
  {
    id: \\"actions/get-repo-public-key\\",
  };

/**
 * Re-run a job from a workflow run
 * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const reRunJobForWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; jobId: number; body?: any | null },
  EmptyObject
> = {
  id: \\"actions/re-run-job-for-workflow-run\\",
};

/**
 * Get a self-hosted runner for a repository
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const getSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  Runner
> = {
  id: \\"actions/get-self-hosted-runner-for-repo\\",
};

/**
 * Delete a self-hosted runner from a repository
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the \`repo\`
 * scope to use this endpoint.
 */
export const deleteSelfHostedRunnerFromRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  void
> = {
  id: \\"actions/delete-self-hosted-runner-from-repo\\",
};

/**
 * Re-run a workflow
 * Re-runs your workflow run using its \`id\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const reRunWorkflow: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number; body?: any | null },
  {}
> = {
  id: \\"actions/re-run-workflow\\",
};

/**
 * Get default workflow permissions for a repository
 * Gets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in a repository,
 * as well as if GitHub Actions can submit approving pull request reviews.
 * For more information, see \\"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the repository \`administration\` permission to use this API.
 */
export const getGithubActionsDefaultWorkflowPermissionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  ActionsGetDefaultWorkflowPermissions
> = {
  id: \\"actions/get-github-actions-default-workflow-permissions-repository\\",
};

/**
 * Set default workflow permissions for a repository
 * Sets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in a repository, and sets if GitHub Actions
 * can submit approving pull request reviews.
 * For more information, see \\"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the repository \`administration\` permission to use this API.
 */
export const setGithubActionsDefaultWorkflowPermissionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string; body: ActionsSetDefaultWorkflowPermissions },
  void
> = {
  id: \\"actions/set-github-actions-default-workflow-permissions-repository\\",
};

/**
 * Create a remove token for a repository
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh remove --token TOKEN
 * \`\`\`
 */
export const createRemoveTokenForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  AuthenticationToken
> = {
  id: \\"actions/create-remove-token-for-repo\\",
};

/**
 * Cancel a workflow run
 * Cancels a workflow run using its \`id\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const cancelWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  {}
> = {
  id: \\"actions/cancel-workflow-run\\",
};

/**
 * Get workflow run usage
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflowRunUsage: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  WorkflowRunUsage
> = {
  id: \\"actions/get-workflow-run-usage\\",
};

/**
 * Get a self-hosted runner group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Gets a specific self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const getSelfHostedRunnerGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number },
  RunnerGroupsOrg
> = {
  id: \\"actions/get-self-hosted-runner-group-for-org\\",
};

/**
 * Delete a self-hosted runner group from an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Deletes a self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerGroupFromOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number },
  void
> = {
  id: \\"actions/delete-self-hosted-runner-group-from-org\\",
};

/**
 * Update a self-hosted runner group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Updates the \`name\` and \`visibility\` of a self-hosted runner group in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const updateSelfHostedRunnerGroupForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerGroupId: number;
    body: {
      /**
       * Name of the runner group.
       */
      name: string;

      /**
       * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
       */
      visibility?: \\"selected\\" | \\"all\\" | \\"private\\";

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;
    };
  },
  RunnerGroupsOrg
> = {
  id: \\"actions/update-self-hosted-runner-group-for-org\\",
};

/**
 * Approve a workflow run for a fork pull request
 * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const approveWorkflowRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  EmptyObject
> = {
  id: \\"actions/approve-workflow-run\\",
};

/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  ActionsSecret
> = {
  id: \\"actions/get-repo-secret\\",
};

/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateRepoSecret: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    secretName: string;
    body: {
      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;

      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
       */
      encrypted_value?: string;
    };
  },
  {}
> = {
  id: \\"actions/create-or-update-repo-secret\\",
};

/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const deleteRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  void
> = {
  id: \\"actions/delete-repo-secret\\",
};

/**
 * Get the opt-out flag of an OIDC subject claim customization for a repository
 * Gets the \`opt-out\` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint. GitHub Apps must have the \`organization_administration:read\` permission to use this endpoint.
 */
export const getCustomOidcSubClaimForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  OptOutOidcCustomSub
> = {
  id: \\"actions/get-custom-oidc-sub-claim-for-repo\\",
};

/**
 * Set the opt-out flag of an OIDC subject claim customization for a repository
 * Sets the \`opt-out\` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const setCustomOidcSubClaimForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; body: OptOutOidcCustomSub },
  EmptyObject
> = {
  id: \\"actions/set-custom-oidc-sub-claim-for-repo\\",
};

/**
 * Remove a custom label from a self-hosted runner for an organization
 * Remove a custom label from a self-hosted runner configured
 * in an organization. Returns the remaining labels from the runner.
 *
 * This endpoint returns a \`404 Not Found\` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeCustomLabelFromSelfHostedRunnerForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number; name: string },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/remove-custom-label-from-self-hosted-runner-for-org\\",
};

/**
 * Get an artifact
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getArtifact: ApiHeroEndpoint<
  { artifactId: number; owner: string; repo: string },
  Artifact
> = {
  id: \\"actions/get-artifact\\",
};

/**
 * Delete an artifact
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const deleteArtifact: ApiHeroEndpoint<
  { artifactId: number; owner: string; repo: string },
  void
> = {
  id: \\"actions/delete-artifact\\",
};

/**
 * Get the review history for a workflow run
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getReviewsForRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  Array<EnvironmentApprovals>
> = {
  id: \\"actions/get-reviews-for-run\\",
};

/**
 * List workflow run artifacts
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const listWorkflowRunArtifacts: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number; page?: number; perPage?: number },
  {
    artifacts: Array<Artifact>;

    total_count: number;
  }
> = {
  id: \\"actions/list-workflow-run-artifacts\\",
};

/**
 * Get a workflow
 * Gets a specific workflow. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflow: ApiHeroEndpoint<
  { owner: string; workflowId: number | string; repo: string },
  Workflow
> = {
  id: \\"actions/get-workflow\\",
};

/**
 * Get default workflow permissions for an enterprise
 * Gets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an enterprise,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * \\"[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 * GitHub Apps must have the \`enterprise_administration:write\` permission to use this endpoint.
 */
export const getGithubActionsDefaultWorkflowPermissionsEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  ActionsGetDefaultWorkflowPermissions
> = {
  id: \\"actions/get-github-actions-default-workflow-permissions-enterprise\\",
};

/**
 * Set default workflow permissions for an enterprise
 * Sets the default workflow permissions granted to the \`GITHUB_TOKEN\` when running workflows in an enterprise, and sets
 * whether GitHub Actions can submit approving pull request reviews. For more information, see
 * \\"[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 * GitHub Apps must have the \`enterprise_administration:write\` permission to use this endpoint.
 */
export const setGithubActionsDefaultWorkflowPermissionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; body: ActionsSetDefaultWorkflowPermissions },
  void
> = {
  id: \\"actions/set-github-actions-default-workflow-permissions-enterprise\\",
};

/**
 * List selected repositories for an organization secret
 * Lists all repositories that have been selected when the \`visibility\` for repository access to a secret is set to \`selected\`. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const listSelectedReposForOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"actions/list-selected-repos-for-org-secret\\",
};

/**
 * Set selected repositories for an organization secret
 * Replaces all repositories for an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const setSelectedReposForOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-selected-repos-for-org-secret\\",
};

/**
 * Create a registration token for a repository
 * Returns a token that you can pass to the \`config\` script. The token expires after one hour. You must authenticate
 * using an access token with the \`repo\` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * \`\`\`
 */
export const createRegistrationTokenForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  AuthenticationToken
> = {
  id: \\"actions/create-registration-token-for-repo\\",
};

/**
 * List labels for a self-hosted runner for a repository
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const listLabelsForSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/list-labels-for-self-hosted-runner-for-repo\\",
};

/**
 * Add custom labels to a self-hosted runner for a repository
 * Add custom labels to a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const addCustomLabelsToSelfHostedRunnerForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to add to the runner.
       */
      labels: Array<string>;
    };
  },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/add-custom-labels-to-self-hosted-runner-for-repo\\",
};

/**
 * Set custom labels for a self-hosted runner for a repository
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const setCustomLabelsForSelfHostedRunnerForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
       */
      labels: Array<string>;
    };
  },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/set-custom-labels-for-self-hosted-runner-for-repo\\",
};

/**
 * Remove all custom labels from a self-hosted runner for a repository
 * Remove all custom labels from a self-hosted runner configured in a
 * repository. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const removeAllCustomLabelsFromSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/remove-all-custom-labels-from-self-hosted-runner-for-repo\\",
};

/**
 * Get allowed actions and reusable workflows for a repository
 * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const getAllowedActionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string },
  SelectedActions
> = {
  id: \\"actions/get-allowed-actions-repository\\",
};

/**
 * Set allowed actions and reusable workflows for a repository
 * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\\"
 *
 * If the repository belongs to an organization or enterprise that has \`selected\` actions and reusable workflows set at the organization or enterprise levels, then you cannot override any of the allowed actions and reusable workflows settings.
 *
 * To use the \`patterns_allowed\` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the \`patterns_allowed\` setting only applies to public repositories.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
 */
export const setAllowedActionsRepository: ApiHeroEndpoint<
  { owner: string; repo: string; body?: SelectedActions },
  void
> = {
  id: \\"actions/set-allowed-actions-repository\\",
};

/**
 * List workflow runs
 * List all workflow runs for a workflow. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope.
 */
export const listWorkflowRuns: ApiHeroEndpoint<
  {
    owner: string;
    workflowId: number | string;
    repo: string;
    page?: number;
    perPage?: number;
    checkSuiteId?: number;
    status?:
      | \\"completed\\"
      | \\"action_required\\"
      | \\"cancelled\\"
      | \\"failure\\"
      | \\"neutral\\"
      | \\"skipped\\"
      | \\"stale\\"
      | \\"success\\"
      | \\"timed_out\\"
      | \\"in_progress\\"
      | \\"queued\\"
      | \\"requested\\"
      | \\"waiting\\";
    created?: string;
    excludePullRequests?: boolean;
    actor?: string;
    event?: string;
    branch?: string;
  },
  {
    total_count: number;

    workflow_runs: Array<WorkflowRun>;
  }
> = {
  id: \\"actions/list-workflow-runs\\",
};

/**
 * Set the GitHub Actions OIDC custom issuer policy for an enterprise
 * Sets the GitHub Actions OpenID Connect (OIDC) custom issuer policy for an enterprise.
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 * GitHub Apps must have the \`enterprise_administration:write\` permission to use this endpoint.
 */
export const setActionsOidcCustomIssuerPolicyForEnterprise: ApiHeroEndpoint<
  { enterprise: string; body: ActionsOidcCustomIssuerPolicyForEnterprise },
  void
> = {
  id: \\"actions/set-actions-oidc-custom-issuer-policy-for-enterprise\\",
};

/**
 * List self-hosted runners in a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Lists self-hosted runners that are in a specific organization group.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listSelfHostedRunnersInGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; page?: number; perPage?: number },
  {
    runners: Array<Runner>;

    total_count: number;
  }
> = {
  id: \\"actions/list-self-hosted-runners-in-group-for-org\\",
};

/**
 * Set self-hosted runners in a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Replaces the list of self-hosted runners that are part of an organization runner group.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const setSelfHostedRunnersInGroupForOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerGroupId: number;
    body: {
      /**
       * List of runner IDs to add to the runner group.
       */
      runners: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-self-hosted-runners-in-group-for-org\\",
};

/**
 * Enable a selected repository for GitHub Actions in an organization
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const enableSelectedRepositoryGithubActionsOrganization: ApiHeroEndpoint<
  { org: string; repositoryId: number },
  void
> = {
  id: \\"actions/enable-selected-repository-github-actions-organization\\",
};

/**
 * Disable a selected repository for GitHub Actions in an organization
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
 */
export const disableSelectedRepositoryGithubActionsOrganization: ApiHeroEndpoint<
  { org: string; repositoryId: number },
  void
> = {
  id: \\"actions/disable-selected-repository-github-actions-organization\\",
};

/**
 * Enable a workflow
 * Enables a workflow and sets the \`state\` of the workflow to \`active\`. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const enableWorkflow: ApiHeroEndpoint<
  { owner: string; workflowId: number | string; repo: string },
  void
> = {
  id: \\"actions/enable-workflow\\",
};

/**
 * Get workflow usage
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getWorkflowUsage: ApiHeroEndpoint<
  { owner: string; workflowId: number | string; repo: string },
  WorkflowUsage
> = {
  id: \\"actions/get-workflow-usage\\",
};

/**
 * Re-run failed jobs from a workflow run
 * Re-run all of the failed jobs and their dependent jobs in a workflow run using the \`id\` of the workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const reRunWorkflowFailedJobs: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number; body?: any | null },
  EmptyObject
> = {
  id: \\"actions/re-run-workflow-failed-jobs\\",
};

/**
 * Disable a workflow
 * Disables a workflow and sets the \`state\` of the workflow to \`disabled_manually\`. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
 */
export const disableWorkflow: ApiHeroEndpoint<
  { owner: string; workflowId: number | string; repo: string },
  void
> = {
  id: \\"actions/disable-workflow\\",
};

/**
 * Remove a custom label from a self-hosted runner for a repository
 * Remove a custom label from a self-hosted runner configured
 * in a repository. Returns the remaining labels from the runner.
 *
 * This endpoint returns a \`404 Not Found\` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the \`repo\` scope to use this
 * endpoint.
 */
export const removeCustomLabelFromSelfHostedRunnerForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; runnerId: number; name: string },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"actions/remove-custom-label-from-self-hosted-runner-for-repo\\",
};

/**
 * Get pending deployments for a workflow run
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getPendingDeploymentsForRun: ApiHeroEndpoint<
  { owner: string; repo: string; runId: number },
  Array<PendingDeployment>
> = {
  id: \\"actions/get-pending-deployments-for-run\\",
};

/**
 * Review pending deployments for a workflow run
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the \`repo\` scope to use this endpoint.
 */
export const reviewPendingDeploymentsForRun: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    runId: number;
    body: {
      /**
       * Whether to approve or reject deployment to the specified environments.
       */
      state: \\"approved\\" | \\"rejected\\";

      /**
       * A comment to accompany the deployment review
       */
      comment: string;

      /**
       * The list of environment ids to approve or reject
       */
      environment_ids: Array<number>;
    };
  },
  Array<Deployment>
> = {
  id: \\"actions/review-pending-deployments-for-run\\",
};

/**
 * List repository access to a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Lists the repositories with access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  { org: string; runnerGroupId: number; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"actions/list-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * Set repository access for a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const setRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  {
    org: string;
    runnerGroupId: number;
    body: {
      /**
       * List of repository IDs that can access the runner group.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"actions/set-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * Create a workflow dispatch event
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`.
 *
 * You must configure your GitHub Actions workflow to run when the [\`workflow_dispatch\` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The \`inputs\` are configured in the workflow file. For more information about how to configure the \`workflow_dispatch\` event in the workflow file, see \\"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\\"
 *
 * You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint. For more information, see \\"[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\\"
 */
export const createWorkflowDispatch: ApiHeroEndpoint<
  {
    owner: string;
    workflowId: number | string;
    repo: string;
    body: {
      /**
       * The git reference for the workflow. The reference can be a branch or tag name.
       */
      ref: string;

      /**
       * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when \`inputs\` are omitted.
       */
      inputs?: Record<string, string>;
    };
  },
  void
> = {
  id: \\"actions/create-workflow-dispatch\\",
};

/**
 * Get a workflow run attempt
 * Gets a specific workflow run attempt. Anyone with read access to the repository
 * can use this endpoint. If the repository is private you must use an access token
 * with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to
 * use this endpoint.
 */
export const getWorkflowRunAttempt: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    attemptNumber: number;
    runId: number;
    excludePullRequests?: boolean;
  },
  WorkflowRun
> = {
  id: \\"actions/get-workflow-run-attempt\\",
};

/**
 * List environment secrets
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const listEnvironmentSecrets: ApiHeroEndpoint<
  { environmentName: string; repositoryId: number; page?: number; perPage?: number },
  {
    secrets: Array<ActionsSecret>;

    total_count: number;
  }
> = {
  id: \\"actions/list-environment-secrets\\",
};

/**
 * Add selected repository to an organization secret
 * Adds a repository to an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const addSelectedRepoToOrgSecret: ApiHeroEndpoint<
  { org: string; repositoryId: number; secretName: string },
  void
> = {
  id: \\"actions/add-selected-repo-to-org-secret\\",
};

/**
 * Remove selected repository from an organization secret
 * Removes a repository from an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
 */
export const removeSelectedRepoFromOrgSecret: ApiHeroEndpoint<
  { org: string; repositoryId: number; secretName: string },
  void
> = {
  id: \\"actions/remove-selected-repo-from-org-secret\\",
};

/**
 * Download an artifact
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for \`Location:\` in
 * the response header to find the URL for the download. The \`:archive_format\` must be \`zip\`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope.
 * GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const downloadArtifact: ApiHeroEndpoint<
  { artifactId: number; owner: string; repo: string; archiveFormat: string },
  void
> = {
  id: \\"actions/download-artifact\\",
};

/**
 * Add a self-hosted runner to a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Adds a self-hosted runner to a runner group configured in an organization.
 *
 * You must authenticate using an access token with the \`admin:org\`
 * scope to use this endpoint.
 */
export const addSelfHostedRunnerToGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number; runnerGroupId: number },
  void
> = {
  id: \\"actions/add-self-hosted-runner-to-group-for-org\\",
};

/**
 * Remove a self-hosted runner from a group for an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeSelfHostedRunnerFromGroupForOrg: ApiHeroEndpoint<
  { org: string; runnerId: number; runnerGroupId: number },
  void
> = {
  id: \\"actions/remove-self-hosted-runner-from-group-for-org\\",
};

/**
 * List jobs for a workflow run attempt
 * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const listJobsForWorkflowRunAttempt: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    attemptNumber: number;
    runId: number;
    page?: number;
    perPage?: number;
  },
  {
    jobs: Array<Job>;

    total_count: number;
  }
> = {
  id: \\"actions/list-jobs-for-workflow-run-attempt\\",
};

/**
 * Download workflow run attempt logs
 * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
 * 1 minute. Look for \`Location:\` in the response header to find the URL for the download. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope.
 * GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const downloadWorkflowRunAttemptLogs: ApiHeroEndpoint<
  { owner: string; repo: string; attemptNumber: number; runId: number },
  void
> = {
  id: \\"actions/download-workflow-run-attempt-logs\\",
};

/**
 * Add repository access to a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\`
 * scope to use this endpoint.
 */
export const addRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  { org: string; repositoryId: number; runnerGroupId: number },
  void
> = {
  id: \\"actions/add-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * Remove repository access to a self-hosted runner group in an organization
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\\"
 *
 *
 * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\\"
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const removeRepoAccessToSelfHostedRunnerGroupInOrg: ApiHeroEndpoint<
  { org: string; repositoryId: number; runnerGroupId: number },
  void
> = {
  id: \\"actions/remove-repo-access-to-self-hosted-runner-group-in-org\\",
};

/**
 * Get an environment public key
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getEnvironmentPublicKey: ApiHeroEndpoint<
  { environmentName: string; repositoryId: number },
  ActionsPublicKey
> = {
  id: \\"actions/get-environment-public-key\\",
};

/**
 * Get an environment secret
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const getEnvironmentSecret: ApiHeroEndpoint<
  { environmentName: string; repositoryId: number; secretName: string },
  ActionsSecret
> = {
  id: \\"actions/get-environment-secret\\",
};

/**
 * Create or update an environment secret
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateEnvironmentSecret: ApiHeroEndpoint<
  {
    environmentName: string;
    repositoryId: number;
    secretName: string;
    body: {
      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id: string;

      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
       */
      encrypted_value: string;
    };
  },
  EmptyObject
> = {
  id: \\"actions/create-or-update-environment-secret\\",
};

/**
 * Delete an environment secret
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
 */
export const deleteEnvironmentSecret: ApiHeroEndpoint<
  { environmentName: string; repositoryId: number; secretName: string },
  void
> = {
  id: \\"actions/delete-environment-secret\\",
};
",
  "activity.ts" => "import {
  Event,
  Feed,
  MinimalRepository,
  Repository,
  RepositorySubscription,
  SimpleUser,
  Stargazer,
  StarredRepository,
  Thread,
  ThreadSubscription,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get feeds
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const getFeeds: ApiHeroEndpoint<never, Feed> = {
  id: \\"activity/get-feeds\\",
};

/**
 * List public events
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const listPublicEvents: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-events\\",
};

/**
 * List repositories starred by the authenticated user
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const listReposStarredByAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; direction?: \\"asc\\" | \\"desc\\"; perPage?: number; sort?: \\"created\\" | \\"updated\\" },
  Array<Repository>
> = {
  id: \\"activity/list-repos-starred-by-authenticated-user\\",
};

/**
 * List notifications for the authenticated user
 * List all notifications for the current user, sorted by most recently updated.
 */
export const listNotificationsForAuthenticatedUser: ApiHeroEndpoint<
  {
    page?: number;
    since?: string;
    before?: string;
    perPage?: number;
    participating?: boolean;
    all?: boolean;
  },
  Array<Thread>
> = {
  id: \\"activity/list-notifications-for-authenticated-user\\",
};

/**
 * Mark notifications as read
 * Marks all notifications as \\"read\\" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a \`202 Accepted\` status and GitHub will run an asynchronous process to mark notifications as \\"read.\\" To check whether any \\"unread\\" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter \`all=false\`.
 */
export const markNotificationsAsRead: ApiHeroEndpoint<
  {
    body?: {
      /**
       * Whether the notification has been read.
       */
      read?: boolean;

      /**
       * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. Default: The current timestamp.
       */
      last_read_at?: string;
    };
  },
  {
    message?: string;
  }
> = {
  id: \\"activity/mark-notifications-as-read\\",
};

/**
 * List public organization events
 */
export const listPublicOrgEvents: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-org-events\\",
};

/**
 * List repositories watched by the authenticated user
 * Lists repositories the authenticated user is watching.
 */
export const listWatchedReposForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<MinimalRepository>
> = {
  id: \\"activity/list-watched-repos-for-authenticated-user\\",
};

/**
 * List events for the authenticated user
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const listEventsForAuthenticatedUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-events-for-authenticated-user\\",
};

/**
 * List repositories starred by a user
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const listReposStarredByUser: ApiHeroEndpoint<
  {
    username: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\";
  },
  Array<StarredRepository> | Array<Repository>
> = {
  id: \\"activity/list-repos-starred-by-user\\",
};

/**
 * List repository events
 */
export const listRepoEvents: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-repo-events\\",
};

/**
 * Check if a repository is starred by the authenticated user
 */
export const checkRepoIsStarredByAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string },
  void
> = {
  id: \\"activity/check-repo-is-starred-by-authenticated-user\\",
};

/**
 * Star a repository for the authenticated user
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const starRepoForAuthenticatedUser: ApiHeroEndpoint<{ owner: string; repo: string }, void> =
  {
    id: \\"activity/star-repo-for-authenticated-user\\",
  };

/**
 * Unstar a repository for the authenticated user
 */
export const unstarRepoForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string },
  void
> = {
  id: \\"activity/unstar-repo-for-authenticated-user\\",
};

/**
 * List public events for a network of repositories
 */
export const listPublicEventsForRepoNetwork: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-events-for-repo-network\\",
};

/**
 * List public events for a user
 */
export const listPublicEventsForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-public-events-for-user\\",
};

/**
 * List repositories watched by a user
 * Lists repositories a user is watching.
 */
export const listReposWatchedByUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<MinimalRepository>
> = {
  id: \\"activity/list-repos-watched-by-user\\",
};

/**
 * List stargazers
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const listStargazersForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<SimpleUser> | Array<Stargazer>
> = {
  id: \\"activity/list-stargazers-for-repo\\",
};

/**
 * List watchers
 * Lists the people watching the specified repository.
 */
export const listWatchersForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<SimpleUser>
> = {
  id: \\"activity/list-watchers-for-repo\\",
};

/**
 * List events received by the authenticated user
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const listReceivedEventsForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-received-events-for-user\\",
};

/**
 * Get a thread
 */
export const getThread: ApiHeroEndpoint<{ threadId: number }, Thread> = {
  id: \\"activity/get-thread\\",
};

/**
 * Mark a thread as read
 */
export const markThreadAsRead: ApiHeroEndpoint<{ threadId: number }, any> = {
  id: \\"activity/mark-thread-as-read\\",
};

/**
 * Get a repository subscription
 */
export const getRepoSubscription: ApiHeroEndpoint<
  { owner: string; repo: string },
  RepositorySubscription
> = {
  id: \\"activity/get-repo-subscription\\",
};

/**
 * Set a repository subscription
 * If you would like to watch a repository, set \`subscribed\` to \`true\`. If you would like to ignore notifications made within a repository, set \`ignored\` to \`true\`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const setRepoSubscription: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * Determines if all notifications should be blocked from this repository.
       */
      ignored?: boolean;

      /**
       * Determines if notifications should be received from this repository.
       */
      subscribed?: boolean;
    };
  },
  RepositorySubscription
> = {
  id: \\"activity/set-repo-subscription\\",
};

/**
 * Delete a repository subscription
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const deleteRepoSubscription: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"activity/delete-repo-subscription\\",
};

/**
 * List repository notifications for the authenticated user
 * List all notifications for the current user.
 */
export const listRepoNotificationsForAuthenticatedUser: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    since?: string;
    before?: string;
    perPage?: number;
    participating?: boolean;
    all?: boolean;
  },
  Array<Thread>
> = {
  id: \\"activity/list-repo-notifications-for-authenticated-user\\",
};

/**
 * Mark repository notifications as read
 * Marks all notifications in a repository as \\"read\\" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a \`202 Accepted\` status and GitHub will run an asynchronous process to mark notifications as \\"read.\\" To check whether any \\"unread\\" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter \`all=false\`.
 */
export const markRepoNotificationsAsRead: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. Default: The current timestamp.
       */
      last_read_at?: string;
    };
  },
  {
    url?: string;

    message?: string;
  }
> = {
  id: \\"activity/mark-repo-notifications-as-read\\",
};

/**
 * List organization events for the authenticated user
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const listOrgEventsForAuthenticatedUser: ApiHeroEndpoint<
  { username: string; org: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-org-events-for-authenticated-user\\",
};

/**
 * List public events received by a user
 */
export const listReceivedPublicEventsForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<Event>
> = {
  id: \\"activity/list-received-public-events-for-user\\",
};

/**
 * Get a thread subscription for the authenticated user
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const getThreadSubscriptionForAuthenticatedUser: ApiHeroEndpoint<
  { threadId: number },
  ThreadSubscription
> = {
  id: \\"activity/get-thread-subscription-for-authenticated-user\\",
};

/**
 * Set a thread subscription
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const setThreadSubscription: ApiHeroEndpoint<
  {
    threadId: number;
    body?: {
      /**
       * Whether to block all notifications from a thread.
       */
      ignored?: boolean;
    };
  },
  ThreadSubscription
> = {
  id: \\"activity/set-thread-subscription\\",
};

/**
 * Delete a thread subscription
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set \`ignore\` to \`true\`.
 */
export const deleteThreadSubscription: ApiHeroEndpoint<{ threadId: number }, void> = {
  id: \\"activity/delete-thread-subscription\\",
};
",
  "apps.ts" => "import {
  AppPermissions,
  Authorization,
  HookDelivery,
  HookDeliveryItem,
  Installation,
  InstallationToken,
  Integration,
  MarketplaceListingPlan,
  MarketplacePurchase,
  Repository,
  UserMarketplacePurchase,
  WebhookConfig,
  WebhookConfigContentType,
  WebhookConfigInsecureSsl,
  WebhookConfigSecret,
  WebhookConfigUrl,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get the authenticated app
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the \`installations_count\` in the response. For more details about your app's installations, see the \\"[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)\\" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getAuthenticated: ApiHeroEndpoint<never, Integration> = {
  id: \\"apps/get-authenticated\\",
};

/**
 * Get a webhook configuration for an app
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \\"[Creating a GitHub App](/developers/apps/creating-a-github-app).\\"
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getWebhookConfigForApp: ApiHeroEndpoint<never, WebhookConfig> = {
  id: \\"apps/get-webhook-config-for-app\\",
};

/**
 * Update a webhook configuration for an app
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \\"[Creating a GitHub App](/developers/apps/creating-a-github-app).\\"
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const updateWebhookConfigForApp: ApiHeroEndpoint<
  {
    body: {
      url?: WebhookConfigUrl;

      secret?: WebhookConfigSecret;

      content_type?: WebhookConfigContentType;

      insecure_ssl?: WebhookConfigInsecureSsl;
    };
  },
  WebhookConfig
> = {
  id: \\"apps/update-webhook-config-for-app\\",
};

/**
 * Get an app
 * **Note**: The \`:app_slug\` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., \`https://github.com/settings/apps/:app_slug\`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const getBySlug: ApiHeroEndpoint<{ appSlug: string }, Integration> = {
  id: \\"apps/get-by-slug\\",
};

/**
 * List installations for the authenticated app
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the \`permissions\` key.
 */
export const listInstallations: ApiHeroEndpoint<
  { page?: number; since?: string; perPage?: number; outdated?: string },
  Array<Installation>
> = {
  id: \\"apps/list-installations\\",
};

/**
 * Revoke an installation access token
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \\"[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)\\" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const revokeInstallationAccessToken: ApiHeroEndpoint<never, void> = {
  id: \\"apps/revoke-installation-access-token\\",
};

/**
 * List app installations accessible to the user access token
 * Lists installations of your GitHub App that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the \`permissions\` key.
 */
export const listInstallationsForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  {
    total_count: number;

    installations: Array<Installation>;
  }
> = {
  id: \\"apps/list-installations-for-authenticated-user\\",
};

/**
 * List deliveries for an app webhook
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const listWebhookDeliveries: ApiHeroEndpoint<
  { perPage?: number; cursor?: string },
  Array<HookDeliveryItem>
> = {
  id: \\"apps/list-webhook-deliveries\\",
};

/**
 * Get an organization installation for the authenticated app
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getOrgInstallation: ApiHeroEndpoint<{ org: string }, Installation> = {
  id: \\"apps/get-org-installation\\",
};

/**
 * List repositories accessible to the app installation
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const listReposAccessibleToInstallation: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<Repository>;

    repository_selection?: string;
  }
> = {
  id: \\"apps/list-repos-accessible-to-installation\\",
};

/**
 * List plans
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listPlans: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<MarketplaceListingPlan>
> = {
  id: \\"apps/list-plans\\",
};

/**
 * List subscriptions for the authenticated user
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const listSubscriptionsForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<UserMarketplacePurchase>
> = {
  id: \\"apps/list-subscriptions-for-authenticated-user\\",
};

/**
 * Get a user installation for the authenticated app
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getUserInstallation: ApiHeroEndpoint<{ username: string }, Installation> = {
  id: \\"apps/get-user-installation\\",
};

/**
 * Delete an app authorization
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. You must also provide a valid OAuth \`access_token\` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const deleteAuthorization: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       */
      access_token: string;
    };
  },
  void
> = {
  id: \\"apps/delete-authorization\\",
};

/**
 * Check a token
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application \`client_id\` and the password is its \`client_secret\`. Invalid tokens will return \`404 NOT FOUND\`.
 */
export const checkToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The access_token of the OAuth application.
       */
      access_token: string;
    };
  },
  Authorization
> = {
  id: \\"apps/check-token\\",
};

/**
 * Delete an app token
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password.
 */
export const deleteToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       */
      access_token: string;
    };
  },
  void
> = {
  id: \\"apps/delete-token\\",
};

/**
 * Reset a token
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \\"token\\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
 */
export const resetToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The access_token of the OAuth application.
       */
      access_token: string;
    };
  },
  Authorization
> = {
  id: \\"apps/reset-token\\",
};

/**
 * Create a GitHub App from a manifest
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary \`code\` used to retrieve the GitHub App's \`id\`, \`pem\` (private key), and \`webhook_secret\`.
 */
export const createFromManifest: ApiHeroEndpoint<
  { code: string },
  Integration & {
    pem: string;

    client_id: string;

    client_secret: string;

    webhook_secret: string;
  }
> = {
  id: \\"apps/create-from-manifest\\",
};

/**
 * Get a delivery for an app webhook
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getWebhookDelivery: ApiHeroEndpoint<{ deliveryId: number }, HookDelivery> = {
  id: \\"apps/get-webhook-delivery\\",
};

/**
 * List plans (stubbed)
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listPlansStubbed: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<MarketplaceListingPlan>
> = {
  id: \\"apps/list-plans-stubbed\\",
};

/**
 * Get a repository installation for the authenticated app
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getRepoInstallation: ApiHeroEndpoint<{ owner: string; repo: string }, Installation> = {
  id: \\"apps/get-repo-installation\\",
};

/**
 * List subscriptions for the authenticated user (stubbed)
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const listSubscriptionsForAuthenticatedUserStubbed: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<UserMarketplacePurchase>
> = {
  id: \\"apps/list-subscriptions-for-authenticated-user-stubbed\\",
};

/**
 * Get an installation for the authenticated app
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getInstallation: ApiHeroEndpoint<{ installationId: number }, Installation> = {
  id: \\"apps/get-installation\\",
};

/**
 * Delete an installation for the authenticated app
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \\"[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)\\" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const deleteInstallation: ApiHeroEndpoint<{ installationId: number }, void> = {
  id: \\"apps/delete-installation\\",
};

/**
 * Create a scoped access token
 * Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
 */
export const scopeToken: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * The name of the user or organization to scope the user-to-server access token to. **Required** unless \`target_id\` is specified.
       */
      target?: string;

      /**
       * The ID of the user or organization to scope the user-to-server access token to. **Required** unless \`target\` is specified.
       */
      target_id?: number;

      permissions?: AppPermissions;

      /**
       * The OAuth access token used to authenticate to the GitHub API.
       */
      access_token: string;

      /**
       * The list of repository names to scope the user-to-server access token to. \`repositories\` may not be specified if \`repository_ids\` is specified.
       */
      repositories?: Array<string>;

      /**
       * The list of repository IDs to scope the user-to-server access token to. \`repository_ids\` may not be specified if \`repositories\` is specified.
       */
      repository_ids?: Array<number>;
    };
  },
  Authorization
> = {
  id: \\"apps/scope-token\\",
};

/**
 * Get a subscription plan for an account
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const getSubscriptionPlanForAccount: ApiHeroEndpoint<
  { accountId: number },
  MarketplacePurchase
> = {
  id: \\"apps/get-subscription-plan-for-account\\",
};

/**
 * Redeliver a delivery for an app webhook
 * Redeliver a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const redeliverWebhookDelivery: ApiHeroEndpoint<{ deliveryId: number }, {}> = {
  id: \\"apps/redeliver-webhook-delivery\\",
};

/**
 * List accounts for a plan
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listAccountsForPlan: ApiHeroEndpoint<
  {
    planId: number;
    page?: number;
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
  },
  Array<MarketplacePurchase>
> = {
  id: \\"apps/list-accounts-for-plan\\",
};

/**
 * Suspend an app installation
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const suspendInstallation: ApiHeroEndpoint<{ installationId: number }, void> = {
  id: \\"apps/suspend-installation\\",
};

/**
 * Unsuspend an app installation
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const unsuspendInstallation: ApiHeroEndpoint<{ installationId: number }, void> = {
  id: \\"apps/unsuspend-installation\\",
};

/**
 * Create an installation access token for an app
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of \`401 - Unauthorized\`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the \`repository_ids\` when creating the token. When you omit \`repository_ids\`, the response does not contain the \`repositories\` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const createInstallationAccessToken: ApiHeroEndpoint<
  {
    installationId: number;
    body?: {
      permissions?: AppPermissions;

      /**
       * List of repository names that the token should have access to
       */
      repositories?: Array<string>;

      /**
       * List of repository IDs that the token should have access to
       */
      repository_ids?: Array<number>;
    };
  },
  InstallationToken
> = {
  id: \\"apps/create-installation-access-token\\",
};

/**
 * Get a subscription plan for an account (stubbed)
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const getSubscriptionPlanForAccountStubbed: ApiHeroEndpoint<
  { accountId: number },
  MarketplacePurchase
> = {
  id: \\"apps/get-subscription-plan-for-account-stubbed\\",
};

/**
 * List repositories accessible to the user access token
 * List repositories that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the \`permissions\` key.
 */
export const listInstallationReposForAuthenticatedUser: ApiHeroEndpoint<
  { installationId: number; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<Repository>;

    repository_selection?: string;
  }
> = {
  id: \\"apps/list-installation-repos-for-authenticated-user\\",
};

/**
 * List accounts for a plan (stubbed)
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const listAccountsForPlanStubbed: ApiHeroEndpoint<
  {
    planId: number;
    page?: number;
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
  },
  Array<MarketplacePurchase>
> = {
  id: \\"apps/list-accounts-for-plan-stubbed\\",
};

/**
 * Add a repository to an app installation
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const addRepoToInstallationForAuthenticatedUser: ApiHeroEndpoint<
  { installationId: number; repositoryId: number },
  void
> = {
  id: \\"apps/add-repo-to-installation-for-authenticated-user\\",
};

/**
 * Remove a repository from an app installation
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const removeRepoFromInstallationForAuthenticatedUser: ApiHeroEndpoint<
  { installationId: number; repositoryId: number },
  void
> = {
  id: \\"apps/remove-repo-from-installation-for-authenticated-user\\",
};
",
  "billing.ts" => "import {
  ActionsBillingUsage,
  AdvancedSecurityActiveCommitters,
  CombinedBillingUsage,
  PackagesBillingUsage,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get GitHub Actions billing for an organization
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * Access tokens must have the \`repo\` or \`admin:org\` scope.
 */
export const getGithubActionsBillingOrg: ApiHeroEndpoint<{ org: string }, ActionsBillingUsage> = {
  id: \\"billing/get-github-actions-billing-org\\",
};

/**
 * Get GitHub Packages billing for an organization
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`repo\` or \`admin:org\` scope.
 */
export const getGithubPackagesBillingOrg: ApiHeroEndpoint<{ org: string }, PackagesBillingUsage> = {
  id: \\"billing/get-github-packages-billing-org\\",
};

/**
 * Get GitHub Actions billing for a user
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * Access tokens must have the \`user\` scope.
 */
export const getGithubActionsBillingUser: ApiHeroEndpoint<
  { username: string },
  ActionsBillingUsage
> = {
  id: \\"billing/get-github-actions-billing-user\\",
};

/**
 * Get shared storage billing for an organization
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`repo\` or \`admin:org\` scope.
 */
export const getSharedStorageBillingOrg: ApiHeroEndpoint<{ org: string }, CombinedBillingUsage> = {
  id: \\"billing/get-shared-storage-billing-org\\",
};

/**
 * Get GitHub Packages billing for a user
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`user\` scope.
 */
export const getGithubPackagesBillingUser: ApiHeroEndpoint<
  { username: string },
  PackagesBillingUsage
> = {
  id: \\"billing/get-github-packages-billing-user\\",
};

/**
 * Get GitHub Advanced Security active committers for an organization
 * Gets the GitHub Advanced Security active committers for an organization per repository.
 *
 * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the \`total_advanced_security_committers\` is not the sum of advanced_security_committers for each repository.
 *
 * If this organization defers to an enterprise for billing, the \`total_advanced_security_committers\` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
 *
 * The total number of repositories with committer information is tracked by the \`total_count\` field.
 */
export const getGithubAdvancedSecurityBillingOrg: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  AdvancedSecurityActiveCommitters
> = {
  id: \\"billing/get-github-advanced-security-billing-org\\",
};

/**
 * Get shared storage billing for a user
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * Access tokens must have the \`user\` scope.
 */
export const getSharedStorageBillingUser: ApiHeroEndpoint<
  { username: string },
  CombinedBillingUsage
> = {
  id: \\"billing/get-shared-storage-billing-user\\",
};

/**
 * Get GitHub Actions billing for an enterprise
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \\"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\\".
 *
 * The authenticated user must be an enterprise admin.
 */
export const getGithubActionsBillingGhe: ApiHeroEndpoint<
  { enterprise: string },
  ActionsBillingUsage
> = {
  id: \\"billing/get-github-actions-billing-ghe\\",
};

/**
 * Get GitHub Packages billing for an enterprise
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * The authenticated user must be an enterprise admin.
 */
export const getGithubPackagesBillingGhe: ApiHeroEndpoint<
  { enterprise: string },
  PackagesBillingUsage
> = {
  id: \\"billing/get-github-packages-billing-ghe\\",
};

/**
 * Get shared storage billing for an enterprise
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see \\"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\\"
 *
 * The authenticated user must be an enterprise admin.
 */
export const getSharedStorageBillingGhe: ApiHeroEndpoint<
  { enterprise: string },
  CombinedBillingUsage
> = {
  id: \\"billing/get-shared-storage-billing-ghe\\",
};

/**
 * Get GitHub Advanced Security active committers for an enterprise
 * Gets the GitHub Advanced Security active committers for an enterprise per repository.
 *
 * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the \`total_advanced_security_committers\` is not the sum of active_users for each repository.
 *
 * The total number of repositories with committer information is tracked by the \`total_count\` field.
 */
export const getGithubAdvancedSecurityBillingGhe: ApiHeroEndpoint<
  { enterprise: string; page?: number; perPage?: number },
  AdvancedSecurityActiveCommitters
> = {
  id: \\"billing/get-github-advanced-security-billing-ghe\\",
};
",
  "checks.ts" => "import {
  CheckAnnotation,
  CheckRun,
  CheckSuite,
  CheckSuitePreference,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Create a check run
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the \`checks:write\` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const create: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the check. For example, \\"code-coverage\\".
       */
      name: string;

      /**
       * Check runs can accept a variety of data in the \`output\` object, including a \`title\` and \`summary\` and can optionally provide descriptive details about the run. See the [\`output\` object](https://docs.github.com/rest/reference/checks#output-object) description.
       */
      output?: {
        /**
         * The details of the check run. This parameter supports Markdown.
         */
        text?: string;

        /**
         * The title of the check run.
         */
        title: string;

        /**
         * Adds images to the output displayed in the GitHub pull request UI. See the [\`images\` object](https://docs.github.com/rest/reference/checks#images-object) description for details.
         */
        images?: Array<{
          /**
           * The alternative text for the image.
           */
          alt: string;

          /**
           * A short image description.
           */
          caption?: string;

          /**
           * The full URL of the image.
           */
          image_url: string;
        }>;

        /**
         * The summary of the check run. This parameter supports Markdown.
         */
        summary: string;

        /**
         * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \\"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\\". See the [\`annotations\` object](https://docs.github.com/rest/reference/checks#annotations-object) description for details about how to use this parameter.
         */
        annotations?: Array<{
          /**
           * The path of the file to add an annotation to. For example, \`assets/css/main.css\`.
           */
          path: string;

          /**
           * The title that represents the annotation. The maximum size is 255 characters.
           */
          title?: string;

          /**
           * A short description of the feedback for these lines of code. The maximum size is 64 KB.
           */
          message: string;

          /**
           * The end line of the annotation.
           */
          end_line: number;

          /**
           * The end column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          end_column?: number;

          /**
           * The start line of the annotation.
           */
          start_line: number;

          /**
           * Details about this annotation. The maximum size is 64 KB.
           */
          raw_details?: string;

          /**
           * The start column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          start_column?: number;

          /**
           * The level of the annotation.
           */
          annotation_level: \\"notice\\" | \\"warning\\" | \\"failure\\";
        }>;
      };

      /**
       * The current status.
       */
      status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";

      /**
       * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [\`check_run.requested_action\` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a \`label\`, \`identifier\` and \`description\`. A maximum of three actions are accepted. See the [\`actions\` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \\"[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions).\\"
       */
      actions?: Array<{
        /**
         * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
         */
        label: string;

        /**
         * A reference for the action on the integrator's system. The maximum size is 20 characters.
         */
        identifier: string;

        /**
         * A short explanation of what this action would do. The maximum size is 40 characters.
         */
        description: string;
      }>;

      /**
       * The SHA of the commit.
       */
      head_sha: string;

      /**
       * **Required if you provide \`completed_at\` or a \`status\` of \`completed\`**. The final conclusion of the check.
       **Note:** Providing \`conclusion\` will automatically set the \`status\` parameter to \`completed\`. You cannot change a check run conclusion to \`stale\`, only GitHub can set this.
       */
      conclusion?:
        | \\"action_required\\"
        | \\"cancelled\\"
        | \\"failure\\"
        | \\"neutral\\"
        | \\"success\\"
        | \\"skipped\\"
        | \\"stale\\"
        | \\"timed_out\\";

      /**
       * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      started_at?: string;

      /**
       * The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
       */
      details_url?: string;

      /**
       * A reference for the run on the integrator's system.
       */
      external_id?: string;

      /**
       * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      completed_at?: string;
    };
  },
  CheckRun
> = {
  id: \\"checks/create\\",
};

/**
 * Create a check suite
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \\"[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\\". Your GitHub App must have the \`checks:write\` permission to create check suites.
 */
export const createSuite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The sha of the head commit.
       */
      head_sha: string;
    };
  },
  CheckSuite
> = {
  id: \\"checks/create-suite\\",
};

/**
 * Update repository preferences for check suites
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const setSuitesPreferences: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [\`auto_trigger_checks\` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
       */
      auto_trigger_checks?: Array<{
        /**
         * The \`id\` of the GitHub App.
         */
        app_id: number;

        /**
         * Set to \`true\` to enable automatic creation of CheckSuite events upon pushes to the repository, or \`false\` to disable them.
         */
        setting: boolean;
      }>;
    };
  },
  CheckSuitePreference
> = {
  id: \\"checks/set-suites-preferences\\",
};

/**
 * List check runs for a Git reference
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Lists check runs for a commit ref. The \`ref\` can be a SHA, branch name, or a tag name. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
 */
export const listForRef: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    ref: string;
    page?: number;
    perPage?: number;
    status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
    filter?: \\"latest\\" | \\"all\\";
    appId?: number;
    checkName?: string;
  },
  {
    check_runs: Array<CheckRun>;

    total_count: number;
  }
> = {
  id: \\"checks/list-for-ref\\",
};

/**
 * Get a check run
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Gets a single check run using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
 */
export const getChecks: ApiHeroEndpoint<
  { checkRunId: number; owner: string; repo: string },
  CheckRun
> = {
  id: \\"checks/get\\",
};

/**
 * Update a check run
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the \`checks:write\` permission to edit check runs.
 */
export const update: ApiHeroEndpoint<
  {
    checkRunId: number;
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the check. For example, \\"code-coverage\\".
       */
      name?: string;

      /**
       * Check runs can accept a variety of data in the \`output\` object, including a \`title\` and \`summary\` and can optionally provide descriptive details about the run. See the [\`output\` object](https://docs.github.com/rest/reference/checks#output-object-1) description.
       */
      output?: {
        /**
         * Can contain Markdown.
         */
        text?: string;

        /**
         * **Required**.
         */
        title?: string;

        /**
         * Adds images to the output displayed in the GitHub pull request UI. See the [\`images\` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
         */
        images?: Array<{
          /**
           * The alternative text for the image.
           */
          alt: string;

          /**
           * A short image description.
           */
          caption?: string;

          /**
           * The full URL of the image.
           */
          image_url: string;
        }>;

        /**
         * Can contain Markdown.
         */
        summary: string;

        /**
         * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \\"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\\". See the [\`annotations\` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
         */
        annotations?: Array<{
          /**
           * The path of the file to add an annotation to. For example, \`assets/css/main.css\`.
           */
          path: string;

          /**
           * The title that represents the annotation. The maximum size is 255 characters.
           */
          title?: string;

          /**
           * A short description of the feedback for these lines of code. The maximum size is 64 KB.
           */
          message: string;

          /**
           * The end line of the annotation.
           */
          end_line: number;

          /**
           * The end column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          end_column?: number;

          /**
           * The start line of the annotation.
           */
          start_line: number;

          /**
           * Details about this annotation. The maximum size is 64 KB.
           */
          raw_details?: string;

          /**
           * The start column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values.
           */
          start_column?: number;

          /**
           * The level of the annotation.
           */
          annotation_level: \\"notice\\" | \\"warning\\" | \\"failure\\";
        }>;
      };

      /**
       * The current status.
       */
      status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";

      /**
       * Possible further actions the integrator can perform, which a user may trigger. Each action includes a \`label\`, \`identifier\` and \`description\`. A maximum of three actions are accepted. See the [\`actions\` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \\"[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions).\\"
       */
      actions?: Array<{
        /**
         * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
         */
        label: string;

        /**
         * A reference for the action on the integrator's system. The maximum size is 20 characters.
         */
        identifier: string;

        /**
         * A short explanation of what this action would do. The maximum size is 40 characters.
         */
        description: string;
      }>;

      /**
       * **Required if you provide \`completed_at\` or a \`status\` of \`completed\`**. The final conclusion of the check.
       **Note:** Providing \`conclusion\` will automatically set the \`status\` parameter to \`completed\`. You cannot change a check run conclusion to \`stale\`, only GitHub can set this.
       */
      conclusion?:
        | \\"action_required\\"
        | \\"cancelled\\"
        | \\"failure\\"
        | \\"neutral\\"
        | \\"success\\"
        | \\"skipped\\"
        | \\"stale\\"
        | \\"timed_out\\";

      /**
       * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      started_at?: string;

      /**
       * The URL of the integrator's site that has the full details of the check.
       */
      details_url?: string;

      /**
       * A reference for the run on the integrator's system.
       */
      external_id?: string;

      /**
       * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      completed_at?: string;
    };
  },
  CheckRun
> = {
  id: \\"checks/update\\",
};

/**
 * List check suites for a Git reference
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`.
 *
 * Lists check suites for a commit \`ref\`. The \`ref\` can be a SHA, branch name, or a tag name. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the \`repo\` scope to get check suites in a private repository.
 */
export const listSuitesForRef: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    ref: string;
    page?: number;
    perPage?: number;
    appId?: number;
    checkName?: string;
  },
  {
    total_count: number;

    check_suites: Array<CheckSuite>;
  }
> = {
  id: \\"checks/list-suites-for-ref\\",
};

/**
 * Get a check suite
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`.
 *
 * Gets a single check suite using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the \`repo\` scope to get check suites in a private repository.
 */
export const getSuite: ApiHeroEndpoint<
  { owner: string; repo: string; checkSuiteId: number },
  CheckSuite
> = {
  id: \\"checks/get-suite\\",
};

/**
 * Rerequest a check run
 * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [\`check_run\` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action \`rerequested\`. When a check run is \`rerequested\`, its \`status\` is reset to \`queued\` and the \`conclusion\` is cleared.
 *
 * To rerequest a check run, your GitHub App must have the \`checks:read\` permission on a private repository or pull access to a public repository.
 */
export const rerequestRun: ApiHeroEndpoint<
  { checkRunId: number; owner: string; repo: string },
  {}
> = {
  id: \\"checks/rerequest-run\\",
};

/**
 * List check run annotations
 * Lists annotations for a check run using the annotation \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the \`repo\` scope to get annotations for a check run in a private repository.
 */
export const listAnnotations: ApiHeroEndpoint<
  { checkRunId: number; owner: string; repo: string; page?: number; perPage?: number },
  Array<CheckAnnotation>
> = {
  id: \\"checks/list-annotations\\",
};

/**
 * Rerequest a check suite
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [\`check_suite\` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action \`rerequested\`. When a check suite is \`rerequested\`, its \`status\` is reset to \`queued\` and the \`conclusion\` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the \`checks:read\` permission on a private repository or pull access to a public repository.
 */
export const rerequestSuite: ApiHeroEndpoint<
  { owner: string; repo: string; checkSuiteId: number },
  {}
> = {
  id: \\"checks/rerequest-suite\\",
};

/**
 * List check runs in a check suite
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array.
 *
 * Lists check runs for a check suite using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
 */
export const listForSuite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    checkSuiteId: number;
    page?: number;
    perPage?: number;
    filter?: \\"latest\\" | \\"all\\";
    status?: \\"queued\\" | \\"in_progress\\" | \\"completed\\";
    checkName?: string;
  },
  {
    check_runs: Array<CheckRun>;

    total_count: number;
  }
> = {
  id: \\"checks/list-for-suite\\",
};
",
  "code-scanning.ts" => "import {
  AlertNumber,
  CodeScanningAlert,
  CodeScanningAlertDismissedComment,
  CodeScanningAlertDismissedReason,
  CodeScanningAlertInstance,
  CodeScanningAlertItems,
  CodeScanningAlertSetState,
  CodeScanningAnalysis,
  CodeScanningAnalysisCommitSha,
  CodeScanningAnalysisDeletion,
  CodeScanningAnalysisSarifFile,
  CodeScanningAnalysisToolGuid,
  CodeScanningAnalysisToolName,
  CodeScanningOrganizationAlertItems,
  CodeScanningRef,
  CodeScanningSarifsReceipt,
  CodeScanningSarifsStatus,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List code scanning alerts for an organization
 * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \\"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\\"
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the \`repo\` scope or \`security_events\` scope.
 *
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 */
export const listAlertsForOrg: ApiHeroEndpoint<
  {
    org: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    before?: string;
    sort?: \\"created\\" | \\"updated\\";
    toolName?: CodeScanningAnalysisToolName;
    toolGuid?: CodeScanningAnalysisToolGuid;
    state?: \\"open\\" | \\"closed\\" | \\"dismissed\\" | \\"fixed\\";
    after?: string;
  },
  Array<CodeScanningOrganizationAlertItems>
> = {
  id: \\"code-scanning/list-alerts-for-org\\",
};

/**
 * List code scanning alerts for a repository
 * Lists code scanning alerts.
 *
 * To use this endpoint, you must use an access token with the \`security_events\` scope or, for alerts from public repositories only, an access token with the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`security_events\` read
 * permission to use this endpoint.
 *
 * The response includes a \`most_recent_instance\` object.
 * This provides details of the most recent instance of this alert
 * for the default branch (or for the specified Git reference if you used \`ref\` in the request).
 */
export const listAlertsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\";
    toolName?: CodeScanningAnalysisToolName;
    state?: \\"open\\" | \\"closed\\" | \\"dismissed\\" | \\"fixed\\";
    toolGuid?: CodeScanningAnalysisToolGuid;
    ref?: CodeScanningRef;
  },
  Array<CodeScanningAlertItems>
> = {
  id: \\"code-scanning/list-alerts-for-repo\\",
};

/**
 * Upload an analysis as SARIF data
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the \`security_events\` scope to use this endpoint for private repositories. You can also use tokens with the \`public_repo\` scope for public repositories only. GitHub Apps must have the \`security_events\` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 * - If you upload to a pull request, for example \`--ref refs/pull/42/merge\` or \`--ref refs/pull/42/head\`, then the results appear as alerts in a pull request check. For more information, see \\"[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\\"
 * - If you upload to a branch, for example \`--ref refs/heads/my-branch\`, then the results appear in the **Security** tab for your repository. For more information, see \\"[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\\"
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using \`gzip\`, and then encode it as a Base64 format string. For example:
 *
 * \`\`\`
 * gzip -c analysis-data.sarif | base64 -w0
 * \`\`\`
 *
 * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
 *
 * The \`202 Accepted\`, response includes an \`id\` value.
 * You can use this ID to check the status of the upload by using this for the \`/sarifs/{sarif_id}\` endpoint.
 * For more information, see \\"[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).\\"
 */
export const uploadSarif: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      ref: CodeScanningRef;

      sarif: CodeScanningAnalysisSarifFile;

      /**
       * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \\"API\\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the \`tool_guid\` parameter of operations such as \`GET /repos/{owner}/{repo}/code-scanning/alerts\`.
       */
      tool_name?: string;

      commit_sha: CodeScanningAnalysisCommitSha;

      /**
       * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      started_at?: string;

      /** 
* The base directory used in the analysis, as it appears in the SARIF file.
This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
*/
      checkout_uri?: string;
    };
  },
  CodeScanningSarifsReceipt
> = {
  id: \\"code-scanning/upload-sarif\\",
};

/**
 * List code scanning analyses for a repository
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the \`page\` and \`per_page\` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The \`rules_count\` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and \`0\` is returned in this field.
 *
 * You must use an access token with the \`security_events\` scope to use this endpoint with private repos,
 * the \`public_repo\` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The \`tool_name\` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the \`tool\` field.
 */
export const listRecentAnalyses: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    toolName?: CodeScanningAnalysisToolName;
    toolGuid?: CodeScanningAnalysisToolGuid;
    sarifId?: string;
    ref?: string;
  },
  Array<CodeScanningAnalysis>
> = {
  id: \\"code-scanning/list-recent-analyses\\",
};

/**
 * List code scanning alerts for an enterprise
 * Lists code scanning alerts for the default branch for all eligible repositories in an enterprise. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \\"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\\"
 *
 * To use this endpoint, you must be a member of the enterprise,
 * and you must use an access token with the \`repo\` scope or \`security_events\` scope.
 */
export const listAlertsForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    before?: string;
    toolName?: CodeScanningAnalysisToolName;
    toolGuid?: CodeScanningAnalysisToolGuid;
    after?: string;
    state?: \\"open\\" | \\"closed\\" | \\"dismissed\\" | \\"fixed\\";
    sort?: \\"created\\" | \\"updated\\";
  },
  Array<CodeScanningOrganizationAlertItems>
> = {
  id: \\"code-scanning/list-alerts-for-enterprise\\",
};

/**
 * Get information about a SARIF upload
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \\"[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository).\\" You must use an access token with the \`security_events\` scope to use this endpoint with private repos, the \`public_repo\` scope also grants permission to read security events on public repos only. GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 */
export const getSarif: ApiHeroEndpoint<
  { owner: string; repo: string; sarifId: string },
  CodeScanningSarifsStatus
> = {
  id: \\"code-scanning/get-sarif\\",
};

/**
 * Get a code scanning alert
 * Gets a single code scanning alert. You must use an access token with the \`security_events\` scope to use this endpoint with private repos, the \`public_repo\` scope also grants permission to read security events on public repos only. GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by \`instances_url\`.
 */
export const getAlert: ApiHeroEndpoint<
  { owner: string; repo: string; alertNumber: AlertNumber },
  CodeScanningAlert
> = {
  id: \\"code-scanning/get-alert\\",
};

/**
 * Update a code scanning alert
 * Updates the status of a single code scanning alert. You must use an access token with the \`security_events\` scope to use this endpoint with private repositories. You can also use tokens with the \`public_repo\` scope for public repositories only. GitHub Apps must have the \`security_events\` write permission to use this endpoint.
 */
export const updateAlert: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    alertNumber: AlertNumber;
    body: {
      state: CodeScanningAlertSetState;

      dismissed_reason?: CodeScanningAlertDismissedReason;

      dismissed_comment?: CodeScanningAlertDismissedComment;
    };
  },
  CodeScanningAlert
> = {
  id: \\"code-scanning/update-alert\\",
};

/**
 * Get a code scanning analysis for a repository
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the \`security_events\` scope to use this endpoint with private repos,
 * the \`public_repo\` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The \`rules_count\` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and \`0\` is returned in this field.
 *
 * If you use the Accept header \`application/sarif+json\`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 */
export const getAnalysis: ApiHeroEndpoint<
  { owner: string; repo: string; analysisId: number },
  CodeScanningAnalysis
> = {
  id: \\"code-scanning/get-analysis\\",
};

/**
 * Delete a code scanning analysis from a repository
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the \`repo\` scope. For public repositories,
 * you must use an access token with \`public_repo\` scope.
 * GitHub Apps must have the \`security_events\` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * \`\`\`
 * \\"deletable\\": true
 * \`\`\`
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * \`ref\`
 * * \`tool\`
 * * \`analysis_key\`
 * * \`environment\`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * \`\`\`
 * Analysis specified is not deletable.
 * \`\`\`
 *
 * The response from a successful \`DELETE\` operation provides you with
 * two alternative URLs for deleting the next analysis in the set:
 * \`next_analysis_url\` and \`confirm_delete_url\`.
 * Use the \`next_analysis_url\` URL if you want to avoid accidentally deleting the final analysis
 * in a set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the \`confirm_delete_url\` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set, the value of \`next_analysis_url\` and \`confirm_delete_url\`
 * in the 200 response is \`null\`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find an analysis that's identified as deletable.
 * Each set of analyses always has one that's identified as deletable.
 * Having found the deletable analysis for one of the two sets,
 * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
 * Then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 * **Inner loop**:
 * * Delete the identified analysis.
 * * Parse the response for the value of \`confirm_delete_url\` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the \`confirm_delete_url\` value. Alternatively, you could use the \`next_analysis_url\` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const deleteAnalysis: ApiHeroEndpoint<
  { owner: string; repo: string; analysisId: number; confirmDelete?: string | null },
  CodeScanningAnalysisDeletion
> = {
  id: \\"code-scanning/delete-analysis\\",
};

/**
 * List instances of a code scanning alert
 * Lists all instances of the specified code scanning alert.
 * You must use an access token with the \`security_events\` scope to use this endpoint with private repos,
 * the \`public_repo\` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the \`security_events\` read permission to use this endpoint.
 */
export const listAlertInstances: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    alertNumber: AlertNumber;
    page?: number;
    perPage?: number;
    ref?: CodeScanningRef;
  },
  Array<CodeScanningAlertInstance>
> = {
  id: \\"code-scanning/list-alert-instances\\",
};
",
  "codes-of-conduct.ts" => "import { CodeOfConduct, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get all codes of conduct
 */
export const getAllCodesOfConduct: ApiHeroEndpoint<never, Array<CodeOfConduct>> = {
  id: \\"codes-of-conduct/get-all-codes-of-conduct\\",
};

/**
 * Get a code of conduct
 */
export const getConductCode: ApiHeroEndpoint<{ key: string }, CodeOfConduct> = {
  id: \\"codes-of-conduct/get-conduct-code\\",
};
",
  "codespaces.ts" => "import {
  Codespace,
  CodespaceExportDetails,
  CodespaceMachine,
  CodespacesPublicKey,
  CodespacesSecret,
  CodespacesUserPublicKey,
  MinimalRepository,
  RepoCodespacesSecret,
  SimpleUser,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List codespaces for the authenticated user
 * Lists the authenticated user's codespaces.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces\` repository permission to use this endpoint.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number; repositoryId?: number },
  {
    codespaces: Array<Codespace>;

    total_count: number;
  }
> = {
  id: \\"codespaces/list-for-authenticated-user\\",
};

/**
 * Create a codespace for the authenticated user
 * Creates a new codespace, owned by the authenticated user.
 *
 * This endpoint requires either a \`repository_id\` OR a \`pull_request\` but not both.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const createForAuthenticatedUser: ApiHeroEndpoint<
  {
    body:
      | {
          /**
           * Git ref (typically a branch name) for this codespace
           */
          ref?: string;

          /**
           * Machine type to use for this codespace
           */
          machine?: string;

          /**
           * Location for this codespace. Assigned by IP if not provided
           */
          location?: string;

          /**
           * IP for location auto-detection when proxying a request
           */
          client_ip?: string;

          /**
           * Display name for this codespace
           */
          display_name?: string;

          /**
           * Repository id for this codespace
           */
          repository_id: number;

          /**
           * Path to devcontainer.json config to use for this codespace
           */
          devcontainer_path?: string;

          /**
           * Working directory for this codespace
           */
          working_directory?: string;

          /**
           * Time in minutes before codespace stops from inactivity
           */
          idle_timeout_minutes?: number;

          /**
           * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
           */
          retention_period_minutes?: number;

          /**
           * Whether to authorize requested permissions from devcontainer.json
           */
          multi_repo_permissions_opt_out?: boolean;
        }
      | {
          /**
           * Machine type to use for this codespace
           */
          machine?: string;

          /**
           * Location for this codespace. Assigned by IP if not provided
           */
          location?: string;

          /**
           * Pull request number for this codespace
           */
          pull_request: {
            /**
             * Repository id for this codespace
             */
            repository_id: number;

            /**
             * Pull request number
             */
            pull_request_number: number;
          };

          /**
           * Path to devcontainer.json config to use for this codespace
           */
          devcontainer_path?: string;

          /**
           * Working directory for this codespace
           */
          working_directory?: string;

          /**
           * Time in minutes before codespace stops from inactivity
           */
          idle_timeout_minutes?: number;
        };
  },
  Codespace
> = {
  id: \\"codespaces/create-for-authenticated-user\\",
};

/**
 * List codespaces for the organization
 * Lists the codespaces associated to a specified organization.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const listInOrganization: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  {
    codespaces: Array<Codespace>;

    total_count: number;
  }
> = {
  id: \\"codespaces/list-in-organization\\",
};

/**
 * List secrets for the authenticated user
 * Lists all secrets available for a user's Codespaces without revealing their
 * encrypted values.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const listSecretsForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  {
    secrets: Array<CodespacesSecret>;

    total_count: number;
  }
> = {
  id: \\"codespaces/list-secrets-for-authenticated-user\\",
};

/**
 * List codespaces in a repository for the authenticated user
 * Lists the codespaces associated to a specified repository and the authenticated user.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces\` repository permission to use this endpoint.
 */
export const listInRepositoryForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    codespaces: Array<Codespace>;

    total_count: number;
  }
> = {
  id: \\"codespaces/list-in-repository-for-authenticated-user\\",
};

/**
 * Create a codespace in a repository
 * Creates a codespace owned by the authenticated user in the specified repository.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const createWithRepoForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; body: any | null },
  Codespace
> = {
  id: \\"codespaces/create-with-repo-for-authenticated-user\\",
};

/**
 * Get a codespace for the authenticated user
 * Gets information about a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces\` repository permission to use this endpoint.
 */
export const getForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, Codespace> = {
  id: \\"codespaces/get-for-authenticated-user\\",
};

/**
 * Delete a codespace for the authenticated user
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const deleteForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, {}> = {
  id: \\"codespaces/delete-for-authenticated-user\\",
};

/**
 * Update a codespace for the authenticated user
 * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
 *
 * If you specify a new machine type it will be applied the next time your codespace is started.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const updateForAuthenticatedUser: ApiHeroEndpoint<
  {
    codespaceName: string;
    body?: {
      /**
       * A valid machine to transition this codespace to.
       */
      machine?: string;

      /**
       * Display name for this codespace
       */
      display_name?: string;

      /**
       * Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
       */
      recent_folders?: Array<string>;
    };
  },
  Codespace
> = {
  id: \\"codespaces/update-for-authenticated-user\\",
};

/**
 * Get public key for the authenticated user
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const getPublicKeyForAuthenticatedUser: ApiHeroEndpoint<never, CodespacesUserPublicKey> = {
  id: \\"codespaces/get-public-key-for-authenticated-user\\",
};

/**
 * Get default attributes for a codespace
 * Gets the default attributes for codespaces created by the user with the repository.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const preFlightWithRepoForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; clientIp?: string; ref?: string },
  {
    defaults?: {
      location: string;

      devcontainer_path: string;
    };

    billable_owner?: SimpleUser;
  }
> = {
  id: \\"codespaces/pre-flight-with-repo-for-authenticated-user\\",
};

/**
 * Get a secret for the authenticated user
 * Gets a secret available to a user's codespaces without revealing its encrypted value.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const getSecretForAuthenticatedUser: ApiHeroEndpoint<
  { secretName: string },
  CodespacesSecret
> = {
  id: \\"codespaces/get-secret-for-authenticated-user\\",
};

/**
 * Create or update a secret for the authenticated user
 * Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission and \`codespaces_secrets\` repository permission on all referenced repositories to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateSecretForAuthenticatedUser: ApiHeroEndpoint<
  {
    secretName: string;
    body: {
      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id: string;

      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
       */
      encrypted_value?: string;

      /**
       * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
       */
      selected_repository_ids?: Array<string>;
    };
  },
  {}
> = {
  id: \\"codespaces/create-or-update-secret-for-authenticated-user\\",
};

/**
 * Delete a secret for the authenticated user
 * Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const deleteSecretForAuthenticatedUser: ApiHeroEndpoint<{ secretName: string }, void> = {
  id: \\"codespaces/delete-secret-for-authenticated-user\\",
};

/**
 * Stop a codespace for the authenticated user
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const stopForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, Codespace> = {
  id: \\"codespaces/stop-for-authenticated-user\\",
};

/**
 * Start a codespace for the authenticated user
 * Starts a user's codespace.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const startForAuthenticatedUser: ApiHeroEndpoint<{ codespaceName: string }, Codespace> = {
  id: \\"codespaces/start-for-authenticated-user\\",
};

/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const listRepoSecrets: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    secrets: Array<RepoCodespacesSecret>;

    total_count: number;
  }
> = {
  id: \\"codespaces/list-repo-secrets\\",
};

/**
 * List available machine types for a repository
 * List the machine types available for a given repository based on its configuration.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_metadata\` repository permission to use this endpoint.
 */
export const repoMachinesForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; location?: string; clientIp?: string },
  {
    machines: Array<CodespaceMachine>;

    total_count: number;
  }
> = {
  id: \\"codespaces/repo-machines-for-authenticated-user\\",
};

/**
 * Export a codespace for the authenticated user
 * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
 *
 * You must authenticate using a personal access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const exportForAuthenticatedUser: ApiHeroEndpoint<
  { codespaceName: string },
  CodespaceExportDetails
> = {
  id: \\"codespaces/export-for-authenticated-user\\",
};

/**
 * List machine types for a codespace
 * List the machine types a codespace can transition to use.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_metadata\` repository permission to use this endpoint.
 */
export const codespaceMachinesForAuthenticatedUser: ApiHeroEndpoint<
  { codespaceName: string },
  {
    machines: Array<CodespaceMachine>;

    total_count: number;
  }
> = {
  id: \\"codespaces/codespace-machines-for-authenticated-user\\",
};

/**
 * List devcontainer configurations in a repository for the authenticated user
 * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
 * specify launchpoint configurations for codespaces created within the repository.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_metadata\` repository permission to use this endpoint.
 */
export const listDevcontainersInRepositoryForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    total_count: number;

    devcontainers: Array<{
      name?: string;

      path: string;
    }>;
  }
> = {
  id: \\"codespaces/list-devcontainers-in-repository-for-authenticated-user\\",
};

/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const getRepoPublicKey: ApiHeroEndpoint<
  { owner: string; repo: string },
  CodespacesPublicKey
> = {
  id: \\"codespaces/get-repo-public-key\\",
};

/**
 * List selected repositories for a user secret
 * List the repositories that have been granted the ability to use a user's codespace secret.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_user_secrets\` user permission and write access to the \`codespaces_secrets\` repository permission on all referenced repositories to use this endpoint.
 */
export const listRepositoriesForSecretForAuthenticatedUser: ApiHeroEndpoint<
  { secretName: string },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"codespaces/list-repositories-for-secret-for-authenticated-user\\",
};

/**
 * Set selected repositories for a user secret
 * Select the repositories that will use a user's codespace secret.
 *
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission and write access to the \`codespaces_secrets\` repository permission on all referenced repositories to use this endpoint.
 */
export const setRepositoriesForSecretForAuthenticatedUser: ApiHeroEndpoint<
  {
    secretName: string;
    body: {
      /**
       * An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"codespaces/set-repositories-for-secret-for-authenticated-user\\",
};

/**
 * Create a codespace from a pull request
 * Creates a codespace owned by the authenticated user for the specified pull request.
 *
 * You must authenticate using an access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the \`codespaces\` repository permission to use this endpoint.
 */
export const createWithPrForAuthenticatedUser: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; body: any | null },
  Codespace
> = {
  id: \\"codespaces/create-with-pr-for-authenticated-user\\",
};

/**
 * Get details about a codespace export
 * Gets information about an export of a codespace.
 *
 * You must authenticate using a personal access token with the \`codespace\` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the \`codespaces_lifecycle_admin\` repository permission to use this endpoint.
 */
export const getExportDetailsForAuthenticatedUser: ApiHeroEndpoint<
  { codespaceName: string; exportId: string },
  CodespaceExportDetails
> = {
  id: \\"codespaces/get-export-details-for-authenticated-user\\",
};

/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const getRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  RepoCodespacesSecret
> = {
  id: \\"codespaces/get-repo-secret\\",
};

/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository
 * permission to use this endpoint.
 *
 * #### Example of encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example of encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example of encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example of encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateRepoSecret: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    secretName: string;
    body: {
      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;

      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.
       */
      encrypted_value?: string;
    };
  },
  {}
> = {
  id: \\"codespaces/create-or-update-repo-secret\\",
};

/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`codespaces_secrets\` repository permission to use this endpoint.
 */
export const deleteRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  void
> = {
  id: \\"codespaces/delete-repo-secret\\",
};

/**
 * Delete a codespace from the organization
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const deleteFromOrganization: ApiHeroEndpoint<
  { username: string; org: string; codespaceName: string },
  {}
> = {
  id: \\"codespaces/delete-from-organization\\",
};

/**
 * Stop a codespace for an organization user
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
 */
export const stopInOrganization: ApiHeroEndpoint<
  { username: string; org: string; codespaceName: string },
  Codespace
> = {
  id: \\"codespaces/stop-in-organization\\",
};

/**
 * Add a selected repository to a user secret
 * Adds a repository to the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission and write access to the \`codespaces_secrets\` repository permission on the referenced repository to use this endpoint.
 */
export const addRepositoryForSecretForAuthenticatedUser: ApiHeroEndpoint<
  { repositoryId: number; secretName: string },
  void
> = {
  id: \\"codespaces/add-repository-for-secret-for-authenticated-user\\",
};

/**
 * Remove a selected repository from a user secret
 * Removes a repository from the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the \`codespace\` or \`codespace:secrets\` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the \`codespaces_user_secrets\` user permission to use this endpoint.
 */
export const removeRepositoryForSecretForAuthenticatedUser: ApiHeroEndpoint<
  { repositoryId: number; secretName: string },
  void
> = {
  id: \\"codespaces/remove-repository-for-secret-for-authenticated-user\\",
};
",
  "emojis.ts" => "/**
 * Get emojis
 * Lists all the emojis available to use on GitHub.
 */
export const getEmojis: ApiHeroEndpoint<never, Record<string, string>> = {
  id: \\"emojis/get\\",
};
",
  "enterprise-admin.ts" => "import {
  ActionsEnterprisePermissions,
  AllowedActions,
  AuditLogEvent,
  AuthenticationToken,
  EnabledOrganizations,
  OrganizationSimple,
  Runner,
  RunnerApplication,
  RunnerGroupsEnterprise,
  RunnerLabel,
  ScimEnterpriseGroup,
  ScimEnterpriseUser,
  ScimGroupListEnterprise,
  ScimUserListEnterprise,
  SelectedActions,
  ServerStatistics,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get the audit log for an enterprise
 * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the \`admin:enterprise\` scope.
 */
export const getAuditLog: ApiHeroEndpoint<
  {
    enterprise: string;
    page?: number;
    perPage?: number;
    order?: \\"desc\\" | \\"asc\\";
    after?: string;
    before?: string;
    include?: \\"web\\" | \\"git\\" | \\"all\\";
    phrase?: string;
  },
  Array<AuditLogEvent>
> = {
  id: \\"enterprise-admin/get-audit-log\\",
};

/**
 * List SCIM provisioned identities for an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 * - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
 * - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 * - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a \`null\` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
 *
 * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the \`null\` external identity entry is created and the user is prompted to sign in to their GitHub account:
 * - If the user signs in, their GitHub account is linked to this entry.
 * - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity \`null\` entry remains in place.
 */
export const listProvisionedIdentitiesEnterprise: ApiHeroEndpoint<
  { enterprise: string; count?: number; filter?: string; startIndex?: number },
  ScimUserListEnterprise
> = {
  id: \\"enterprise-admin/list-provisioned-identities-enterprise\\",
};

/**
 * Provision and invite a SCIM enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision enterprise membership for a user, and send organization invitation emails to the email address.
 *
 * You can optionally include the groups a user will be invited to join. If you do not provide a list of \`groups\`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
 */
export const provisionAndInviteEnterpriseUser: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      name: {
        /**
         * The first name of the user.
         */
        givenName: string;

        /**
         * The last name of the user.
         */
        familyName: string;
      };

      /**
       * List of user emails.
       */
      emails: Array<{
        /**
         * The type of email address.
         */
        type: string;

        /**
         * The email address.
         */
        value: string;

        /**
         * Whether this email address is the primary address.
         */
        primary: boolean;
      }>;

      /**
       * List of SCIM group IDs the user is a member of.
       */
      groups?: Array<{
        value?: string;
      }>;

      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The username for the user.
       */
      userName: string;
    };
  },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/provision-and-invite-enterprise-user\\",
};

/**
 * List provisioned SCIM groups for an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const listProvisionedGroupsEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    excludedAttributes?: string;
    filter?: string;
    count?: number;
    startIndex?: number;
  },
  ScimGroupListEnterprise
> = {
  id: \\"enterprise-admin/list-provisioned-groups-enterprise\\",
};

/**
 * Provision a SCIM enterprise group and invite users
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
 */
export const provisionAndInviteEnterpriseGroup: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      members?: Array<{
        /**
         * The SCIM user ID for a user.
         */
        value: string;
      }>;

      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The name of the SCIM group. This must match the GitHub organization that the group maps to.
       */
      displayName: string;
    };
  },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/provision-and-invite-enterprise-group\\",
};

/**
 * List self-hosted runners for an enterprise
 * Lists all self-hosted runners configured for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listSelfHostedRunnersForEnterprise: ApiHeroEndpoint<
  { enterprise: string; page?: number; perPage?: number },
  {
    runners?: Array<Runner>;

    total_count?: number;
  }
> = {
  id: \\"enterprise-admin/list-self-hosted-runners-for-enterprise\\",
};

/**
 * Get GitHub Actions permissions for an enterprise
 * Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const getGithubActionsPermissionsEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  ActionsEnterprisePermissions
> = {
  id: \\"enterprise-admin/get-github-actions-permissions-enterprise\\",
};

/**
 * Set GitHub Actions permissions for an enterprise
 * Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const setGithubActionsPermissionsEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      allowed_actions?: AllowedActions;

      enabled_organizations: EnabledOrganizations;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-github-actions-permissions-enterprise\\",
};

/**
 * List self-hosted runner groups for an enterprise
 * Lists all self-hosted runner groups for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listSelfHostedRunnerGroupsForEnterprise: ApiHeroEndpoint<
  { enterprise: string; page?: number; perPage?: number; visibleToOrganization?: string },
  {
    total_count: number;

    runner_groups: Array<RunnerGroupsEnterprise>;
  }
> = {
  id: \\"enterprise-admin/list-self-hosted-runner-groups-for-enterprise\\",
};

/**
 * Create a self-hosted runner group for an enterprise
 * Creates a new self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const createSelfHostedRunnerGroupForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      /**
       * Name of the runner group.
       */
      name: string;

      /**
       * List of runner IDs to add to the runner group.
       */
      runners?: Array<number>;

      /**
       * Visibility of a runner group. You can select all organizations or select individual organization.
       */
      visibility?: \\"selected\\" | \\"all\\";

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * List of organization IDs that can access the runner group.
       */
      selected_organization_ids?: Array<number>;

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;
    };
  },
  RunnerGroupsEnterprise
> = {
  id: \\"enterprise-admin/create-self-hosted-runner-group-for-enterprise\\",
};

/**
 * List runner applications for an enterprise
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listRunnerApplicationsForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  Array<RunnerApplication>
> = {
  id: \\"enterprise-admin/list-runner-applications-for-enterprise\\",
};

/**
 * Get a self-hosted runner for an enterprise
 * Gets a specific self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const getSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  Runner
> = {
  id: \\"enterprise-admin/get-self-hosted-runner-for-enterprise\\",
};

/**
 * Delete a self-hosted runner from an enterprise
 * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerFromEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  void
> = {
  id: \\"enterprise-admin/delete-self-hosted-runner-from-enterprise\\",
};

/**
 * Create a remove token for an enterprise
 * Returns a token that you can pass to the \`config\` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an enterprise, replace \`TOKEN\` with the remove token provided by this
 * endpoint.
 *
 * \`\`\`
 * ./config.sh remove --token TOKEN
 * \`\`\`
 */
export const createRemoveTokenForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  AuthenticationToken
> = {
  id: \\"enterprise-admin/create-remove-token-for-enterprise\\",
};

/**
 * Get SCIM provisioning information for an enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const getProvisioningInformationForEnterpriseUser: ApiHeroEndpoint<
  { scimUserId: string; enterprise: string },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/get-provisioning-information-for-enterprise-user\\",
};

/**
 * Set SCIM information for a provisioned enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: \`userName\`, \`name\`, and \`emails\`.
 *
 * **Warning:** Setting \`active: false\` removes the user from the enterprise, deletes the external identity, and deletes the associated \`{scim_user_id}\`.
 */
export const setInformationForProvisionedEnterpriseUser: ApiHeroEndpoint<
  {
    scimUserId: string;
    enterprise: string;
    body: {
      name: {
        /**
         * The first name of the user.
         */
        givenName: string;

        /**
         * The last name of the user.
         */
        familyName: string;
      };

      /**
       * List of user emails.
       */
      emails: Array<{
        /**
         * The type of email address.
         */
        type: string;

        /**
         * The email address.
         */
        value: string;

        /**
         * Whether this email address is the primary address.
         */
        primary: boolean;
      }>;

      /**
       * List of SCIM group IDs the user is a member of.
       */
      groups?: Array<{
        value?: string;
      }>;

      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The username for the user.
       */
      userName: string;
    };
  },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/set-information-for-provisioned-enterprise-user\\",
};

/**
 * Delete a SCIM user from an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const deleteUserFromEnterprise: ApiHeroEndpoint<
  { scimUserId: string; enterprise: string },
  void
> = {
  id: \\"enterprise-admin/delete-user-from-enterprise\\",
};

/**
 * Update an attribute for a SCIM enterprise user
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific \`Operations\` JSON format that contains at least one of the \`add\`, \`remove\`, or \`replace\` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM \`path\` selectors that include filters are not supported. For example, a \`path\` selector defined as \`\\"path\\": \\"emails[type eq \\\\\\"work\\\\\\"]\\"\` will not work.
 *
 * **Warning:** If you set \`active:false\` using the \`replace\` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated \`:scim_user_id\`.
 *
 * \`\`\`
 * {
 * \\"Operations\\":[{
 * \\"op\\":\\"replace\\",
 * \\"value\\":{
 * \\"active\\":false
 * }
 * }]
 * }
 * \`\`\`
 */
export const updateAttributeForEnterpriseUser: ApiHeroEndpoint<
  {
    scimUserId: string;
    enterprise: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
       */
      Operations: Array<{}>;
    };
  },
  ScimEnterpriseUser
> = {
  id: \\"enterprise-admin/update-attribute-for-enterprise-user\\",
};

/**
 * Get SCIM provisioning information for an enterprise group
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const getProvisioningInformationForEnterpriseGroup: ApiHeroEndpoint<
  { scimGroupId: string; enterprise: string; excludedAttributes?: string },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/get-provisioning-information-for-enterprise-group\\",
};

/**
 * Set SCIM information for a provisioned enterprise group
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
 */
export const setInformationForProvisionedEnterpriseGroup: ApiHeroEndpoint<
  {
    scimGroupId: string;
    enterprise: string;
    body: {
      members?: Array<{
        /**
         * The SCIM user ID for a user.
         */
        value: string;
      }>;

      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * The name of the SCIM group. This must match the GitHub organization that the group maps to.
       */
      displayName: string;
    };
  },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/set-information-for-provisioned-enterprise-group\\",
};

/**
 * Delete a SCIM group from an enterprise
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const deleteScimGroupFromEnterprise: ApiHeroEndpoint<
  { scimGroupId: string; enterprise: string },
  void
> = {
  id: \\"enterprise-admin/delete-scim-group-from-enterprise\\",
};

/**
 * Update an attribute for a SCIM enterprise group
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 */
export const updateAttributeForEnterpriseGroup: ApiHeroEndpoint<
  {
    scimGroupId: string;
    enterprise: string;
    body: {
      /**
       * The SCIM schema URIs.
       */
      schemas: Array<string>;

      /**
       * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
       */
      Operations: Array<{
        op: \\"add\\" | \\"Add\\" | \\"remove\\" | \\"Remove\\" | \\"replace\\" | \\"Replace\\";

        path?: string;

        /**
         * Can be any value - string, number, array or object.
         */
        value?: {};
      }>;
    };
  },
  ScimEnterpriseGroup
> = {
  id: \\"enterprise-admin/update-attribute-for-enterprise-group\\",
};

/**
 * List selected organizations enabled for GitHub Actions in an enterprise
 * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const listSelectedOrganizationsEnabledGithubActionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; page?: number; perPage?: number },
  {
    total_count: number;

    organizations: Array<OrganizationSimple>;
  }
> = {
  id: \\"enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise\\",
};

/**
 * Set selected organizations enabled for GitHub Actions in an enterprise
 * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const setSelectedOrganizationsEnabledGithubActionsEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    body: {
      /**
       * List of organization IDs to enable for GitHub Actions.
       */
      selected_organization_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise\\",
};

/**
 * Create a registration token for an enterprise
 * Returns a token that you can pass to the \`config\` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint.
 *
 * \`\`\`
 * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
 * \`\`\`
 */
export const createRegistrationTokenForEnterprise: ApiHeroEndpoint<
  { enterprise: string },
  AuthenticationToken
> = {
  id: \\"enterprise-admin/create-registration-token-for-enterprise\\",
};

/**
 * List labels for a self-hosted runner for an enterprise
 * Lists all labels for a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listLabelsForSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"enterprise-admin/list-labels-for-self-hosted-runner-for-enterprise\\",
};

/**
 * Add custom labels to a self-hosted runner for an enterprise
 * Add custom labels to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const addCustomLabelsToSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to add to the runner.
       */
      labels: Array<string>;
    };
  },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"enterprise-admin/add-custom-labels-to-self-hosted-runner-for-enterprise\\",
};

/**
 * Set custom labels for a self-hosted runner for an enterprise
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const setCustomLabelsForSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerId: number;
    body: {
      /**
       * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
       */
      labels: Array<string>;
    };
  },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"enterprise-admin/set-custom-labels-for-self-hosted-runner-for-enterprise\\",
};

/**
 * Remove all custom labels from a self-hosted runner for an enterprise
 * Remove all custom labels from a self-hosted runner configured in an
 * enterprise. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"enterprise-admin/remove-all-custom-labels-from-self-hosted-runner-for-enterprise\\",
};

/**
 * Get GitHub Enterprise Server statistics
 * Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.
 *
 * To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \\"[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\\" in the GitHub Enterprise Server documentation.
 *
 * You'll need to use a personal access token:
 * - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the \`read:enterprise\` permission.
 * - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the \`read:org\` permission.
 *
 * For more information on creating a personal access token, see \\"[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\\"
 */
export const getServerStatistics: ApiHeroEndpoint<
  { enterpriseOrOrg: string; dateStart?: string; dateEnd?: string },
  ServerStatistics
> = {
  id: \\"enterprise-admin/get-server-statistics\\",
};

/**
 * Get allowed actions and reusable workflows for an enterprise
 * Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const getAllowedActionsEnterprise: ApiHeroEndpoint<{ enterprise: string }, SelectedActions> =
  {
    id: \\"enterprise-admin/get-allowed-actions-enterprise\\",
  };

/**
 * Set allowed actions and reusable workflows for an enterprise
 * Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const setAllowedActionsEnterprise: ApiHeroEndpoint<
  { enterprise: string; body: SelectedActions },
  void
> = {
  id: \\"enterprise-admin/set-allowed-actions-enterprise\\",
};

/**
 * Get a self-hosted runner group for an enterprise
 * Gets a specific self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const getSelfHostedRunnerGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number },
  RunnerGroupsEnterprise
> = {
  id: \\"enterprise-admin/get-self-hosted-runner-group-for-enterprise\\",
};

/**
 * Delete a self-hosted runner group from an enterprise
 * Deletes a self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const deleteSelfHostedRunnerGroupFromEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number },
  void
> = {
  id: \\"enterprise-admin/delete-self-hosted-runner-group-from-enterprise\\",
};

/**
 * Update a self-hosted runner group for an enterprise
 * Updates the \`name\` and \`visibility\` of a self-hosted runner group in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const updateSelfHostedRunnerGroupForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerGroupId: number;
    body?: {
      /**
       * Name of the runner group.
       */
      name?: string;

      /**
       * Visibility of a runner group. You can select all organizations or select individual organizations.
       */
      visibility?: \\"selected\\" | \\"all\\";

      /**
       * List of workflows the runner group should be allowed to run. This setting will be ignored unless \`restricted_to_workflows\` is set to \`true\`.
       */
      selected_workflows?: Array<string>;

      /**
       * If \`true\`, the runner group will be restricted to running only the workflows specified in the \`selected_workflows\` array.
       */
      restricted_to_workflows?: boolean;

      /**
       * Whether the runner group can be used by \`public\` repositories.
       */
      allows_public_repositories?: boolean;
    };
  },
  RunnerGroupsEnterprise
> = {
  id: \\"enterprise-admin/update-self-hosted-runner-group-for-enterprise\\",
};

/**
 * Remove a custom label from a self-hosted runner for an enterprise
 * Remove a custom label from a self-hosted runner configured
 * in an enterprise. Returns the remaining labels from the runner.
 *
 * This endpoint returns a \`404 Not Found\` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeCustomLabelFromSelfHostedRunnerForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number; name: string },
  {
    labels: Array<RunnerLabel>;

    total_count: number;
  }
> = {
  id: \\"enterprise-admin/remove-custom-label-from-self-hosted-runner-for-enterprise\\",
};

/**
 * Enable a selected organization for GitHub Actions in an enterprise
 * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const enableSelectedOrganizationGithubActionsEnterprise: ApiHeroEndpoint<
  { orgId: number; enterprise: string },
  void
> = {
  id: \\"enterprise-admin/enable-selected-organization-github-actions-enterprise\\",
};

/**
 * Disable a selected organization for GitHub Actions in an enterprise
 * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see \\"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
 */
export const disableSelectedOrganizationGithubActionsEnterprise: ApiHeroEndpoint<
  { orgId: number; enterprise: string },
  void
> = {
  id: \\"enterprise-admin/disable-selected-organization-github-actions-enterprise\\",
};

/**
 * List self-hosted runners in a group for an enterprise
 * Lists the self-hosted runners that are in a specific enterprise group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listSelfHostedRunnersInGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; page?: number; perPage?: number },
  {
    runners: Array<Runner>;

    total_count: number;
  }
> = {
  id: \\"enterprise-admin/list-self-hosted-runners-in-group-for-enterprise\\",
};

/**
 * Set self-hosted runners in a group for an enterprise
 * Replaces the list of self-hosted runners that are part of an enterprise runner group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const setSelfHostedRunnersInGroupForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerGroupId: number;
    body: {
      /**
       * List of runner IDs to add to the runner group.
       */
      runners: Array<number>;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-self-hosted-runners-in-group-for-enterprise\\",
};

/**
 * List organization access to a self-hosted runner group in an enterprise
 * Lists the organizations with access to a self-hosted runner group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const listOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerGroupId: number; page?: number; perPage?: number },
  {
    total_count: number;

    organizations: Array<OrganizationSimple>;
  }
> = {
  id: \\"enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise\\",
};

/**
 * Set organization access for a self-hosted runner group in an enterprise
 * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const setOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    runnerGroupId: number;
    body: {
      /**
       * List of organization IDs that can access the runner group.
       */
      selected_organization_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise\\",
};

/**
 * Add a self-hosted runner to a group for an enterprise
 * Adds a self-hosted runner to a runner group configured in an enterprise.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\`
 * scope to use this endpoint.
 */
export const addSelfHostedRunnerToGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number; runnerGroupId: number },
  void
> = {
  id: \\"enterprise-admin/add-self-hosted-runner-to-group-for-enterprise\\",
};

/**
 * Remove a self-hosted runner from a group for an enterprise
 * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeSelfHostedRunnerFromGroupForEnterprise: ApiHeroEndpoint<
  { enterprise: string; runnerId: number; runnerGroupId: number },
  void
> = {
  id: \\"enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise\\",
};

/**
 * Add organization access to a self-hosted runner group in an enterprise
 * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const addOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  { orgId: number; enterprise: string; runnerGroupId: number },
  void
> = {
  id: \\"enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise\\",
};

/**
 * Remove organization access to a self-hosted runner group in an enterprise
 * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see \\"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\\"
 *
 * You must authenticate using an access token with the \`manage_runners:enterprise\` scope to use this endpoint.
 */
export const removeOrgAccessToSelfHostedRunnerGroupInEnterprise: ApiHeroEndpoint<
  { orgId: number; enterprise: string; runnerGroupId: number },
  void
> = {
  id: \\"enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise\\",
};
",
  "dependabot.ts" => "import {
  DependabotPublicKey,
  DependabotSecret,
  EmptyObject,
  MinimalRepository,
  OrganizationDependabotSecret,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List organization secrets
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const listOrgSecrets: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  {
    secrets: Array<OrganizationDependabotSecret>;

    total_count: number;
  }
> = {
  id: \\"dependabot/list-org-secrets\\",
};

/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const listRepoSecrets: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    secrets: Array<DependabotSecret>;

    total_count: number;
  }
> = {
  id: \\"dependabot/list-repo-secrets\\",
};

/**
 * Get an organization public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const getOrgPublicKey: ApiHeroEndpoint<{ org: string }, DependabotPublicKey> = {
  id: \\"dependabot/get-org-public-key\\",
};

/**
 * Get an organization secret
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const getOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string },
  OrganizationDependabotSecret
> = {
  id: \\"dependabot/get-org-secret\\",
};

/**
 * Create or update an organization secret
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;

      /**
       * Which type of organization repositories have access to the organization secret. \`selected\` means only the repositories specified by \`selected_repository_ids\` can access the secret.
       */
      visibility: \\"all\\" | \\"private\\" | \\"selected\\";

      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
       */
      encrypted_value?: string;

      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids?: Array<string>;
    };
  },
  EmptyObject
> = {
  id: \\"dependabot/create-or-update-org-secret\\",
};

/**
 * Delete an organization secret
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const deleteOrgSecret: ApiHeroEndpoint<{ org: string; secretName: string }, void> = {
  id: \\"dependabot/delete-org-secret\\",
};

/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const getRepoPublicKey: ApiHeroEndpoint<
  { owner: string; repo: string },
  DependabotPublicKey
> = {
  id: \\"dependabot/get-repo-public-key\\",
};

/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const getRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  DependabotSecret
> = {
  id: \\"dependabot/get-repo-secret\\",
};

/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * \`\`\`
 * const sodium = require('tweetsodium');
 *
 * const key = \\"base64-encoded-public-key\\";
 * const value = \\"plain-text-secret\\";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * \`\`\`
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * \`\`\`
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 * \\"\\"\\"Encrypt a Unicode string using the public key.\\"\\"\\"
 * public_key = public.PublicKey(public_key.encode(\\"utf-8\\"), encoding.Base64Encoder())
 * sealed_box = public.SealedBox(public_key)
 * encrypted = sealed_box.encrypt(secret_value.encode(\\"utf-8\\"))
 * return b64encode(encrypted).decode(\\"utf-8\\")
 * \`\`\`
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * \`\`\`
 * var secretValue = System.Text.Encoding.UTF8.GetBytes(\\"mySecret\\");
 * var publicKey = Convert.FromBase64String(\\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\\");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * \`\`\`
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * \`\`\`ruby
 * require \\"rbnacl\\"
 * require \\"base64\\"
 *
 * key = Base64.decode64(\\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\\")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt(\\"my_secret\\")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * \`\`\`
 */
export const createOrUpdateRepoSecret: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    secretName: string;
    body: {
      /**
       * ID of the key you used to encrypt the secret.
       */
      key_id?: string;

      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.
       */
      encrypted_value?: string;
    };
  },
  EmptyObject
> = {
  id: \\"dependabot/create-or-update-repo-secret\\",
};

/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` repository permission to use this endpoint.
 */
export const deleteRepoSecret: ApiHeroEndpoint<
  { owner: string; repo: string; secretName: string },
  void
> = {
  id: \\"dependabot/delete-repo-secret\\",
};

/**
 * List selected repositories for an organization secret
 * Lists all repositories that have been selected when the \`visibility\` for repository access to a secret is set to \`selected\`. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const listSelectedReposForOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; page?: number; perPage?: number },
  {
    total_count: number;

    repositories: Array<MinimalRepository>;
  }
> = {
  id: \\"dependabot/list-selected-repos-for-org-secret\\",
};

/**
 * Set selected repositories for an organization secret
 * Replaces all repositories for an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const setSelectedReposForOrgSecret: ApiHeroEndpoint<
  {
    org: string;
    secretName: string;
    body: {
      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
       */
      selected_repository_ids: Array<number>;
    };
  },
  void
> = {
  id: \\"dependabot/set-selected-repos-for-org-secret\\",
};

/**
 * Add selected repository to an organization secret
 * Adds a repository to an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const addSelectedRepoToOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; repositoryId: number },
  void
> = {
  id: \\"dependabot/add-selected-repo-to-org-secret\\",
};

/**
 * Remove selected repository from an organization secret
 * Removes a repository from an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`dependabot_secrets\` organization permission to use this endpoint.
 */
export const removeSelectedRepoFromOrgSecret: ApiHeroEndpoint<
  { org: string; secretName: string; repositoryId: number },
  void
> = {
  id: \\"dependabot/remove-selected-repo-from-org-secret\\",
};
",
  "dependency-graph.ts" => "import { DependencyGraphDiff, Snapshot, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Create a snapshot of dependencies for a repository
 * Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the \`repo\` scope to use this endpoint for a repository that the requesting user has access to.
 */
export const createRepositorySnapshot: ApiHeroEndpoint<
  { owner: string; repo: string; body: Snapshot },
  {
    /**
     * ID of the created snapshot.
     */
    id: number;

    /**
     * Either \\"SUCCESS\\", \\"ACCEPTED\\", or \\"INVALID\\". \\"SUCCESS\\" indicates that the snapshot was successfully created and the repository's dependencies were updated. \\"ACCEPTED\\" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. \\"INVALID\\" indicates that the snapshot was malformed.
     */
    result: string;

    /**
     * A message providing further details about the result, such as why the dependencies were not updated.
     */
    message: string;

    /**
     * The time at which the snapshot was created.
     */
    created_at: string;
  }
> = {
  id: \\"dependency-graph/create-repository-snapshot\\",
};

/**
 * Get a diff of the dependencies between commits
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
 */
export const diffRange: ApiHeroEndpoint<
  { owner: string; repo: string; basehead: string; name?: string },
  DependencyGraphDiff
> = {
  id: \\"dependency-graph/diff-range\\",
};
",
  "gists.ts" => "import { BaseGist, GistComment, GistCommit, GistSimple, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List gists for the authenticated user
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const list: ApiHeroEndpoint<
  { page?: number; since?: string; perPage?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list\\",
};

/**
 * Create a gist
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files \\"gistfile\\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const create: ApiHeroEndpoint<
  {
    body: {
      /**
       * Names and content for the files that make up the gist
       */
      files: Record<
        string,
        {
          /**
           * Content of the file
           */
          content: string;
        }
      >;

      public?: boolean | \\"true\\" | \\"false\\";

      /**
       * Description of the gist
       */
      description?: string;
    };
  },
  GistSimple
> = {
  id: \\"gists/create\\",
};

/**
 * List public gists
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const listPublic: ApiHeroEndpoint<
  { page?: number; since?: string; perPage?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list-public\\",
};

/**
 * List starred gists
 * List the authenticated user's starred gists:
 */
export const listStarred: ApiHeroEndpoint<
  { page?: number; since?: string; perPage?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list-starred\\",
};

/**
 * Get a gist
 */
export const getGists: ApiHeroEndpoint<{ gistId: string }, GistSimple> = {
  id: \\"gists/get\\",
};

/**
 * Delete a gist
 */
export const deleteGists: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/delete\\",
};

/**
 * Update a gist
 * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const update: ApiHeroEndpoint<
  {
    gistId: string;
    body: {
      /**
       * Names of files to be updated
       */
      files?: Record<
        string,
        {
          /**
           * The new content of the file
           */
          content?: string;

          /**
           * The new filename for the file
           */
          filename?: string;
        }
      >;

      /**
       * Description of the gist
       */
      description?: string;
    };
  },
  GistSimple
> = {
  id: \\"gists/update\\",
};

/**
 * Check if a gist is starred
 */
export const checkIsStarred: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/check-is-starred\\",
};

/**
 * Star a gist
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const star: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/star\\",
};

/**
 * Unstar a gist
 */
export const unstar: ApiHeroEndpoint<{ gistId: string }, void> = {
  id: \\"gists/unstar\\",
};

/**
 * List gist forks
 */
export const listForks: ApiHeroEndpoint<
  { gistId: string; page?: number; perPage?: number },
  Array<GistSimple>
> = {
  id: \\"gists/list-forks\\",
};

/**
 * Fork a gist
 * **Note**: This was previously \`/gists/:gist_id/fork\`.
 */
export const fork: ApiHeroEndpoint<{ gistId: string }, BaseGist> = {
  id: \\"gists/fork\\",
};

/**
 * Get a gist revision
 */
export const getRevision: ApiHeroEndpoint<{ gistId: string; sha: string }, GistSimple> = {
  id: \\"gists/get-revision\\",
};

/**
 * List gists for a user
 * Lists public gists for the specified user:
 */
export const listForUser: ApiHeroEndpoint<
  { username: string; page?: number; since?: string; perPage?: number },
  Array<BaseGist>
> = {
  id: \\"gists/list-for-user\\",
};

/**
 * List gist commits
 */
export const listCommits: ApiHeroEndpoint<
  { gistId: string; page?: number; perPage?: number },
  Array<GistCommit>
> = {
  id: \\"gists/list-commits\\",
};

/**
 * List gist comments
 */
export const listComments: ApiHeroEndpoint<
  { gistId: string; page?: number; perPage?: number },
  Array<GistComment>
> = {
  id: \\"gists/list-comments\\",
};

/**
 * Create a gist comment
 */
export const createComment: ApiHeroEndpoint<
  {
    gistId: string;
    body: {
      /**
       * The comment text.
       */
      body: string;
    };
  },
  GistComment
> = {
  id: \\"gists/create-comment\\",
};

/**
 * Get a gist comment
 */
export const getComment: ApiHeroEndpoint<{ gistId: string; commentId: number }, GistComment> = {
  id: \\"gists/get-comment\\",
};

/**
 * Delete a gist comment
 */
export const deleteComment: ApiHeroEndpoint<{ gistId: string; commentId: number }, void> = {
  id: \\"gists/delete-comment\\",
};

/**
 * Update a gist comment
 */
export const updateComment: ApiHeroEndpoint<
  {
    gistId: string;
    commentId: number;
    body: {
      /**
       * The comment text.
       */
      body: string;
    };
  },
  GistComment
> = {
  id: \\"gists/update-comment\\",
};
",
  "git.ts" => "import { Blob, GitCommit, GitRef, GitTag, GitTree, ShortBlob, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Create a reference
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const createRef: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      key?: string;

      /**
       * The name of the fully qualified reference (ie: \`refs/heads/master\`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
       */
      ref: string;

      /**
       * The SHA1 value for this reference.
       */
      sha: string;
    };
  },
  GitRef
> = {
  id: \\"git/create-ref\\",
};

/**
 * Create a tag object
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the \`refs/tags/[tag]\` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const createTag: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The tag's name. This is typically a version (e.g., \\"v0.0.1\\").
       */
      tag: string;

      /**
       * The type of the object we're tagging. Normally this is a \`commit\` but it can also be a \`tree\` or a \`blob\`.
       */
      type: \\"commit\\" | \\"tree\\" | \\"blob\\";

      /**
       * The SHA of the git object this is tagging.
       */
      object: string;

      /**
       * An object with information about the individual creating the tag.
       */
      tagger?: {
        /**
         * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
         */
        date?: string;

        /**
         * The name of the author of the tag
         */
        name: string;

        /**
         * The email of the author of the tag
         */
        email: string;
      };

      /**
       * The tag message.
       */
      message: string;
    };
  },
  GitTag
> = {
  id: \\"git/create-tag\\",
};

/**
 * Create a blob
 */
export const createBlob: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The new blob's content.
       */
      content: string;

      /**
       * The encoding used for \`content\`. Currently, \`\\"utf-8\\"\` and \`\\"base64\\"\` are supported.
       */
      encoding?: string;
    };
  },
  ShortBlob
> = {
  id: \\"git/create-blob\\",
};

/**
 * Create a tree
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \\"[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)\\" and \\"[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference).\\"
 */
export const createTree: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Objects (of \`path\`, \`mode\`, \`type\`, and \`sha\`) specifying a tree structure.
       */
      tree: Array<{
        /** 
* The SHA1 checksum ID of the object in the tree. Also called \`tree.sha\`. If the value is \`null\` then the file will be deleted.  
  
**Note:** Use either \`tree.sha\` or \`content\` to specify the contents of the entry. Using both \`tree.sha\` and \`content\` will return an error.
*/
        sha?: string;

        /**
         * The file mode; one of \`100644\` for file (blob), \`100755\` for executable (blob), \`040000\` for subdirectory (tree), \`160000\` for submodule (commit), or \`120000\` for a blob that specifies the path of a symlink.
         */
        mode?: \\"100644\\" | \\"100755\\" | \\"040000\\" | \\"160000\\" | \\"120000\\";

        /**
         * The file referenced in the tree.
         */
        path?: string;

        /**
         * Either \`blob\`, \`tree\`, or \`commit\`.
         */
        type?: \\"blob\\" | \\"tree\\" | \\"commit\\";

        /** 
* The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or \`tree.sha\`.  
  
**Note:** Use either \`tree.sha\` or \`content\` to specify the contents of the entry. Using both \`tree.sha\` and \`content\` will return an error.
*/
        content?: string;
      }>;

      /** 
* The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by \`base_tree\` and entries defined in the \`tree\` parameter. Entries defined in the \`tree\` parameter will overwrite items from \`base_tree\` with the same \`path\`. If you're creating new changes on a branch, then normally you'd set \`base_tree\` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
If not provided, GitHub will create a new Git tree object from only the entries defined in the \`tree\` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the \`tree\` parameter will be listed as deleted by the new commit.

*/
      base_tree?: string;
    };
  },
  GitTree
> = {
  id: \\"git/create-tree\\",
};

/**
 * Create a commit
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const createCommit: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The SHA of the tree object this commit points to
       */
      tree: string;

      /**
       * Information about the author of the commit. By default, the \`author\` will be the authenticated user and the current date. See the \`author\` and \`committer\` object below for details.
       */
      author?: {
        /**
         * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
         */
        date?: string;

        /**
         * The name of the author (or committer) of the commit
         */
        name: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email: string;
      };

      /**
       * The commit message
       */
      message: string;

      /**
       * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
       */
      parents?: Array<string>;

      /**
       * Information about the person who is making the commit. By default, \`committer\` will use the information set in \`author\`. See the \`author\` and \`committer\` object below for details.
       */
      committer?: {
        /**
         * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
         */
        date?: string;

        /**
         * The name of the author (or committer) of the commit
         */
        name?: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email?: string;
      };

      /**
       * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the \`gpgsig\` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a \`signature\` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
       */
      signature?: string;
    };
  },
  GitCommit
> = {
  id: \\"git/create-commit\\",
};

/**
 * Get a reference
 * Returns a single reference from your Git database. The \`:ref\` in the URL must be formatted as \`heads/<branch name>\` for branches and \`tags/<tag name>\` for tags. If the \`:ref\` doesn't match an existing ref, a \`404\` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \\"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\\".
 */
export const getRef: ApiHeroEndpoint<{ ref: string; owner: string; repo: string }, GitRef> = {
  id: \\"git/get-ref\\",
};

/**
 * Delete a reference
 */
export const deleteRef: ApiHeroEndpoint<{ ref: string; owner: string; repo: string }, void> = {
  id: \\"git/delete-ref\\",
};

/**
 * Update a reference
 */
export const updateRef: ApiHeroEndpoint<
  {
    ref: string;
    owner: string;
    repo: string;
    body: {
      /**
       * The SHA1 value to set this reference to
       */
      sha: string;

      /**
       * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to \`false\` will make sure you're not overwriting work.
       */
      force?: boolean;
    };
  },
  GitRef
> = {
  id: \\"git/update-ref\\",
};

/**
 * Get a tag
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getTag: ApiHeroEndpoint<{ owner: string; repo: string; tagSha: string }, GitTag> = {
  id: \\"git/get-tag\\",
};

/**
 * Get a blob
 * The \`content\` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const getBlob: ApiHeroEndpoint<{ owner: string; repo: string; fileSha: string }, Blob> = {
  id: \\"git/get-blob\\",
};

/**
 * Get a tree
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If \`truncated\` is \`true\` in the response then the number of items in the \`tree\` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 */
export const getTree: ApiHeroEndpoint<
  { owner: string; repo: string; treeSha: string; recursive?: string },
  GitTree
> = {
  id: \\"git/get-tree\\",
};

/**
 * List matching references
 * Returns an array of references from your Git database that match the supplied name. The \`:ref\` in the URL must be formatted as \`heads/<branch name>\` for branches and \`tags/<tag name>\` for tags. If the \`:ref\` doesn't exist in the repository, but existing refs start with \`:ref\`, they will be returned as an array.
 *
 * When you use this endpoint without providing a \`:ref\`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just \`heads\` and \`tags\`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \\"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\\".
 *
 * If you request matching references for a branch named \`feature\` but the branch \`feature\` doesn't exist, the response can still include other matching head refs that start with the word \`feature\`, such as \`featureA\` and \`featureB\`.
 */
export const listMatchingRefs: ApiHeroEndpoint<
  { owner: string; ref: string; repo: string; page?: number; perPage?: number },
  Array<GitRef>
> = {
  id: \\"git/list-matching-refs\\",
};

/**
 * Get a commit
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string },
  GitCommit
> = {
  id: \\"git/get-commit\\",
};
",
  "gitignore.ts" => "import { GitignoreTemplate, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get all gitignore templates
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const getAllTemplates: ApiHeroEndpoint<never, Array<string>> = {
  id: \\"gitignore/get-all-templates\\",
};

/**
 * Get a gitignore template
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const getTemplate: ApiHeroEndpoint<{ name: string }, GitignoreTemplate> = {
  id: \\"gitignore/get-template\\",
};
",
  "interactions.ts" => "import { InteractionLimit, InteractionLimitResponse, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get interaction restrictions for your public repositories
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 */
export const getRestrictionsForAuthenticatedUser: ApiHeroEndpoint<never, InteractionLimitResponse> =
  {
    id: \\"interactions/get-restrictions-for-authenticated-user\\",
  };

/**
 * Set interaction restrictions for your public repositories
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const setRestrictionsForAuthenticatedUser: ApiHeroEndpoint<
  { body: InteractionLimit },
  InteractionLimitResponse
> = {
  id: \\"interactions/set-restrictions-for-authenticated-user\\",
};

/**
 * Remove interaction restrictions from your public repositories
 * Removes any interaction restrictions from your public repositories.
 */
export const removeRestrictionsForAuthenticatedUser: ApiHeroEndpoint<never, void> = {
  id: \\"interactions/remove-restrictions-for-authenticated-user\\",
};

/**
 * Get interaction restrictions for an organization
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const getRestrictionsForOrg: ApiHeroEndpoint<{ org: string }, InteractionLimitResponse> = {
  id: \\"interactions/get-restrictions-for-org\\",
};

/**
 * Set interaction restrictions for an organization
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const setRestrictionsForOrg: ApiHeroEndpoint<
  { org: string; body: InteractionLimit },
  InteractionLimitResponse
> = {
  id: \\"interactions/set-restrictions-for-org\\",
};

/**
 * Remove interaction restrictions for an organization
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const removeRestrictionsForOrg: ApiHeroEndpoint<{ org: string }, void> = {
  id: \\"interactions/remove-restrictions-for-org\\",
};

/**
 * Get interaction restrictions for a repository
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const getRestrictionsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string },
  InteractionLimitResponse
> = {
  id: \\"interactions/get-restrictions-for-repo\\",
};

/**
 * Set interaction restrictions for a repository
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a \`409 Conflict\` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const setRestrictionsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; body: InteractionLimit },
  InteractionLimitResponse
> = {
  id: \\"interactions/set-restrictions-for-repo\\",
};

/**
 * Remove interaction restrictions for a repository
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a \`409 Conflict\` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const removeRestrictionsForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"interactions/remove-restrictions-for-repo\\",
};
",
  "issues.ts" => "import {
  Issue,
  IssueComment,
  IssueEvent,
  IssueEventForIssue,
  Label,
  Milestone,
  SimpleUser,
  TimelineIssueEvents,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List issues assigned to the authenticated user
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the \`filter\` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const list: ApiHeroEndpoint<
  {
    page?: number;
    since?: string;
    pulls?: boolean;
    direction?: \\"asc\\" | \\"desc\\";
    orgs?: boolean;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    filter?: \\"assigned\\" | \\"created\\" | \\"mentioned\\" | \\"subscribed\\" | \\"repos\\" | \\"all\\";
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    owned?: boolean;
    collab?: boolean;
    labels?: string;
  },
  Array<Issue>
> = {
  id: \\"issues/list\\",
};

/**
 * List user account issues assigned to the authenticated user
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  {
    page?: number;
    since?: string;
    direction?: \\"asc\\" | \\"desc\\";
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    perPage?: number;
    filter?: \\"assigned\\" | \\"created\\" | \\"mentioned\\" | \\"subscribed\\" | \\"repos\\" | \\"all\\";
    labels?: string;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
  },
  Array<Issue>
> = {
  id: \\"issues/list-for-authenticated-user\\",
};

/**
 * List organization issues assigned to the authenticated user
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const listForOrg: ApiHeroEndpoint<
  {
    org: string;
    page?: number;
    since?: string;
    direction?: \\"asc\\" | \\"desc\\";
    filter?: \\"assigned\\" | \\"created\\" | \\"mentioned\\" | \\"subscribed\\" | \\"repos\\" | \\"all\\";
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    labels?: string;
  },
  Array<Issue>
> = {
  id: \\"issues/list-for-org\\",
};

/**
 * List repository issues
 * List issues in a repository.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const listForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    since?: string;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    creator?: string;
    labels?: string;
    sort?: \\"created\\" | \\"updated\\" | \\"comments\\";
    assignee?: string;
    mentioned?: string;
    milestone?: string;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
  },
  Array<Issue>
> = {
  id: \\"issues/list-for-repo\\",
};

/**
 * Create an issue
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a \`410 Gone\` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const create: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The contents of the issue.
       */
      body?: string;

      /**
       * The title of the issue.
       */
      title: string | number;

      /**
       * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
       */
      labels?: Array<
        | string
        | {
            id?: number;

            name?: string;

            color?: string;

            description?: string;
          }
      >;

      /**
       * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
       */
      assignee?: string;

      /**
       * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
       */
      assignees?: Array<string>;

      milestone?: string | number;
    };
  },
  Issue
> = {
  id: \\"issues/create\\",
};

/**
 * List labels for a repository
 */
export const listLabelsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<Label>
> = {
  id: \\"issues/list-labels-for-repo\\",
};

/**
 * Create a label
 */
export const createLabel: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing \`:strawberry:\` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \\":strawberry:\\"). For a full list of available emoji and codes, see \\"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\\"
       */
      name: string;

      /**
       * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading \`#\`.
       */
      color?: string;

      /**
       * A short description of the label. Must be 100 characters or fewer.
       */
      description?: string;
    };
  },
  Label
> = {
  id: \\"issues/create-label\\",
};

/**
 * List assignees
 * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const listAssignees: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<SimpleUser>
> = {
  id: \\"issues/list-assignees\\",
};

/**
 * List milestones
 */
export const listMilestones: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    sort?: \\"due_on\\" | \\"completeness\\";
    direction?: \\"asc\\" | \\"desc\\";
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
  },
  Array<Milestone>
> = {
  id: \\"issues/list-milestones\\",
};

/**
 * Create a milestone
 */
export const createMilestone: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The state of the milestone. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      /**
       * The title of the milestone.
       */
      title: string;

      /**
       * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      due_on?: string;

      /**
       * A description of the milestone.
       */
      description?: string;
    };
  },
  Milestone
> = {
  id: \\"issues/create-milestone\\",
};

/**
 * List issue events for a repository
 */
export const listEventsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<IssueEvent>
> = {
  id: \\"issues/list-events-for-repo\\",
};

/**
 * Get a label
 */
export const getLabel: ApiHeroEndpoint<{ name: string; owner: string; repo: string }, Label> = {
  id: \\"issues/get-label\\",
};

/**
 * Delete a label
 */
export const deleteLabel: ApiHeroEndpoint<{ name: string; owner: string; repo: string }, void> = {
  id: \\"issues/delete-label\\",
};

/**
 * Update a label
 */
export const updateLabel: ApiHeroEndpoint<
  {
    name: string;
    owner: string;
    repo: string;
    body?: {
      /**
       * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading \`#\`.
       */
      color?: string;

      /**
       * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing \`:strawberry:\` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \\":strawberry:\\"). For a full list of available emoji and codes, see \\"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\\"
       */
      new_name?: string;

      /**
       * A short description of the label. Must be 100 characters or fewer.
       */
      description?: string;
    };
  },
  Label
> = {
  id: \\"issues/update-label\\",
};

/**
 * List issue comments for a repository
 * By default, Issue Comments are ordered by ascending ID.
 */
export const listCommentsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    since?: string;
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
  },
  Array<IssueComment>
> = {
  id: \\"issues/list-comments-for-repo\\",
};

/**
 * Check if a user can be assigned
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the \`assignee\` can be assigned to issues in the repository, a \`204\` header with no content is returned.
 *
 * Otherwise a \`404\` status code is returned.
 */
export const checkUserCanBeAssigned: ApiHeroEndpoint<
  { owner: string; repo: string; assignee: string },
  void
> = {
  id: \\"issues/check-user-can-be-assigned\\",
};

/**
 * Get an issue
 * The API returns a [\`301 Moved Permanently\` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a \`404 Not Found\` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a \`410 Gone\` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [\`issues\`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, \\"Issues\\" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from \\"Issues\\" endpoints will be an _issue id_. To find out the pull
 * request id, use the \\"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\\" endpoint.
 */
export const getIssues: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number },
  Issue
> = {
  id: \\"issues/get\\",
};

/**
 * Update an issue
 * Issue owners and users with push access can edit an issue.
 */
export const update: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?: {
      /**
       * The contents of the issue.
       */
      body?: string;

      /**
       * State of the issue. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      /**
       * The title of the issue.
       */
      title?: string | number;

      /**
       * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (\`[]\`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
       */
      labels?: Array<
        | string
        | {
            id?: number;

            name?: string;

            color?: string;

            description?: string;
          }
      >;

      /**
       * Login for the user that this issue should be assigned to. **This field is deprecated.**
       */
      assignee?: string;

      /**
       * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (\`[]\`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
       */
      assignees?: Array<string>;

      milestone?: string | number;
    };
  },
  Issue
> = {
  id: \\"issues/update\\",
};

/**
 * Get an issue event
 */
export const getEvent: ApiHeroEndpoint<
  { owner: string; repo: string; eventId: number },
  IssueEvent
> = {
  id: \\"issues/get-event\\",
};

/**
 * Lock an issue
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const lock: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; body?: any | null },
  void
> = {
  id: \\"issues/lock\\",
};

/**
 * Unlock an issue
 * Users with push access can unlock an issue's conversation.
 */
export const unlock: ApiHeroEndpoint<{ owner: string; repo: string; issueNumber: number }, void> = {
  id: \\"issues/unlock\\",
};

/**
 * Get an issue comment
 */
export const getComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string },
  IssueComment
> = {
  id: \\"issues/get-comment\\",
};

/**
 * Delete an issue comment
 */
export const deleteComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string },
  void
> = {
  id: \\"issues/delete-comment\\",
};

/**
 * Update an issue comment
 */
export const updateComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    body: {
      /**
       * The contents of the comment.
       */
      body: string;
    };
  },
  IssueComment
> = {
  id: \\"issues/update-comment\\",
};

/**
 * List issue events
 */
export const listEvents: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; page?: number; perPage?: number },
  Array<IssueEventForIssue>
> = {
  id: \\"issues/list-events\\",
};

/**
 * List labels for an issue
 */
export const listLabelsOnIssue: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; page?: number; perPage?: number },
  Array<Label>
> = {
  id: \\"issues/list-labels-on-issue\\",
};

/**
 * Add labels to an issue
 */
export const addLabels: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?:
      | {
          /**
           * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a \`string\` or an \`array\` of labels directly, but GitHub recommends passing an object with the \`labels\` key. You can also replace all of the labels for an issue. For more information, see \\"[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue).\\"
           */
          labels?: Array<string>;
        }
      | Array<string>
      | {
          labels?: Array<{
            name: string;
          }>;
        }
      | string;
  },
  Array<Label>
> = {
  id: \\"issues/add-labels\\",
};

/**
 * Set labels for an issue
 * Removes any previous labels and sets the new labels for an issue.
 */
export const setLabels: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?:
      | {
          /**
           * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a \`string\` or an \`array\` of labels directly, but GitHub recommends passing an object with the \`labels\` key. You can also add labels to the existing labels for an issue. For more information, see \\"[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue).\\"
           */
          labels?: Array<string>;
        }
      | Array<string>
      | {
          labels?: Array<{
            name: string;
          }>;
        }
      | string;
  },
  Array<Label>
> = {
  id: \\"issues/set-labels\\",
};

/**
 * Remove all labels from an issue
 */
export const removeAllLabels: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number },
  void
> = {
  id: \\"issues/remove-all-labels\\",
};

/**
 * Get a milestone
 */
export const getMilestone: ApiHeroEndpoint<
  { owner: string; repo: string; milestoneNumber: number },
  Milestone
> = {
  id: \\"issues/get-milestone\\",
};

/**
 * Delete a milestone
 */
export const deleteMilestone: ApiHeroEndpoint<
  { owner: string; repo: string; milestoneNumber: number },
  void
> = {
  id: \\"issues/delete-milestone\\",
};

/**
 * Update a milestone
 */
export const updateMilestone: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    milestoneNumber: number;
    body?: {
      /**
       * The state of the milestone. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      /**
       * The title of the milestone.
       */
      title?: string;

      /**
       * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
       */
      due_on?: string;

      /**
       * A description of the milestone.
       */
      description?: string;
    };
  },
  Milestone
> = {
  id: \\"issues/update-milestone\\",
};

/**
 * List issue comments
 * Issue Comments are ordered by ascending ID.
 */
export const listComments: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    page?: number;
    since?: string;
    perPage?: number;
  },
  Array<IssueComment>
> = {
  id: \\"issues/list-comments\\",
};

/**
 * Create an issue comment
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body: {
      /**
       * The contents of the comment.
       */
      body: string;
    };
  },
  IssueComment
> = {
  id: \\"issues/create-comment\\",
};

/**
 * List timeline events for an issue
 */
export const listEventsForTimeline: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; page?: number; perPage?: number },
  Array<TimelineIssueEvents>
> = {
  id: \\"issues/list-events-for-timeline\\",
};

/**
 * Add assignees to an issue
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const addAssignees: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?: {
      /**
       * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
       */
      assignees?: Array<string>;
    };
  },
  Issue
> = {
  id: \\"issues/add-assignees\\",
};

/**
 * Remove assignees from an issue
 * Removes one or more assignees from an issue.
 */
export const removeAssignees: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body?: {
      /**
       * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
       */
      assignees?: Array<string>;
    };
  },
  Issue
> = {
  id: \\"issues/remove-assignees\\",
};

/**
 * Remove a label from an issue
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a \`404 Not Found\` status if the label does not exist.
 */
export const removeLabel: ApiHeroEndpoint<
  { owner: string; repo: string; name: string; issueNumber: number },
  Array<Label>
> = {
  id: \\"issues/remove-label\\",
};

/**
 * List labels for issues in a milestone
 */
export const listLabelsForMilestone: ApiHeroEndpoint<
  { owner: string; repo: string; milestoneNumber: number; page?: number; perPage?: number },
  Array<Label>
> = {
  id: \\"issues/list-labels-for-milestone\\",
};
",
  "licenses.ts" => "import { License, LicenseContent, LicenseSimple, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get all commonly used licenses
 */
export const getAllCommonlyUsed: ApiHeroEndpoint<
  { page?: number; featured?: boolean; perPage?: number },
  Array<LicenseSimple>
> = {
  id: \\"licenses/get-all-commonly-used\\",
};

/**
 * Get a license
 */
export const getLicenses: ApiHeroEndpoint<{ license: string }, License> = {
  id: \\"licenses/get\\",
};

/**
 * Get the license for a repository
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const getForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, LicenseContent> = {
  id: \\"licenses/get-for-repo\\",
};
",
  "markdown.ts" => "/**
 * Render a Markdown document
 */
export const render: ApiHeroEndpoint<
  {
    body: {
      /**
       * The rendering mode. Can be either \`markdown\` or \`gfm\`.
       */
      mode?: \\"markdown\\" | \\"gfm\\";

      /**
       * The Markdown text to render in HTML.
       */
      text: string;

      /**
       * The repository context to use when creating references in \`gfm\` mode.  For example, setting \`context\` to \`octo-org/octo-repo\` will change the text \`#42\` into an HTML link to issue 42 in the \`octo-org/octo-repo\` repository.
       */
      context?: string;
    };
  },
  string
> = {
  id: \\"markdown/render\\",
};

/**
 * Render a Markdown document in raw mode
 * You must send Markdown as plain text (using a \`Content-Type\` header of \`text/plain\` or \`text/x-markdown\`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const renderRaw: ApiHeroEndpoint<{ body?: string }, string> = {
  id: \\"markdown/render-raw\\",
};
",
  "merge-queue.ts" => "",
  "meta.ts" => "import { ApiOverview, Root, ApiHeroEndpoint } from \\"./@types\\";

/**
 * GitHub API Root
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const root: ApiHeroEndpoint<never, Root> = {
  id: \\"meta/root\\",
};

/**
 * Get the Zen of GitHub
 * Get a random sentence from the Zen of GitHub
 */
export const getZen: ApiHeroEndpoint<never, string> = {
  id: \\"meta/get-zen\\",
};

/**
 * Get GitHub meta information
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \\"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\\"
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const getMeta: ApiHeroEndpoint<never, ApiOverview> = {
  id: \\"meta/get\\",
};

/**
 * Get Octocat
 * Get the octocat as ASCII art
 */
export const getOctocat: ApiHeroEndpoint<{ s?: string }, string> = {
  id: \\"meta/get-octocat\\",
};
",
  "migrations.ts" => "import {
  Import,
  Migration,
  MinimalRepository,
  PorterAuthor,
  PorterLargeFile,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List user migrations
 * Lists all migrations a user has started.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<Migration>
> = {
  id: \\"migrations/list-for-authenticated-user\\",
};

/**
 * Start a user migration
 * Initiates the generation of a user migration archive.
 */
export const startForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * Exclude attributes from the API response to improve performance
       */
      exclude?: Array<\\"repositories\\">;

      repositories: Array<string>;

      /**
       * Indicates whether the repository git data should be excluded from the migration.
       */
      exclude_git_data?: boolean;

      /**
       * Indicates whether metadata should be excluded and only git source should be included for the migration.
       */
      exclude_metadata?: boolean;

      /**
       * Do not include releases in the migration
       */
      exclude_releases?: boolean;

      /**
       * Lock the repositories being migrated at the start of the migration
       */
      lock_repositories?: boolean;

      /**
       * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
       */
      org_metadata_only?: boolean;

      /**
       * Do not include attachments in the migration
       */
      exclude_attachments?: boolean;

      /**
       * Indicates whether projects owned by the organization or users should be excluded.
       */
      exclude_owner_projects?: boolean;
    };
  },
  Migration
> = {
  id: \\"migrations/start-for-authenticated-user\\",
};

/**
 * List organization migrations
 * Lists the most recent migrations.
 */
export const listForOrg: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number; exclude?: Array<\\"repositories\\"> },
  Array<Migration>
> = {
  id: \\"migrations/list-for-org\\",
};

/**
 * Start an organization migration
 * Initiates the generation of a migration archive.
 */
export const startForOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: \`\\"repositories\\"\`.
       */
      exclude?: Array<\\"repositories\\">;

      /**
       * A list of arrays indicating which repositories should be migrated.
       */
      repositories: Array<string>;

      /**
       * Indicates whether the repository git data should be excluded from the migration.
       */
      exclude_git_data?: boolean;

      /**
       * Indicates whether metadata should be excluded and only git source should be included for the migration.
       */
      exclude_metadata?: boolean;

      /**
       * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
       */
      exclude_releases?: boolean;

      /**
       * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
       */
      lock_repositories?: boolean;

      /**
       * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
       */
      org_metadata_only?: boolean;

      /**
       * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
       */
      exclude_attachments?: boolean;

      /**
       * Indicates whether projects owned by the organization or users should be excluded. from the migration.
       */
      exclude_owner_projects?: boolean;
    };
  },
  Migration
> = {
  id: \\"migrations/start-for-org\\",
};

/**
 * Get an import status
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the \`status\` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   \`detecting\` - the \\"detection\\" step of the import is in progress because the request did not include a \`vcs\` parameter. The import is identifying the type of source control present at the URL.
 * *   \`importing\` - the \\"raw\\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include \`commit_count\` (the total number of raw commits that will be imported) and \`percent\` (0 - 100, the current progress through the import).
 * *   \`mapping\` - the \\"rewrite\\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   \`pushing\` - the \\"push\\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include \`push_percent\`, which is the percent value reported by \`git push\` when it is \\"Writing objects\\".
 * *   \`complete\` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the \`status\` field:
 *
 * *   \`auth_failed\` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   \`error\` - the import encountered an error. The import progress response will include the \`failed_step\` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
 * *   \`detection_needs_auth\` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   \`detection_found_nothing\` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
 * *   \`detection_found_multiple\` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a \`project_choices\` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a \`project_choices\` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   \`use_lfs\` - describes whether the import has been opted in or out of using Git LFS. The value can be \`opt_in\`, \`opt_out\`, or \`undecided\` if no action has been taken.
 * *   \`has_large_files\` - the boolean value describing whether files larger than 100MB were found during the \`importing\` step.
 * *   \`large_files_size\` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   \`large_files_count\` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \\"Get Large Files\\" request.
 */
export const getImportStatus: ApiHeroEndpoint<{ owner: string; repo: string }, Import> = {
  id: \\"migrations/get-import-status\\",
};

/**
 * Start an import
 * Start a source import to a GitHub repository using GitHub Importer.
 */
export const startImport: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
       */
      vcs?: \\"subversion\\" | \\"git\\" | \\"mercurial\\" | \\"tfvc\\";

      /**
       * The URL of the originating repository.
       */
      vcs_url: string;

      /**
       * For a tfvc import, the name of the project that is being imported.
       */
      tfvc_project?: string;

      /**
       * If authentication is required, the password to provide to \`vcs_url\`.
       */
      vcs_password?: string;

      /**
       * If authentication is required, the username to provide to \`vcs_url\`.
       */
      vcs_username?: string;
    };
  },
  Import
> = {
  id: \\"migrations/start-import\\",
};

/**
 * Cancel an import
 * Stop an import for a repository.
 */
export const cancelImport: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"migrations/cancel-import\\",
};

/**
 * Update an import
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 *
 * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
 * have the status \`detection_found_multiple\` and the Import Progress response will include a \`project_choices\` array.
 * You can select the project to import by providing one of the objects in the \`project_choices\` array in the update request.
 */
export const updateImport: ApiHeroEndpoint<
  { owner: string; repo: string; body?: any | null },
  Import
> = {
  id: \\"migrations/update-import\\",
};

/**
 * Get a user migration status
 * Fetches a single user migration. The response includes the \`state\` of the migration, which can be one of the following values:
 *
 * *   \`pending\` - the migration hasn't started yet.
 * *   \`exporting\` - the migration is in progress.
 * *   \`exported\` - the migration finished successfully.
 * *   \`failed\` - the migration failed.
 *
 * Once the migration has been \`exported\` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
 */
export const getStatusForAuthenticatedUser: ApiHeroEndpoint<
  { migrationId: number; exclude?: Array<string> },
  Migration
> = {
  id: \\"migrations/get-status-for-authenticated-user\\",
};

/**
 * Update Git LFS preference
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/articles/versioning-large-files/).
 */
export const setLfsPreference: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Whether to store large files during the import. \`opt_in\` means large files will be stored using Git LFS. \`opt_out\` means large files will be removed during the import.
       */
      use_lfs: \\"opt_in\\" | \\"opt_out\\";
    };
  },
  Import
> = {
  id: \\"migrations/set-lfs-preference\\",
};

/**
 * Get commit authors
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username \`hubot\` into something like \`hubot <hubot@12341234-abab-fefe-8787-fedcba987654>\`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const getCommitAuthors: ApiHeroEndpoint<
  { owner: string; repo: string; since?: number },
  Array<PorterAuthor>
> = {
  id: \\"migrations/get-commit-authors\\",
};

/**
 * Get an organization migration status
 * Fetches the status of a migration.
 *
 * The \`state\` of a migration can be one of the following values:
 *
 * *   \`pending\`, which means the migration hasn't started yet.
 * *   \`exporting\`, which means the migration is in progress.
 * *   \`exported\`, which means the migration finished successfully.
 * *   \`failed\`, which means the migration failed.
 */
export const getStatusForOrg: ApiHeroEndpoint<
  { org: string; migrationId: number; exclude?: Array<\\"repositories\\"> },
  Migration
> = {
  id: \\"migrations/get-status-for-org\\",
};

/**
 * Download a user migration archive
 * Fetches the URL to download the migration archive as a \`tar.gz\` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\\\\_comments
 * *   issue\\\\_comments
 * *   issue\\\\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\\\\_branches
 * *   pull\\\\_request\\\\_reviews
 * *   pull\\\\_requests
 * *   releases
 * *   repositories
 * *   review\\\\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an \`attachments\` directory that includes all attachment files uploaded to GitHub.com and a \`repositories\` directory that contains the repository's Git data.
 */
export const getArchiveForAuthenticatedUser: ApiHeroEndpoint<{ migrationId: number }, void> = {
  id: \\"migrations/get-archive-for-authenticated-user\\",
};

/**
 * Delete a user migration archive
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const deleteArchiveForAuthenticatedUser: ApiHeroEndpoint<{ migrationId: number }, void> = {
  id: \\"migrations/delete-archive-for-authenticated-user\\",
};

/**
 * Get large files
 * List files larger than 100MB found during the import
 */
export const getLargeFiles: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<PorterLargeFile>
> = {
  id: \\"migrations/get-large-files\\",
};

/**
 * List repositories for a user migration
 * Lists all the repositories for this user migration.
 */
export const listReposForAuthenticatedUser: ApiHeroEndpoint<
  { migrationId: number; page?: number; perPage?: number },
  Array<MinimalRepository>
> = {
  id: \\"migrations/list-repos-for-authenticated-user\\",
};

/**
 * Download an organization migration archive
 * Fetches the URL to a migration archive.
 */
export const downloadArchiveForOrg: ApiHeroEndpoint<{ org: string; migrationId: number }, void> = {
  id: \\"migrations/download-archive-for-org\\",
};

/**
 * Delete an organization migration archive
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const deleteArchiveForOrg: ApiHeroEndpoint<{ org: string; migrationId: number }, void> = {
  id: \\"migrations/delete-archive-for-org\\",
};

/**
 * Map a commit author
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const mapCommitAuthor: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    authorId: number;
    body?: {
      /**
       * The new Git author name.
       */
      name?: string;

      /**
       * The new Git author email.
       */
      email?: string;
    };
  },
  PorterAuthor
> = {
  id: \\"migrations/map-commit-author\\",
};

/**
 * List repositories in an organization migration
 * List all the repositories for this organization migration.
 */
export const listReposForOrg: ApiHeroEndpoint<
  { org: string; migrationId: number; page?: number; perPage?: number },
  Array<MinimalRepository>
> = {
  id: \\"migrations/list-repos-for-org\\",
};

/**
 * Unlock a user repository
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of \`404 Not Found\` if the repository is not locked.
 */
export const unlockRepoForAuthenticatedUser: ApiHeroEndpoint<
  { repoName: string; migrationId: number },
  void
> = {
  id: \\"migrations/unlock-repo-for-authenticated-user\\",
};

/**
 * Unlock an organization repository
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const unlockRepoForOrg: ApiHeroEndpoint<
  { repoName: string; org: string; migrationId: number },
  void
> = {
  id: \\"migrations/unlock-repo-for-org\\",
};
",
  "oauth-authorizations.ts" => "import { ApplicationGrant, Authorization, ApiHeroEndpoint } from \\"./@types\\";

/** * @deprecated
 * List your authorizations
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const listAuthorizations: ApiHeroEndpoint<
  { page?: number; perPage?: number; clientId?: string },
  Array<Authorization>
> = {
  id: \\"oauth-authorizations/list-authorizations\\",
};

/** * @deprecated
 * Create a new authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 *
 * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use \`fingerprint\` to differentiate between them.
 *
 * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).
 *
 * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
 */
export const createAuthorization: ApiHeroEndpoint<
  {
    body?: {
      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: any[];

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;

      /**
       * The OAuth app client key for which to create the token.
       */
      client_id?: string;

      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       */
      fingerprint?: string;

      /**
       * The OAuth app client secret for which to create the token.
       */
      client_secret?: string;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/create-authorization\\",
};

/** * @deprecated
 * List your grants
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The \`scopes\` returned are the union of scopes authorized for the application. For example, if an application has one token with \`repo\` scope and another token with \`user\` scope, the grant will return \`[\\"repo\\", \\"user\\"]\`.
 */
export const listGrants: ApiHeroEndpoint<
  { page?: number; clientId?: string; perPage?: number },
  Array<ApplicationGrant>
> = {
  id: \\"oauth-authorizations/list-grants\\",
};

/** * @deprecated
 * Get a single grant
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const getGrant: ApiHeroEndpoint<{ grantId: number }, ApplicationGrant> = {
  id: \\"oauth-authorizations/get-grant\\",
};

/** * @deprecated
 * Delete a grant
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const deleteGrant: ApiHeroEndpoint<{ grantId: number }, void> = {
  id: \\"oauth-authorizations/delete-grant\\",
};

/** * @deprecated
 * Get a single authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const getAuthorization: ApiHeroEndpoint<{ authorizationId: number }, Authorization> = {
  id: \\"oauth-authorizations/get-authorization\\",
};

/** * @deprecated
 * Delete an authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const deleteAuthorization: ApiHeroEndpoint<{ authorizationId: number }, void> = {
  id: \\"oauth-authorizations/delete-authorization\\",
};

/** * @deprecated
 * Update an existing authorization
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 *
 * You can only send one of these scope keys at a time.
 */
export const updateAuthorization: ApiHeroEndpoint<
  {
    authorizationId: number;
    body?: {
      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: any[];

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;

      /**
       * A list of scopes to add to this authorization.
       */
      add_scopes?: Array<string>;

      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       */
      fingerprint?: string;

      /**
       * A list of scopes to remove from this authorization.
       */
      remove_scopes?: Array<string>;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/update-authorization\\",
};

/** * @deprecated
 * Get-or-create an authorization for a specific app
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 *
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const getOrCreateAuthorizationForApp: ApiHeroEndpoint<
  {
    clientId: string;
    body: {
      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: any[];

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;

      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       */
      fingerprint?: string;

      /**
       * The OAuth app client secret for which to create the token.
       */
      client_secret: string;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/get-or-create-authorization-for-app\\",
};

/** * @deprecated
 * Get-or-create an authorization for a specific app and fingerprint
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. \`fingerprint\` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \\"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\\"
 */
export const getOrCreateAuthorizationForAppAndFingerprint: ApiHeroEndpoint<
  {
    clientId: string;
    fingerprint: string;
    body: {
      /**
       * A note to remind you what the OAuth token is for.
       */
      note?: string;

      /**
       * A list of scopes that this authorization is in.
       */
      scopes?: any[];

      /**
       * A URL to remind you what app the OAuth token is for.
       */
      note_url?: string;

      /**
       * The OAuth app client secret for which to create the token.
       */
      client_secret: string;
    };
  },
  Authorization
> = {
  id: \\"oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\\",
};
",
  "oidc.ts" => "import { EmptyObject, OidcCustomSub, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get the customization template for an OIDC subject claim for an organization
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the \`read:org\` scope to use this endpoint.
 * GitHub Apps must have the \`organization_administration:write\` permission to use this endpoint.
 */
export const getOidcCustomSubTemplateForOrg: ApiHeroEndpoint<{ org: string }, OidcCustomSub> = {
  id: \\"oidc/get-oidc-custom-sub-template-for-org\\",
};

/**
 * Set the customization template for an OIDC subject claim for an organization
 * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the \`write:org\` scope to use this endpoint.
 * GitHub Apps must have the \`admin:org\` permission to use this endpoint.
 */
export const updateOidcCustomSubTemplateForOrg: ApiHeroEndpoint<
  { org: string; body: OidcCustomSub },
  EmptyObject
> = {
  id: \\"oidc/update-oidc-custom-sub-template-for-org\\",
};
",
  "orgs.ts" => "import {
  AuditLogEvent,
  CredentialAuthorization,
  HookDelivery,
  HookDeliveryItem,
  Installation,
  OrganizationCustomRepositoryRole,
  OrganizationFull,
  OrganizationInvitation,
  OrganizationSimple,
  OrgHook,
  OrgMembership,
  SimpleUser,
  Team,
  TeamSimple,
  WebhookConfig,
  WebhookConfigContentType,
  WebhookConfigInsecureSsl,
  WebhookConfigSecret,
  WebhookConfigUrl,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List organizations for the authenticated user
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with \`read:org\` scope, you can publicize your organization membership with \`user\` scope, etc.). Therefore, this API requires at least \`user\` or \`read:org\` scope. OAuth requests with insufficient scope receive a \`403 Forbidden\` response.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<OrganizationSimple>
> = {
  id: \\"orgs/list-for-authenticated-user\\",
};

/**
 * Get an organization
 * To see many of the organization response values, you need to be an authenticated organization owner with the \`admin:org\` scope. When the value of \`two_factor_requirement_enabled\` is \`true\`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the \`Organization plan\` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \\"[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\\" for details. For an example response, see 'Response with GitHub plan information' below.\\"
 */
export const getOrgs: ApiHeroEndpoint<{ org: string }, OrganizationFull> = {
  id: \\"orgs/get\\",
};

/**
 * Update an organization
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue \`members_allowed_repository_creation_type\` in favor of more granular permissions. The new input parameters are \`members_can_create_public_repositories\`, \`members_can_create_private_repositories\` for all organizations and \`members_can_create_internal_repositories\` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the \`admin:org\` scope to update the organization's profile and member privileges.
 */
export const update: ApiHeroEndpoint<
  {
    org: string;
    body?: {
      blog?: string;

      /**
       * The shorthand name of the company.
       */
      name?: string;

      /**
       * The publicly visible email address.
       */
      email?: string;

      /**
       * The company name.
       */
      company?: string;

      /**
       * The location.
       */
      location?: string;

      /**
       * The description of the company.
       */
      description?: string;

      /**
       * Billing email address. This address is not publicized.
       */
      billing_email?: string;

      /**
       * The Twitter username of the company.
       */
      twitter_username?: string;

      /**
       * Whether repositories that belong to the organization can use repository projects.
       */
      has_repository_projects?: boolean;

      /**
       * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
       */
      members_can_create_pages?: boolean;

      /**
       * Whether an organization can use organization projects.
       */
      has_organization_projects?: boolean;

      /**
       * Default permission level members have for organization repositories.
       */
      default_repository_permission?: \\"read\\" | \\"write\\" | \\"admin\\" | \\"none\\";

      /**
       * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
       */
      members_can_create_public_pages?: boolean;

      /**
       * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See \`members_allowed_repository_creation_type\` in this table for details.
       */
      members_can_create_repositories?: boolean;

      /**
       * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
       */
      members_can_create_private_pages?: boolean;

      /**
       * Whether organization members can fork private organization repositories.
       */
      members_can_fork_private_repositories?: boolean;

      /**
       * Whether organization members can create public repositories, which are visible to anyone. For more information, see \\"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\\" in the GitHub Help documentation.
       */
      members_can_create_public_repositories?: boolean;

      /**
       * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \\"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\\" in the GitHub Help documentation.
       */
      members_can_create_private_repositories?: boolean;

      /**
       * Specifies which types of repositories non-admin organization members can create. \`private\` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
       **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in \`members_can_create_repositories\`. See the parameter deprecation notice in the operation description for details.
       */
      members_allowed_repository_creation_type?: \\"all\\" | \\"private\\" | \\"none\\";

      /**
       * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \\"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\\" in the GitHub Help documentation.
       */
      members_can_create_internal_repositories?: boolean;
    };
  },
  OrganizationFull
> = {
  id: \\"orgs/update\\",
};

/**
 * List organizations
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const list: ApiHeroEndpoint<
  { perPage?: number; since?: number },
  Array<OrganizationSimple>
> = {
  id: \\"orgs/list\\",
};

/**
 * List organization webhooks
 */
export const listWebhooks: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  Array<OrgHook>
> = {
  id: \\"orgs/list-webhooks\\",
};

/**
 * Create an organization webhook
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const createWebhook: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * Must be passed as \\"web\\".
       */
      name: string;

      /**
       * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
       */
      active?: boolean;

      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
       */
      config: {
        url: WebhookConfigUrl;

        secret?: WebhookConfigSecret;

        password?: string;

        username?: string;

        content_type?: WebhookConfigContentType;

        insecure_ssl?: WebhookConfigInsecureSsl;
      };

      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       */
      events?: Array<string>;
    };
  },
  OrgHook
> = {
  id: \\"orgs/create-webhook\\",
};

/**
 * List users blocked by an organization
 * List the users blocked by an organization.
 */
export const listBlockedUsers: ApiHeroEndpoint<{ org: string }, Array<SimpleUser>> = {
  id: \\"orgs/list-blocked-users\\",
};

/**
 * List organization members
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const listMembers: ApiHeroEndpoint<
  {
    org: string;
    page?: number;
    filter?: \\"2fa_disabled\\" | \\"all\\";
    perPage?: number;
    role?: \\"all\\" | \\"admin\\" | \\"member\\";
  },
  Array<SimpleUser>
> = {
  id: \\"orgs/list-members\\",
};

/**
 * Get the audit log for an organization
 * Gets the audit log for an organization. For more information, see \\"[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\\"
 *
 * This endpoint is available for organizations on GitHub Enterprise Cloud. To use this endpoint, you must be an organization owner, and you must use an access token with the \`admin:org\` scope. GitHub Apps must have the \`organization_administration\` read permission to use this endpoint.
 *
 * By default, the response includes up to 30 events from the past three months. Use the \`phrase\` parameter to filter results and retrieve older events. For example, use the \`phrase\` parameter with the \`created\` qualifier to filter events based on when the events occurred. For more information, see \\"[Reviewing the audit log for your organization](https://docs.github.com/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).\\"
 *
 * Use pagination to retrieve fewer or more than 30 events. For more information, see \\"[Resources in the REST API](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\\"
 */
export const getAuditLog: ApiHeroEndpoint<
  {
    org: string;
    perPage?: number;
    order?: \\"desc\\" | \\"asc\\";
    after?: string;
    before?: string;
    include?: \\"web\\" | \\"git\\" | \\"all\\";
    phrase?: string;
  },
  Array<AuditLogEvent>
> = {
  id: \\"orgs/get-audit-log\\",
};

/**
 * List organization memberships for the authenticated user
 */
export const listMembershipsForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number; state?: \\"active\\" | \\"pending\\" },
  Array<OrgMembership>
> = {
  id: \\"orgs/list-memberships-for-authenticated-user\\",
};

/**
 * List organizations for a user
 * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const listForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<OrganizationSimple>
> = {
  id: \\"orgs/list-for-user\\",
};

/**
 * List pending organization invitations
 * The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
 */
export const listPendingInvitations: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"orgs/list-pending-invitations\\",
};

/**
 * Create an organization invitation
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createInvitation: ApiHeroEndpoint<
  {
    org: string;
    body?: {
      /** 
* The role for the new member. 
\\\\* \`admin\` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
\\\\* \`direct_member\` - Non-owner organization members with ability to see other members and join teams by invitation.  
\\\\* \`billing_manager\` - Non-owner organization members with ability to manage the billing settings of your organization.
*/
      role?: \\"admin\\" | \\"direct_member\\" | \\"billing_manager\\";

      /**
       * **Required unless you provide \`invitee_id\`**. Email address of the person you are inviting, which can be an existing GitHub user.
       */
      email?: string;

      /**
       * Specify IDs for the teams you want to invite new members to.
       */
      team_ids?: Array<number>;

      /**
       * **Required unless you provide \`email\`**. GitHub user ID for the person you are inviting.
       */
      invitee_id?: number;
    };
  },
  OrganizationInvitation
> = {
  id: \\"orgs/create-invitation\\",
};

/**
 * List app installations for an organization
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with \`admin:read\` scope to use this endpoint.
 */
export const listAppInstallations: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  {
    total_count: number;

    installations: Array<Installation>;
  }
> = {
  id: \\"orgs/list-app-installations\\",
};

/**
 * List public organization members
 * Members of an organization can choose to have their membership publicized or not.
 */
export const listPublicMembers: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  Array<SimpleUser>
> = {
  id: \\"orgs/list-public-members\\",
};

/**
 * Get an organization webhook
 * Returns a webhook configured in an organization. To get only the webhook \`config\` properties, see \\"[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\\"
 */
export const getWebhook: ApiHeroEndpoint<{ org: string; hookId: number }, OrgHook> = {
  id: \\"orgs/get-webhook\\",
};

/**
 * Delete an organization webhook
 */
export const deleteWebhook: ApiHeroEndpoint<{ org: string; hookId: number }, void> = {
  id: \\"orgs/delete-webhook\\",
};

/**
 * Update an organization webhook
 * Updates a webhook configured in an organization. When you update a webhook, the \`secret\` will be overwritten. If you previously had a \`secret\` set, you must provide the same \`secret\` or set a new \`secret\` or the secret will be removed. If you are only updating individual webhook \`config\` properties, use \\"[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\\"
 */
export const updateWebhook: ApiHeroEndpoint<
  {
    org: string;
    hookId: number;
    body?: {
      name?: string;

      /**
       * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
       */
      active?: boolean;

      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
       */
      config?: {
        url: WebhookConfigUrl;

        secret?: WebhookConfigSecret;

        content_type?: WebhookConfigContentType;

        insecure_ssl?: WebhookConfigInsecureSsl;
      };

      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       */
      events?: Array<string>;
    };
  },
  OrgHook
> = {
  id: \\"orgs/update-webhook\\",
};

/**
 * Get an organization membership for the authenticated user
 */
export const getMembershipForAuthenticatedUser: ApiHeroEndpoint<{ org: string }, OrgMembership> = {
  id: \\"orgs/get-membership-for-authenticated-user\\",
};

/**
 * Update an organization membership for the authenticated user
 */
export const updateMembershipForAuthenticatedUser: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The state that the membership should be in. Only \`\\"active\\"\` will be accepted.
       */
      state: \\"active\\";
    };
  },
  OrgMembership
> = {
  id: \\"orgs/update-membership-for-authenticated-user\\",
};

/**
 * Check if a user is blocked by an organization
 */
export const checkBlockedUser: ApiHeroEndpoint<{ username: string; org: string }, void> = {
  id: \\"orgs/check-blocked-user\\",
};

/**
 * Block a user from an organization
 */
export const blockUser: ApiHeroEndpoint<{ username: string; org: string }, void> = {
  id: \\"orgs/block-user\\",
};

/**
 * Unblock a user from an organization
 */
export const unblockUser: ApiHeroEndpoint<{ username: string; org: string }, void> = {
  id: \\"orgs/unblock-user\\",
};

/**
 * List security manager teams
 * Lists teams that are security managers for an organization. For more information, see \\"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\\"
 *
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the \`read:org\` scope.
 *
 * GitHub Apps must have the \`administration\` organization read permission to use this endpoint.
 */
export const listSecurityManagerTeams: ApiHeroEndpoint<{ org: string }, Array<TeamSimple>> = {
  id: \\"orgs/list-security-manager-teams\\",
};

/**
 * List failed organization invitations
 * The return hash contains \`failed_at\` and \`failed_reason\` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const listFailedInvitations: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"orgs/list-failed-invitations\\",
};

/**
 * Check organization membership for a user
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const checkMembershipForUser: ApiHeroEndpoint<{ username: string; org: string }, void> = {
  id: \\"orgs/check-membership-for-user\\",
};

/**
 * Remove an organization member
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const removeMember: ApiHeroEndpoint<{ username: string; org: string }, void> = {
  id: \\"orgs/remove-member\\",
};

/**
 * Ping an organization webhook
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const pingWebhook: ApiHeroEndpoint<{ org: string; hookId: number }, void> = {
  id: \\"orgs/ping-webhook\\",
};

/**
 * List outside collaborators for an organization
 * List all users who are outside collaborators of an organization.
 */
export const listOutsideCollaborators: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number; filter?: \\"2fa_disabled\\" | \\"all\\" },
  Array<SimpleUser>
> = {
  id: \\"orgs/list-outside-collaborators\\",
};

/**
 * Get a webhook configuration for an organization
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the \`active\` state and \`events\`, use \\"[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\\"
 *
 * Access tokens must have the \`admin:org_hook\` scope, and GitHub Apps must have the \`organization_hooks:read\` permission.
 */
export const getWebhookConfigForOrg: ApiHeroEndpoint<
  { org: string; hookId: number },
  WebhookConfig
> = {
  id: \\"orgs/get-webhook-config-for-org\\",
};

/**
 * Update a webhook configuration for an organization
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the \`active\` state and \`events\`, use \\"[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\\"
 *
 * Access tokens must have the \`admin:org_hook\` scope, and GitHub Apps must have the \`organization_hooks:write\` permission.
 */
export const updateWebhookConfigForOrg: ApiHeroEndpoint<
  {
    org: string;
    hookId: number;
    body?: {
      url?: WebhookConfigUrl;

      secret?: WebhookConfigSecret;

      content_type?: WebhookConfigContentType;

      insecure_ssl?: WebhookConfigInsecureSsl;
    };
  },
  WebhookConfig
> = {
  id: \\"orgs/update-webhook-config-for-org\\",
};

/**
 * Get organization membership for a user
 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The \`state\` parameter in the response can be used to identify the user's membership status.
 */
export const getMembershipForUser: ApiHeroEndpoint<
  { username: string; org: string },
  OrgMembership
> = {
  id: \\"orgs/get-membership-for-user\\",
};

/**
 * Set organization membership for a user
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be \`pending\` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the \`role\` parameter. If the authenticated user changes a member's role to \`admin\`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to \`member\`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const setMembershipForUser: ApiHeroEndpoint<
  {
    username: string;
    org: string;
    body?: {
      /** 
* The role to give the user in the organization. Can be one of:  
\\\\* \`admin\` - The user will become an owner of the organization.  
\\\\* \`member\` - The user will become a non-owner member of the organization.
*/
      role?: \\"admin\\" | \\"member\\";
    };
  },
  OrgMembership
> = {
  id: \\"orgs/set-membership-for-user\\",
};

/**
 * Remove organization membership for a user
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const removeMembershipForUser: ApiHeroEndpoint<{ username: string; org: string }, void> = {
  id: \\"orgs/remove-membership-for-user\\",
};

/**
 * List SAML SSO authorizations for an organization
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the \`read:org\` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://docs.github.com/en/articles/about-authentication-with-saml-single-sign-on).
 */
export const listSamlSsoAuthorizations: ApiHeroEndpoint<
  { org: string; perPage?: number; login?: string; page?: number },
  Array<CredentialAuthorization>
> = {
  id: \\"orgs/list-saml-sso-authorizations\\",
};

/**
 * Check public organization membership for a user
 */
export const checkPublicMembershipForUser: ApiHeroEndpoint<
  { username: string; org: string },
  void
> = {
  id: \\"orgs/check-public-membership-for-user\\",
};

/**
 * Set public organization membership for the authenticated user
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const setPublicMembershipForAuthenticatedUser: ApiHeroEndpoint<
  { username: string; org: string },
  void
> = {
  id: \\"orgs/set-public-membership-for-authenticated-user\\",
};

/**
 * Remove public organization membership for the authenticated user
 */
export const removePublicMembershipForAuthenticatedUser: ApiHeroEndpoint<
  { username: string; org: string },
  void
> = {
  id: \\"orgs/remove-public-membership-for-authenticated-user\\",
};

/**
 * List deliveries for an organization webhook
 * Returns a list of webhook deliveries for a webhook configured in an organization.
 */
export const listWebhookDeliveries: ApiHeroEndpoint<
  { org: string; hookId: number; perPage?: number; cursor?: string },
  Array<HookDeliveryItem>
> = {
  id: \\"orgs/list-webhook-deliveries\\",
};

/**
 * Cancel an organization invitation
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const cancelInvitation: ApiHeroEndpoint<{ org: string; invitationId: number }, void> = {
  id: \\"orgs/cancel-invitation\\",
};

/**
 * Convert an organization member to outside collaborator
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \\"[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\\". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \\"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\\"
 */
export const convertMemberToOutsideCollaborator: ApiHeroEndpoint<
  {
    username: string;
    org: string;
    body?: {
      /**
       * When set to \`true\`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
       */
      async?: boolean;
    };
  },
  {}
> = {
  id: \\"orgs/convert-member-to-outside-collaborator\\",
};

/**
 * Remove outside collaborator from an organization
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const removeOutsideCollaborator: ApiHeroEndpoint<{ username: string; org: string }, void> = {
  id: \\"orgs/remove-outside-collaborator\\",
};

/**
 * List custom repository roles in an organization
 * List the custom repository roles available in this organization. In order to see custom
 * repository roles in an organization, the authenticated user must be an organization owner.
 *
 * For more information on custom repository roles, see \\"[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)\\".
 */
export const listCustomRoles: ApiHeroEndpoint<
  { organizationId: string },
  {
    /**
     * The number of custom roles in this organization
     */
    total_count?: number;

    custom_roles?: Array<OrganizationCustomRepositoryRole>;
  }
> = {
  id: \\"orgs/list-custom-roles\\",
};

/**
 * List organization invitation teams
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const listInvitationTeams: ApiHeroEndpoint<
  { org: string; invitationId: number; page?: number; perPage?: number },
  Array<Team>
> = {
  id: \\"orgs/list-invitation-teams\\",
};

/**
 * Add a security manager team
 * Adds a team as a security manager for an organization. For more information, see \\"[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization.\\"
 *
 * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the \`write:org\` scope.
 *
 * GitHub Apps must have the \`administration\` organization read-write permission to use this endpoint.
 */
export const addSecurityManagerTeam: ApiHeroEndpoint<{ teamSlug: string; org: string }, void> = {
  id: \\"orgs/add-security-manager-team\\",
};

/**
 * Remove a security manager team
 * Removes the security manager role from a team for an organization. For more information, see \\"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization.\\"
 *
 * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the \`admin:org\` scope.
 *
 * GitHub Apps must have the \`administration\` organization read-write permission to use this endpoint.
 */
export const removeSecurityManagerTeam: ApiHeroEndpoint<{ teamSlug: string; org: string }, void> = {
  id: \\"orgs/remove-security-manager-team\\",
};

/**
 * Get a webhook delivery for an organization webhook
 * Returns a delivery for a webhook configured in an organization.
 */
export const getWebhookDelivery: ApiHeroEndpoint<
  { org: string; deliveryId: number; hookId: number },
  HookDelivery
> = {
  id: \\"orgs/get-webhook-delivery\\",
};

/**
 * Remove a SAML SSO authorization for an organization
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the \`admin:org\` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
 */
export const removeSamlSsoAuthorization: ApiHeroEndpoint<
  { org: string; credentialId: number },
  void
> = {
  id: \\"orgs/remove-saml-sso-authorization\\",
};

/**
 * Redeliver a delivery for an organization webhook
 * Redeliver a delivery for a webhook configured in an organization.
 */
export const redeliverWebhookDelivery: ApiHeroEndpoint<
  { org: string; deliveryId: number; hookId: number },
  {}
> = {
  id: \\"orgs/redeliver-webhook-delivery\\",
};
",
  "packages.ts" => "import { Package, PackageVersion, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List packages for the authenticated user's namespace
 * Lists packages owned by the authenticated user within the user's namespace.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const listPackagesForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    visibility?: \\"public\\" | \\"private\\" | \\"internal\\";
  },
  Array<Package>
> = {
  id: \\"packages/list-packages-for-authenticated-user\\",
};

/**
 * List packages for an organization
 * Lists all packages in an organization readable by the user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const listPackagesForOrganization: ApiHeroEndpoint<
  {
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    org: string;
    visibility?: \\"public\\" | \\"private\\" | \\"internal\\";
  },
  Array<Package>
> = {
  id: \\"packages/list-packages-for-organization\\",
};

/**
 * List packages for a user
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const listPackagesForUser: ApiHeroEndpoint<
  {
    username: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    visibility?: \\"public\\" | \\"private\\" | \\"internal\\";
  },
  Array<Package>
> = {
  id: \\"packages/list-packages-for-user\\",
};

/**
 * Get a package for the authenticated user
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  },
  Package
> = {
  id: \\"packages/get-package-for-authenticated-user\\",
};

/**
 * Delete a package for the authenticated user
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const deletePackageForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  },
  void
> = {
  id: \\"packages/delete-package-for-authenticated-user\\",
};

/**
 * Get a package for an organization
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageForOrganization: ApiHeroEndpoint<
  {
    org: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  },
  Package
> = {
  id: \\"packages/get-package-for-organization\\",
};

/**
 * Delete a package for an organization
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageForOrg: ApiHeroEndpoint<
  {
    org: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  },
  void
> = {
  id: \\"packages/delete-package-for-org\\",
};

/**
 * Restore a package for the authenticated user
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const restorePackageForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    token?: string;
  },
  void
> = {
  id: \\"packages/restore-package-for-authenticated-user\\",
};

/**
 * Get all package versions for a package owned by the authenticated user
 * Returns all package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getAllPackageVersionsForPackageOwnedByAuthenticatedUser: ApiHeroEndpoint<
  {
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    page?: number;
    perPage?: number;
    state?: \\"active\\" | \\"deleted\\";
  },
  Array<PackageVersion>
> = {
  id: \\"packages/get-all-package-versions-for-package-owned-by-authenticated-user\\",
};

/**
 * Get a package for a user
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageForUser: ApiHeroEndpoint<
  {
    username: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  },
  Package
> = {
  id: \\"packages/get-package-for-user\\",
};

/**
 * Delete a package for a user
 * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageForUser: ApiHeroEndpoint<
  {
    username: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  },
  void
> = {
  id: \\"packages/delete-package-for-user\\",
};

/**
 * Restore a package for an organization
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageForOrg: ApiHeroEndpoint<
  {
    org: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    token?: string;
  },
  void
> = {
  id: \\"packages/restore-package-for-org\\",
};

/**
 * Get all package versions for a package owned by an organization
 * Returns all package versions for a package owned by an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getAllPackageVersionsForPackageOwnedByOrg: ApiHeroEndpoint<
  {
    org: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    page?: number;
    perPage?: number;
    state?: \\"active\\" | \\"deleted\\";
  },
  Array<PackageVersion>
> = {
  id: \\"packages/get-all-package-versions-for-package-owned-by-org\\",
};

/**
 * Restore a package for a user
 * Restores an entire package for a user.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageForUser: ApiHeroEndpoint<
  {
    username: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    token?: string;
  },
  void
> = {
  id: \\"packages/restore-package-for-user\\",
};

/**
 * Get all package versions for a package owned by a user
 * Returns all package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getAllPackageVersionsForPackageOwnedByUser: ApiHeroEndpoint<
  {
    username: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
  },
  Array<PackageVersion>
> = {
  id: \\"packages/get-all-package-versions-for-package-owned-by-user\\",
};

/**
 * Get a package version for the authenticated user
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageVersionForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  PackageVersion
> = {
  id: \\"packages/get-package-version-for-authenticated-user\\",
};

/**
 * Delete a package version for the authenticated user
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const deletePackageVersionForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/delete-package-version-for-authenticated-user\\",
};

/**
 * Get a package version for an organization
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageVersionForOrganization: ApiHeroEndpoint<
  {
    org: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  PackageVersion
> = {
  id: \\"packages/get-package-version-for-organization\\",
};

/**
 * Delete package version for an organization
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageVersionForOrg: ApiHeroEndpoint<
  {
    org: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/delete-package-version-for-org\\",
};

/**
 * Restore a package version for the authenticated user
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const restorePackageVersionForAuthenticatedUser: ApiHeroEndpoint<
  {
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/restore-package-version-for-authenticated-user\\",
};

/**
 * Get a package version for a user
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the \`packages:read\` scope.
 * If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 */
export const getPackageVersionForUser: ApiHeroEndpoint<
  {
    username: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  PackageVersion
> = {
  id: \\"packages/get-package-version-for-user\\",
};

/**
 * Delete package version for a user
 * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:delete\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container you want to delete.
 */
export const deletePackageVersionForUser: ApiHeroEndpoint<
  {
    username: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/delete-package-version-for-user\\",
};

/**
 * Restore package version for an organization
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageVersionForOrg: ApiHeroEndpoint<
  {
    org: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/restore-package-version-for-org\\",
};

/**
 * Restore package version for a user
 * Restores a specific package version for a user.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 * - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the \`packages:read\` and \`packages:write\` scopes. In addition:
 * - If \`package_type\` is not \`container\`, your token must also include the \`repo\` scope.
 * - If \`package_type\` is \`container\`, you must also have admin permissions to the container that you want to restore.
 */
export const restorePackageVersionForUser: ApiHeroEndpoint<
  {
    username: string;
    packageName: string;
    packageType: \\"npm\\" | \\"maven\\" | \\"rubygems\\" | \\"docker\\" | \\"nuget\\" | \\"container\\";
    packageVersionId: number;
  },
  void
> = {
  id: \\"packages/restore-package-version-for-user\\",
};
",
  "projects.ts" => "import {
  Project,
  ProjectCard,
  ProjectCollaboratorPermission,
  ProjectColumn,
  SimpleUser,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Create a user project
 * Creates a user project board. Returns a \`410 Gone\` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const createForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * Body of the project
       */
      body?: string;

      /**
       * Name of the project
       */
      name: string;
    };
  },
  Project
> = {
  id: \\"projects/create-for-authenticated-user\\",
};

/**
 * List organization projects
 * Lists the projects in an organization. Returns a \`404 Not Found\` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const listForOrg: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number; state?: \\"open\\" | \\"closed\\" | \\"all\\" },
  Array<Project>
> = {
  id: \\"projects/list-for-org\\",
};

/**
 * Create an organization project
 * Creates an organization project board. Returns a \`410 Gone\` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const createForOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The description of the project.
       */
      body?: string;

      /**
       * The name of the project.
       */
      name: string;
    };
  },
  Project
> = {
  id: \\"projects/create-for-org\\",
};

/**
 * Get a project
 * Gets a project by its \`id\`. Returns a \`404 Not Found\` status if projects are disabled. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const getProjects: ApiHeroEndpoint<{ projectId: number }, Project> = {
  id: \\"projects/get\\",
};

/**
 * Delete a project
 * Deletes a project board. Returns a \`404 Not Found\` status if projects are disabled.
 */
export const deleteProjects: ApiHeroEndpoint<{ projectId: number }, void> = {
  id: \\"projects/delete\\",
};

/**
 * Update a project
 * Updates a project board's information. Returns a \`404 Not Found\` status if projects are disabled. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const update: ApiHeroEndpoint<
  {
    projectId: number;
    body?: {
      /**
       * Body of the project
       */
      body?: string;

      /**
       * Name of the project
       */
      name?: string;

      /**
       * State of the project; either 'open' or 'closed'
       */
      state?: string;

      /**
       * Whether or not this project can be seen by everyone.
       */
      private?: boolean;

      /**
       * The baseline permission that all organization members have on this project
       */
      organization_permission?: \\"read\\" | \\"write\\" | \\"admin\\" | \\"none\\";
    };
  },
  Project
> = {
  id: \\"projects/update\\",
};

/**
 * List user projects
 */
export const listForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number; state?: \\"open\\" | \\"closed\\" | \\"all\\" },
  Array<Project>
> = {
  id: \\"projects/list-for-user\\",
};

/**
 * Get a project column
 */
export const getColumn: ApiHeroEndpoint<{ columnId: number }, ProjectColumn> = {
  id: \\"projects/get-column\\",
};

/**
 * Delete a project column
 */
export const deleteColumn: ApiHeroEndpoint<{ columnId: number }, void> = {
  id: \\"projects/delete-column\\",
};

/**
 * Update an existing project column
 */
export const updateColumn: ApiHeroEndpoint<
  {
    columnId: number;
    body: {
      /**
       * Name of the project column
       */
      name: string;
    };
  },
  ProjectColumn
> = {
  id: \\"projects/update-column\\",
};

/**
 * List project columns
 */
export const listColumns: ApiHeroEndpoint<
  { projectId: number; page?: number; perPage?: number },
  Array<ProjectColumn>
> = {
  id: \\"projects/list-columns\\",
};

/**
 * Create a project column
 */
export const createColumn: ApiHeroEndpoint<
  {
    projectId: number;
    body: {
      /**
       * Name of the project column
       */
      name: string;
    };
  },
  ProjectColumn
> = {
  id: \\"projects/create-column\\",
};

/**
 * List repository projects
 * Lists the projects in a repository. Returns a \`404 Not Found\` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const listForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
  },
  Array<Project>
> = {
  id: \\"projects/list-for-repo\\",
};

/**
 * Create a repository project
 * Creates a repository project board. Returns a \`410 Gone\` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
 */
export const createForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The description of the project.
       */
      body?: string;

      /**
       * The name of the project.
       */
      name: string;
    };
  },
  Project
> = {
  id: \\"projects/create-for-repo\\",
};

/**
 * Get a project card
 */
export const getCard: ApiHeroEndpoint<{ cardId: number }, ProjectCard> = {
  id: \\"projects/get-card\\",
};

/**
 * Delete a project card
 */
export const deleteCard: ApiHeroEndpoint<{ cardId: number }, void> = {
  id: \\"projects/delete-card\\",
};

/**
 * Update an existing project card
 */
export const updateCard: ApiHeroEndpoint<
  {
    cardId: number;
    body?: {
      /**
       * The project card's note
       */
      note?: string;

      /**
       * Whether or not the card is archived
       */
      archived?: boolean;
    };
  },
  ProjectCard
> = {
  id: \\"projects/update-card\\",
};

/**
 * List project cards
 */
export const listCards: ApiHeroEndpoint<
  {
    columnId: number;
    page?: number;
    perPage?: number;
    archivedState?: \\"all\\" | \\"archived\\" | \\"not_archived\\";
  },
  Array<ProjectCard>
> = {
  id: \\"projects/list-cards\\",
};

/**
 * Create a project card
 */
export const createCard: ApiHeroEndpoint<
  {
    columnId: number;
    body:
      | {
          /**
           * The project card's note
           */
          note: string;
        }
      | {
          /**
           * The unique identifier of the content associated with the card
           */
          content_id: number;

          /**
           * The piece of content associated with the card
           */
          content_type: string;
        };
  },
  ProjectCard
> = {
  id: \\"projects/create-card\\",
};

/**
 * Move a project column
 */
export const moveColumn: ApiHeroEndpoint<
  {
    columnId: number;
    body: {
      /**
       * The position of the column in a project. Can be one of: \`first\`, \`last\`, or \`after:<column_id>\` to place after the specified column.
       */
      position: string;
    };
  },
  {}
> = {
  id: \\"projects/move-column\\",
};

/**
 * List project collaborators
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project \`admin\` to list collaborators.
 */
export const listCollaborators: ApiHeroEndpoint<
  {
    projectId: number;
    page?: number;
    perPage?: number;
    affiliation?: \\"outside\\" | \\"direct\\" | \\"all\\";
  },
  Array<SimpleUser>
> = {
  id: \\"projects/list-collaborators\\",
};

/**
 * Move a project card
 */
export const moveCard: ApiHeroEndpoint<
  {
    cardId: number;
    body: {
      /**
       * The position of the card in a column. Can be one of: \`top\`, \`bottom\`, or \`after:<card_id>\` to place after the specified card.
       */
      position: string;

      /**
       * The unique identifier of the column the card should be moved to
       */
      column_id?: number;
    };
  },
  {}
> = {
  id: \\"projects/move-card\\",
};

/**
 * Add project collaborator
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project \`admin\` to add a collaborator.
 */
export const addCollaborator: ApiHeroEndpoint<
  { username: string; projectId: number; body?: any | null },
  void
> = {
  id: \\"projects/add-collaborator\\",
};

/**
 * Remove user as a collaborator
 * Removes a collaborator from an organization project. You must be an organization owner or a project \`admin\` to remove a collaborator.
 */
export const removeCollaborator: ApiHeroEndpoint<{ username: string; projectId: number }, void> = {
  id: \\"projects/remove-collaborator\\",
};

/**
 * Get project permission for a user
 * Returns the collaborator's permission level for an organization project. Possible values for the \`permission\` key: \`admin\`, \`write\`, \`read\`, \`none\`. You must be an organization owner or a project \`admin\` to review a user's permission level.
 */
export const getPermissionForUser: ApiHeroEndpoint<
  { username: string; projectId: number },
  ProjectCollaboratorPermission
> = {
  id: \\"projects/get-permission-for-user\\",
};
",
  "pulls.ts" => "import {
  Commit,
  DiffEntry,
  PullRequest,
  PullRequestMergeResult,
  PullRequestReview,
  PullRequestReviewComment,
  PullRequestReviewRequest,
  PullRequestSimple,
  ReviewComment,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List pull requests
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const list: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    head?: string;
    direction?: \\"asc\\" | \\"desc\\";
    sort?: \\"created\\" | \\"updated\\" | \\"popularity\\" | \\"long-running\\";
    state?: \\"open\\" | \\"closed\\" | \\"all\\";
    base?: string;
  },
  Array<PullRequestSimple>
> = {
  id: \\"pulls/list\\",
};

/**
 * Create a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * You can create a new pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\\" for details.
 */
export const create: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
       */
      base: string;

      /**
       * The contents of the pull request.
       */
      body?: string;

      /**
       * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace \`head\` with a user like this: \`username:branch\`.
       */
      head: string;

      /**
       * Indicates whether the pull request is a draft. See \\"[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)\\" in the GitHub Help documentation to learn more.
       */
      draft?: boolean;

      issue?: number;

      /**
       * The title of the new pull request.
       */
      title?: string;

      /**
       * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
       */
      maintainer_can_modify?: boolean;
    };
  },
  PullRequest
> = {
  id: \\"pulls/create\\",
};

/**
 * List review comments in a repository
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const listReviewCommentsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    since?: string;
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\" | \\"created_at\\";
    direction?: \\"asc\\" | \\"desc\\";
  },
  Array<PullRequestReviewComment>
> = {
  id: \\"pulls/list-review-comments-for-repo\\",
};

/**
 * Get a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the \`mergeable\` key. For more information, see \\"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\\".
 *
 * The value of the \`mergeable\` attribute can be \`true\`, \`false\`, or \`null\`. If the value is \`null\`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-\`null\` value for the \`mergeable\` attribute in the response. If \`mergeable\` is \`true\`, then \`merge_commit_sha\` will be the SHA of the _test_ merge commit.
 *
 * The value of the \`merge_commit_sha\` attribute changes depending on the state of the pull request. Before merging a pull request, the \`merge_commit_sha\` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the \`merge_commit_sha\` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), \`merge_commit_sha\` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), \`merge_commit_sha\` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), \`merge_commit_sha\` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const getPulls: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number },
  PullRequest
> = {
  id: \\"pulls/get\\",
};

/**
 * Update a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const update: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
       */
      base?: string;

      /**
       * The contents of the pull request.
       */
      body?: string;

      /**
       * State of this Pull Request. Either \`open\` or \`closed\`.
       */
      state?: \\"open\\" | \\"closed\\";

      /**
       * The title of the pull request.
       */
      title?: string;

      /**
       * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
       */
      maintainer_can_modify?: boolean;
    };
  },
  PullRequest
> = {
  id: \\"pulls/update\\",
};

/**
 * List pull requests files
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const listFiles: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; page?: number; perPage?: number },
  Array<DiffEntry>
> = {
  id: \\"pulls/list-files\\",
};

/**
 * Check if a pull request has been merged
 */
export const checkIfMerged: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number },
  void
> = {
  id: \\"pulls/check-if-merged\\",
};

/**
 * Merge a pull request
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const merge: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; body?: any | null },
  PullRequestMergeResult
> = {
  id: \\"pulls/merge\\",
};

/**
 * Get a review comment for a pull request
 * Provides details for a review comment.
 */
export const getReviewComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string },
  PullRequestReviewComment
> = {
  id: \\"pulls/get-review-comment\\",
};

/**
 * Delete a review comment for a pull request
 * Deletes a review comment.
 */
export const deleteReviewComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string },
  void
> = {
  id: \\"pulls/delete-review-comment\\",
};

/**
 * Update a review comment for a pull request
 * Enables you to edit a review comment.
 */
export const updateReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    body: {
      /**
       * The text of the reply to the review comment.
       */
      body: string;
    };
  },
  PullRequestReviewComment
> = {
  id: \\"pulls/update-review-comment\\",
};

/**
 * List commits on a pull request
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const listCommits: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; page?: number; perPage?: number },
  Array<Commit>
> = {
  id: \\"pulls/list-commits\\",
};

/**
 * List reviews for a pull request
 * The list of reviews returns in chronological order.
 */
export const listReviews: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; page?: number; perPage?: number },
  Array<PullRequestReview>
> = {
  id: \\"pulls/list-reviews\\",
};

/**
 * Create a review for a pull request
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * Pull request reviews created in the \`PENDING\` state do not include the \`submitted_at\` property in the response.
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the \`application/vnd.github.v3.diff\` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the \`Accept\` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The \`position\` value equals the number of lines down from the first \\"@@\\" hunk header in the file you want to add a comment. The line just below the \\"@@\\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const createReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * **Required** when using \`REQUEST_CHANGES\` or \`COMMENT\` for the \`event\` parameter. The body text of the pull request review.
       */
      body?: string;

      /**
       * The review action you want to perform. The review actions include: \`APPROVE\`, \`REQUEST_CHANGES\`, or \`COMMENT\`. By leaving this blank, you set the review action state to \`PENDING\`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
       */
      event?: \\"APPROVE\\" | \\"REQUEST_CHANGES\\" | \\"COMMENT\\";

      /**
       * Use the following table to specify the location, destination, and contents of the draft review comment.
       */
      comments?: Array<{
        /**
         * Text of the review comment.
         */
        body: string;

        line?: number;

        /**
         * The relative path to the file that necessitates a review comment.
         */
        path: string;

        side?: string;

        /**
         * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
         */
        position?: number;

        start_line?: number;

        start_side?: string;
      }>;

      /**
       * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the \`position\`. Defaults to the most recent commit in the pull request when you do not specify a value.
       */
      commit_id?: string;
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/create-review\\",
};

/**
 * List review comments on a pull request
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const listReviewComments: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    page?: number;
    since?: string;
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\";
    direction?: \\"asc\\" | \\"desc\\";
  },
  Array<PullRequestReviewComment>
> = {
  id: \\"pulls/list-review-comments\\",
};

/**
 * Create a review comment for a pull request
 *
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \\"[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\\" We recommend creating a review comment using \`line\`, \`side\`, and optionally \`start_line\` and \`start_side\` if your comment applies to more than one line in the pull request diff.
 *
 * The \`position\` parameter is deprecated. If you use \`position\`, the \`line\`, \`side\`, \`start_line\`, and \`start_side\` parameters are not required.
 *
 * **Note:** The position value equals the number of lines down from the first \\"@@\\" hunk header in the file you want to add a comment. The line just below the \\"@@\\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body: {
      /**
       * The text of the review comment.
       */
      body: string;

      /**
       * The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
       */
      line?: number;

      /**
       * The relative path to the file that necessitates a comment.
       */
      path?: string;

      /**
       * In a split diff view, the side of the diff that the pull request's changes appear on. Can be \`LEFT\` or \`RIGHT\`. Use \`LEFT\` for deletions that appear in red. Use \`RIGHT\` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \\"[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\\" in the GitHub Help documentation.
       */
      side?: \\"LEFT\\" | \\"RIGHT\\";

      /**
       * **This parameter is deprecated. Use \`line\` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
       * @deprecated
       */
      position?: number;

      /**
       * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the \`position\`.
       */
      commit_id?: string;

      /**
       * **Required when using multi-line comments unless using \`in_reply_to\`**. The \`start_line\` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \\"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\\" in the GitHub Help documentation.
       */
      start_line?: number;

      /**
       * **Required when using multi-line comments unless using \`in_reply_to\`**. The \`start_side\` is the starting side of the diff that the comment applies to. Can be \`LEFT\` or \`RIGHT\`. To learn more about multi-line comments, see \\"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\\" in the GitHub Help documentation. See \`side\` in this table for additional context.
       */
      start_side?: \\"LEFT\\" | \\"RIGHT\\" | \\"side\\";

      /**
       * The ID of the review comment to reply to. To find the ID of a review comment with [\\"List review comments on a pull request\\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than \`body\` in the request body are ignored.
       */
      in_reply_to?: number;
    };
  },
  PullRequestReviewComment
> = {
  id: \\"pulls/create-review-comment\\",
};

/**
 * Update a pull request branch
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const updateBranch: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; body?: any | null },
  {
    url?: string;

    message?: string;
  }
> = {
  id: \\"pulls/update-branch\\",
};

/**
 * List requested reviewers for a pull request
 * Lists the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 */
export const listRequestedReviewers: ApiHeroEndpoint<
  { owner: string; repo: string; pullNumber: number; page?: number; perPage?: number },
  PullRequestReviewRequest
> = {
  id: \\"pulls/list-requested-reviewers\\",
};

/**
 * Request reviewers for a pull request
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const requestReviewers: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body?: {
      /**
       * An array of user \`login\`s that will be requested.
       */
      reviewers?: Array<string>;

      /**
       * An array of team \`slug\`s that will be requested.
       */
      team_reviewers?: Array<string>;
    };
  },
  PullRequestSimple
> = {
  id: \\"pulls/request-reviewers\\",
};

/**
 * Remove requested reviewers from a pull request
 */
export const removeRequestedReviewers: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    pullNumber: number;
    body: {
      /**
       * An array of user \`login\`s that will be removed.
       */
      reviewers: Array<string>;

      /**
       * An array of team \`slug\`s that will be removed.
       */
      team_reviewers?: Array<string>;
    };
  },
  PullRequestSimple
> = {
  id: \\"pulls/remove-requested-reviewers\\",
};

/**
 * Get a review for a pull request
 */
export const getReview: ApiHeroEndpoint<
  { owner: string; repo: string; reviewId: number; pullNumber: number },
  PullRequestReview
> = {
  id: \\"pulls/get-review\\",
};

/**
 * Update a review for a pull request
 * Update the review summary comment with new text.
 */
export const updateReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    reviewId: number;
    pullNumber: number;
    body: {
      /**
       * The body text of the pull request review.
       */
      body: string;
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/update-review\\",
};

/**
 * Delete a pending review for a pull request
 */
export const deletePendingReview: ApiHeroEndpoint<
  { owner: string; repo: string; reviewId: number; pullNumber: number },
  PullRequestReview
> = {
  id: \\"pulls/delete-pending-review\\",
};

/**
 * Submit a review for a pull request
 */
export const submitReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    reviewId: number;
    pullNumber: number;
    body: {
      /**
       * The body text of the pull request review
       */
      body?: string;

      /**
       * The review action you want to perform. The review actions include: \`APPROVE\`, \`REQUEST_CHANGES\`, or \`COMMENT\`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to \`PENDING\`, which means you will need to re-submit the pull request review using a review action.
       */
      event: \\"APPROVE\\" | \\"REQUEST_CHANGES\\" | \\"COMMENT\\";
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/submit-review\\",
};

/**
 * List comments for a pull request review
 * List comments for a specific pull request review.
 */
export const listCommentsForReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    reviewId: number;
    pullNumber: number;
    page?: number;
    perPage?: number;
  },
  Array<ReviewComment>
> = {
  id: \\"pulls/list-comments-for-review\\",
};

/**
 * Create a reply for a review comment
 * Creates a reply to a review comment for a pull request. For the \`comment_id\`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createReplyForReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    pullNumber: number;
    body: {
      /**
       * The text of the review comment.
       */
      body: string;
    };
  },
  PullRequestReviewComment
> = {
  id: \\"pulls/create-reply-for-review-comment\\",
};

/**
 * Dismiss a review for a pull request
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const dismissReview: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    reviewId: number;
    pullNumber: number;
    body: {
      event?: \\"DISMISS\\";

      /**
       * The message for the pull request review dismissal
       */
      message: string;
    };
  },
  PullRequestReview
> = {
  id: \\"pulls/dismiss-review\\",
};
",
  "rate-limit.ts" => "import { RateLimitOverview, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get rate limit status for the authenticated user
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The \`rate\` object is deprecated. If you're writing new API client code or updating existing code, you should use the \`core\` object instead of the \`rate\` object. The \`core\` object contains the same information that is present in the \`rate\` object.
 */
export const getRateLimit: ApiHeroEndpoint<never, RateLimitOverview> = {
  id: \\"rate-limit/get\\",
};
",
  "reactions.ts" => "import { Reaction, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List reactions for a commit comment
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const listForCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-commit-comment\\",
};

/**
 * Create reaction for a commit comment
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP \`200\` status means that you already added the reaction type to this commit comment.
 */
export const createForCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-commit-comment\\",
};

/**
 * List reactions for an issue
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const listForIssue: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-issue\\",
};

/**
 * Create reaction for an issue
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP \`200\` status means that you already added the reaction type to this issue.
 */
export const createForIssue: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    issueNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-issue\\",
};

/**
 * List reactions for a release
 * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const listForRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    releaseId: number;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"laugh\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-release\\",
};

/**
 * Create reaction for a release
 * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a \`Status: 200 OK\` means that you already added the reaction type to this release.
 */
export const createForRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    releaseId: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
       */
      content: \\"+1\\" | \\"laugh\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-release\\",
};

/** * @deprecated
 * List reactions for a team discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List reactions for a team discussion\`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listForTeamDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-legacy\\",
};

/** * @deprecated
 * Create reaction for a team discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create reaction for a team discussion\`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion.
 */
export const createForTeamDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-legacy\\",
};

/**
 * List reactions for a pull request review comment
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const listForPullRequestReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-pull-request-review-comment\\",
};

/**
 * Create reaction for a pull request review comment
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP \`200\` status means that you already added the reaction type to this pull request review comment.
 */
export const createForPullRequestReviewComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-pull-request-review-comment\\",
};

/**
 * List reactions for an issue comment
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const listForIssueComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-issue-comment\\",
};

/**
 * Create reaction for an issue comment
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP \`200\` status means that you already added the reaction type to this issue comment.
 */
export const createForIssueComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-issue-comment\\",
};

/**
 * Delete a commit comment reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const deleteForCommitComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-commit-comment\\",
};

/**
 * Delete an issue reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id\`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const deleteForIssue: ApiHeroEndpoint<
  { owner: string; repo: string; issueNumber: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-issue\\",
};

/**
 * Delete a release reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const deleteForRelease: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-release\\",
};

/**
 * List reactions for a team discussion
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions\`.
 */
export const listForTeamDiscussionInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-in-org\\",
};

/**
 * Create reaction for a team discussion
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions\`.
 */
export const createForTeamDiscussionInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-in-org\\",
};

/**
 * Delete a pull request comment reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.\`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const deleteForPullRequestComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-pull-request-comment\\",
};

/**
 * Delete an issue comment reaction
 * **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id\`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const deleteForIssueComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-issue-comment\\",
};

/** * @deprecated
 * List reactions for a team discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List reactions for a team discussion comment\`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listForTeamDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    commentNumber: number;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-comment-legacy\\",
};

/** * @deprecated
 * Create reaction for a team discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \\"[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\\" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion comment.
 */
export const createForTeamDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-comment-legacy\\",
};

/**
 * Delete team discussion reaction
 * **Note:** You can also specify a team or organization with \`team_id\` and \`org_id\` using the route \`DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteForTeamDiscussion: ApiHeroEndpoint<
  { teamSlug: string; org: string; discussionNumber: number; reactionId: number },
  void
> = {
  id: \\"reactions/delete-for-team-discussion\\",
};

/**
 * List reactions for a team discussion comment
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions\`.
 */
export const listForTeamDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    commentNumber: number;
    page?: number;
    perPage?: number;
    content?: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
  },
  Array<Reaction>
> = {
  id: \\"reactions/list-for-team-discussion-comment-in-org\\",
};

/**
 * Create reaction for a team discussion comment
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP \`200\` status means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions\`.
 */
export const createForTeamDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
       */
      content: \\"+1\\" | \\"-1\\" | \\"laugh\\" | \\"confused\\" | \\"heart\\" | \\"hooray\\" | \\"rocket\\" | \\"eyes\\";
    };
  },
  Reaction
> = {
  id: \\"reactions/create-for-team-discussion-comment-in-org\\",
};

/**
 * Delete team discussion comment reaction
 * **Note:** You can also specify a team or organization with \`team_id\` and \`org_id\` using the route \`DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id\`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteForTeamDiscussionComment: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    commentNumber: number;
    reactionId: number;
  },
  void
> = {
  id: \\"reactions/delete-for-team-discussion-comment\\",
};
",
  "repos.ts" => "import {
  Autolink,
  BranchProtection,
  BranchRestrictionPolicy,
  BranchShort,
  BranchWithProtection,
  CloneTraffic,
  CodeFrequencyStat,
  CodeownersErrors,
  Collaborator,
  CombinedCommitStatus,
  Commit,
  CommitActivity,
  CommitComment,
  CommitComparison,
  CommunityProfile,
  ContentDirectory,
  ContentFile,
  ContentSubmodule,
  ContentSymlink,
  ContentTraffic,
  Contributor,
  ContributorActivity,
  DeployKey,
  Deployment,
  DeploymentStatus,
  EmptyObject,
  Environment,
  FileCommit,
  FullRepository,
  Hook,
  HookDelivery,
  HookDeliveryItem,
  Integration,
  Language,
  MergedUpstream,
  MinimalRepository,
  Page,
  PageBuild,
  PageBuildStatus,
  PageDeployment,
  PagesHealthCheck,
  ParticipationStats,
  ProtectedBranch,
  ProtectedBranchAdminEnforced,
  ProtectedBranchPullRequestReview,
  PullRequestSimple,
  ReferrerTraffic,
  Release,
  ReleaseAsset,
  ReleaseNotesContent,
  Repository,
  RepositoryCollaboratorPermission,
  RepositoryInvitation,
  ShortBranch,
  SimpleUser,
  Status,
  StatusCheckPolicy,
  Tag,
  TagProtection,
  Team,
  Topic,
  ViewTraffic,
  WebhookConfig,
  WebhookConfigContentType,
  WebhookConfigInsecureSsl,
  WebhookConfigSecret,
  WebhookConfigUrl,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List repositories for the authenticated user
 * Lists repositories that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  {
    page?: number;
    since?: string;
    type?: \\"all\\" | \\"owner\\" | \\"public\\" | \\"private\\" | \\"member\\";
    before?: string;
    perPage?: number;
    sort?: \\"created\\" | \\"updated\\" | \\"pushed\\" | \\"full_name\\";
    visibility?: \\"all\\" | \\"public\\" | \\"private\\";
    affiliation?: string;
    direction?: \\"asc\\" | \\"desc\\";
  },
  Array<Repository>
> = {
  id: \\"repos/list-for-authenticated-user\\",
};

/**
 * Create a repository for the authenticated user
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   \`public_repo\` scope or \`repo\` scope to create a public repository. Note: For GitHub AE, use \`repo\` scope to create an internal repository.
 * *   \`repo\` scope to create a private repository.
 */
export const createForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * The name of the repository.
       */
      name: string;

      /**
       * Whether the repository is private.
       */
      private?: boolean;

      /**
       * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
       */
      team_id?: number;

      /**
       * Whether the wiki is enabled.
       */
      has_wiki?: boolean;

      /**
       * A URL with more information about the repository.
       */
      homepage?: string;

      /**
       * Whether the repository is initialized with a minimal README.
       */
      auto_init?: boolean;

      /**
       * Whether issues are enabled.
       */
      has_issues?: boolean;

      /**
       * A short description of the repository.
       */
      description?: string;

      /**
       * Whether this repository acts as a template that can be used to generate new repositories.
       */
      is_template?: boolean;

      /**
       * Whether projects are enabled.
       */
      has_projects?: boolean;

      /**
       * Whether downloads are enabled.
       */
      has_downloads?: boolean;

      /**
       * Whether to allow Auto-merge to be used on pull requests.
       */
      allow_auto_merge?: boolean;

      /**
       * The license keyword of the open source license for this repository.
       */
      license_template?: string;

      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;

      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;

      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;

      /**
       * The desired language or platform to apply to the .gitignore.
       */
      gitignore_template?: string;

      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
    };
  },
  Repository
> = {
  id: \\"repos/create-for-authenticated-user\\",
};

/**
 * List public repositories
 * Lists all public repositories in the order that they were created.
 *
 * Note:
 * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const listPublic: ApiHeroEndpoint<{ since?: number }, Array<MinimalRepository>> = {
  id: \\"repos/list-public\\",
};

/**
 * List organization repositories
 * Lists repositories for the specified organization.
 */
export const listForOrg: ApiHeroEndpoint<
  {
    org: string;
    page?: number;
    type?: \\"all\\" | \\"public\\" | \\"private\\" | \\"forks\\" | \\"sources\\" | \\"member\\" | \\"internal\\";
    perPage?: number;
    direction?: \\"asc\\" | \\"desc\\";
    sort?: \\"created\\" | \\"updated\\" | \\"pushed\\" | \\"full_name\\";
  },
  Array<MinimalRepository>
> = {
  id: \\"repos/list-for-org\\",
};

/**
 * Create an organization repository
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   \`public_repo\` scope or \`repo\` scope to create a public repository. Note: For GitHub AE, use \`repo\` scope to create an internal repository.
 * *   \`repo\` scope to create a private repository
 */
export const createInOrg: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The name of the repository.
       */
      name: string;

      /**
       * Whether the repository is private.
       */
      private?: boolean;

      /**
       * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
       */
      team_id?: number;

      /**
       * Either \`true\` to enable the wiki for this repository or \`false\` to disable it.
       */
      has_wiki?: boolean;

      /**
       * A URL with more information about the repository.
       */
      homepage?: string;

      /**
       * Pass \`true\` to create an initial commit with empty README.
       */
      auto_init?: boolean;

      /**
       * Either \`true\` to enable issues for this repository or \`false\` to disable them.
       */
      has_issues?: boolean;

      /**
       * Can be \`public\` or \`private\`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, \`visibility\` can also be \`internal\`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \\"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\\" in the GitHub Help documentation.
       */
      visibility?: \\"public\\" | \\"private\\" | \\"internal\\";

      /**
       * A short description of the repository.
       */
      description?: string;

      /**
       * Either \`true\` to make this repo available as a template repository or \`false\` to prevent it.
       */
      is_template?: boolean;

      /**
       * Either \`true\` to enable projects for this repository or \`false\` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is \`false\`, and if you pass \`true\`, the API returns an error.
       */
      has_projects?: boolean;

      /**
       * Either \`true\` to allow auto-merge on pull requests, or \`false\` to disallow auto-merge.
       */
      allow_auto_merge?: boolean;

      /**
       * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the \`license_template\` string. For example, \\"mit\\" or \\"mpl-2.0\\".
       */
      license_template?: string;

      /**
       * Either \`true\` to allow merging pull requests with a merge commit, or \`false\` to prevent merging pull requests with merge commits.
       */
      allow_merge_commit?: boolean;

      /**
       * Either \`true\` to allow rebase-merging pull requests, or \`false\` to prevent rebase-merging.
       */
      allow_rebase_merge?: boolean;

      /**
       * Either \`true\` to allow squash-merging pull requests, or \`false\` to prevent squash-merging.
       */
      allow_squash_merge?: boolean;

      /**
       * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \\"Haskell\\".
       */
      gitignore_template?: string;

      /**
       * Either \`true\` to allow automatically deleting head branches when pull requests are merged, or \`false\` to prevent automatic deletion.
       */
      delete_branch_on_merge?: boolean;

      /**
       * Either \`true\` to allow squash-merge commits to use pull request title, or \`false\` to use commit message.
       */
      use_squash_pr_title_as_default?: boolean;
    };
  },
  Repository
> = {
  id: \\"repos/create-in-org\\",
};

/**
 * Get a repository
 * The \`parent\` and \`source\` objects are present when the repository is a fork. \`parent\` is the repository this repository was forked from, \`source\` is the ultimate source for the network.
 */
export const getRepos: ApiHeroEndpoint<{ owner: string; repo: string }, FullRepository> = {
  id: \\"repos/get\\",
};

/**
 * Delete a repository
 * Deleting a repository requires admin access. If OAuth is used, the \`delete_repo\` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a \`403 Forbidden\` response.
 */
export const deleteRepos: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/delete\\",
};

/**
 * Update a repository
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const update: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body?: {
      /**
       * The name of the repository.
       */
      name?: string;

      /**
       * Either \`true\` to make the repository private or \`false\` to make it public. Default: \`false\`.
       **Note**: You will get a \`422\` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
       */
      private?: boolean;

      /**
       * \`true\` to archive this repository. **Note**: You cannot unarchive repositories through the API.
       */
      archived?: boolean;

      /**
       * Either \`true\` to enable the wiki for this repository or \`false\` to disable it.
       */
      has_wiki?: boolean;

      /**
       * A URL with more information about the repository.
       */
      homepage?: string;

      /**
       * Either \`true\` to enable issues for this repository or \`false\` to disable them.
       */
      has_issues?: boolean;

      /**
       * Can be \`public\` or \`private\`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, \`visibility\` can also be \`internal\`.\\"
       */
      visibility?: \\"public\\" | \\"private\\" | \\"internal\\";

      /**
       * A short description of the repository.
       */
      description?: string;

      /**
       * Either \`true\` to make this repo available as a template repository or \`false\` to prevent it.
       */
      is_template?: boolean;

      /**
       * Either \`true\` to enable projects for this repository or \`false\` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is \`false\`, and if you pass \`true\`, the API returns an error.
       */
      has_projects?: boolean;

      /**
       * Either \`true\` to allow private forks, or \`false\` to prevent private forks.
       */
      allow_forking?: boolean;

      /**
       * Updates the default branch for this repository.
       */
      default_branch?: string;

      /**
       * Either \`true\` to allow auto-merge on pull requests, or \`false\` to disallow auto-merge.
       */
      allow_auto_merge?: boolean;

      /**
       * Either \`true\` to allow merging pull requests with a merge commit, or \`false\` to prevent merging pull requests with merge commits.
       */
      allow_merge_commit?: boolean;

      /**
       * Either \`true\` to allow rebase-merging pull requests, or \`false\` to prevent rebase-merging.
       */
      allow_rebase_merge?: boolean;

      /**
       * Either \`true\` to allow squash-merging pull requests, or \`false\` to prevent squash-merging.
       */
      allow_squash_merge?: boolean;

      /**
       * Either \`true\` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
       */
      allow_update_branch?: boolean;

      /**
       * Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: \`{\\"security_and_analysis\\": {\\"advanced_security\\": {\\"status\\": \\"enabled\\"}}}\`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a \`GET /repos/{owner}/{repo}\` request.
       */
      security_and_analysis?: any;

      /**
       * Either \`true\` to allow automatically deleting head branches when pull requests are merged, or \`false\` to prevent automatic deletion.
       */
      delete_branch_on_merge?: boolean;

      /**
       * Either \`true\` to allow squash-merge commits to use pull request title, or \`false\` to use commit message.
       */
      use_squash_pr_title_as_default?: boolean;
    };
  },
  FullRepository
> = {
  id: \\"repos/update\\",
};

/**
 * List repositories for a user
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const listForUser: ApiHeroEndpoint<
  {
    username: string;
    page?: number;
    perPage?: number;
    direction?: \\"asc\\" | \\"desc\\";
    sort?: \\"created\\" | \\"updated\\" | \\"pushed\\" | \\"full_name\\";
    type?: \\"all\\" | \\"owner\\" | \\"member\\";
  },
  Array<MinimalRepository>
> = {
  id: \\"repos/list-for-user\\",
};

/**
 * Enable Git LFS for a repository
 */
export const enableLfsForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, {}> = {
  id: \\"repos/enable-lfs-for-repo\\",
};

/**
 * Disable Git LFS for a repository
 */
export const disableLfsForRepo: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/disable-lfs-for-repo\\",
};

/**
 * List deploy keys
 */
export const listDeployKeys: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<DeployKey>
> = {
  id: \\"repos/list-deploy-keys\\",
};

/**
 * Create a deploy key
 * You can create a read-only deploy key.
 */
export const createDeployKey: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The contents of the key.
       */
      key: string;

      /**
       * A name for the key.
       */
      title?: string;

      /** 
* If \`true\`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
  
Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \\"[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\\" and \\"[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\\"
*/
      read_only?: boolean;
    };
  },
  DeployKey
> = {
  id: \\"repos/create-deploy-key\\",
};

/**
 * List repository tags
 */
export const listTags: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<Tag>
> = {
  id: \\"repos/list-tags\\",
};

/**
 * List forks
 */
export const listForks: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    sort?: \\"newest\\" | \\"oldest\\" | \\"stargazers\\" | \\"watchers\\";
  },
  Array<MinimalRepository>
> = {
  id: \\"repos/list-forks\\",
};

/**
 * Create a fork
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 */
export const createFork: ApiHeroEndpoint<
  { owner: string; repo: string; body?: any | null },
  FullRepository
> = {
  id: \\"repos/create-fork\\",
};

/**
 * List repository webhooks
 */
export const listWebhooks: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<Hook>
> = {
  id: \\"repos/list-webhooks\\",
};

/**
 * Create a repository webhook
 * Repositories can have multiple webhooks installed. Each webhook should have a unique \`config\`. Multiple webhooks can
 * share the same \`config\` as long as those webhooks do not have any \`events\` that overlap.
 */
export const createWebhook: ApiHeroEndpoint<
  { owner: string; repo: string; body?: any | null },
  Hook
> = {
  id: \\"repos/create-webhook\\",
};

/**
 * Get a GitHub Pages site
 */
export const getPages: ApiHeroEndpoint<{ owner: string; repo: string }, Page> = {
  id: \\"repos/get-pages\\",
};

/**
 * Create a GitHub Pages site
 * Configures a GitHub Pages site. For more information, see \\"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\\"
 */
export const createPagesSite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The source branch and directory used to publish your Pages site.
       */
      source?: {
        /**
         * The repository directory that includes the source files for the Pages site. Allowed paths are \`/\` or \`/docs\`. Default: \`/\`
         */
        path?: \\"/\\" | \\"/docs\\";

        /**
         * The repository branch used to publish your site's source files.
         */
        branch: string;
      };

      /**
       * The process in which the Page will be built. Possible values are \`\\"legacy\\"\` and \`\\"workflow\\"\`.
       */
      build_type?: \\"legacy\\" | \\"workflow\\";
    };
  },
  Page
> = {
  id: \\"repos/create-pages-site\\",
};

/**
 * Update information about a GitHub Pages site
 * Updates information for a GitHub Pages site. For more information, see \\"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 */
export const updateInformationAboutPagesSite: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Specify a custom domain for the repository. Sending a \`null\` value will remove the custom domain. For more about custom domains, see \\"[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/).\\"
       */
      cname?: string;

      /**
       * Configures access controls for the GitHub Pages site. If public is set to \`true\`, the site is accessible to anyone on the internet. If set to \`false\`, the site will only be accessible to users who have at least \`read\` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to \`internal\` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
       */
      public?: boolean;

      source?:
        | \\"gh-pages\\"
        | \\"master\\"
        | \\"master /docs\\"
        | {
            /**
             * The repository directory that includes the source files for the Pages site. Allowed paths are \`/\` or \`/docs\`.
             */
            path: \\"/\\" | \\"/docs\\";

            /**
             * The repository branch used to publish your site's source files.
             */
            branch: string;
          };

      /**
       * The process by which the GitHub Pages site will be built. \`workflow\` means that the site is built by a custom GitHub Actions workflow. \`legacy\` means that the site is built by GitHub when changes are pushed to a specific branch.
       */
      build_type?: \\"legacy\\" | \\"workflow\\";

      /**
       * Specify whether HTTPS should be enforced for the repository.
       */
      https_enforced?: boolean;
    };
  },
  void
> = {
  id: \\"repos/update-information-about-pages-site\\",
};

/**
 * Delete a GitHub Pages site
 */
export const deletePagesSite: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/delete-pages-site\\",
};

/**
 * List repository teams
 */
export const listTeams: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<Team>
> = {
  id: \\"repos/list-teams\\",
};

/**
 * Merge a branch
 */
export const merge: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the base branch that the head will be merged into.
       */
      base: string;

      /**
       * The head to merge. This can be a branch name or a commit SHA1.
       */
      head: string;

      /**
       * Commit message to use for the merge commit. If omitted, a default message will be used.
       */
      commit_message?: string;
    };
  },
  Commit
> = {
  id: \\"repos/merge\\",
};

/**
 * Get a repository README
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const getReadme: ApiHeroEndpoint<
  { owner: string; repo: string; ref?: string },
  ContentFile
> = {
  id: \\"repos/get-readme\\",
};

/**
 * Get all repository topics
 */
export const getAllTopics: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Topic
> = {
  id: \\"repos/get-all-topics\\",
};

/**
 * Replace all repository topics
 */
export const replaceAllTopics: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (\`[]\`) to clear all topics from the repository. **Note:** Topic \`names\` cannot contain uppercase letters.
       */
      names: Array<string>;
    };
  },
  Topic
> = {
  id: \\"repos/replace-all-topics\\",
};

/**
 * List repository invitations for the authenticated user
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const listInvitationsForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<RepositoryInvitation>
> = {
  id: \\"repos/list-invitations-for-authenticated-user\\",
};

/**
 * List commits
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const listCommits: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    since?: string;
    perPage?: number;
    author?: string;
    sha?: string;
    until?: string;
    path?: string;
  },
  Array<Commit>
> = {
  id: \\"repos/list-commits\\",
};

/**
 * List branches
 */
export const listBranches: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number; _protected?: boolean },
  Array<ShortBranch>
> = {
  id: \\"repos/list-branches\\",
};

/**
 * List commit comments for a repository
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const listCommitCommentsForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<CommitComment>
> = {
  id: \\"repos/list-commit-comments-for-repo\\",
};

/**
 * List releases
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const listReleases: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<Release>
> = {
  id: \\"repos/list-releases\\",
};

/**
 * Create a release
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * Text describing the contents of the tag.
       */
      body?: string;

      /**
       * The name of the release.
       */
      name?: string;

      /**
       * \`true\` to create a draft (unpublished) release, \`false\` to create a published one.
       */
      draft?: boolean;

      /**
       * The name of the tag.
       */
      tag_name: string;

      /**
       * \`true\` to identify the release as a prerelease. \`false\` to identify the release as a full release.
       */
      prerelease?: boolean;

      /**
       * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually \`master\`).
       */
      target_commitish?: string;

      /**
       * Whether to automatically generate the name and body for this release. If \`name\` is specified, the specified name will be used; otherwise, a name will be automatically generated. If \`body\` is specified, the body will be pre-pended to the automatically generated notes.
       */
      generate_release_notes?: boolean;

      /**
       * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see \\"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\\"
       */
      discussion_category_name?: string;
    };
  },
  Release
> = {
  id: \\"repos/create-release\\",
};

/**
 * Transfer a repository
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original \`owner\`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
 */
export const transfer: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
       */
      team_ids?: Array<number>;

      /**
       * The username or organization name the repository will be transferred to.
       */
      new_owner: string;
    };
  },
  MinimalRepository
> = {
  id: \\"repos/transfer\\",
};

/**
 * List all autolinks of a repository
 * This returns a list of autolinks configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const listAutolinks: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number },
  Array<Autolink>
> = {
  id: \\"repos/list-autolinks\\",
};

/**
 * Create an autolink reference for a repository
 * Users with admin access to the repository can create an autolink.
 */
export const createAutolink: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The prefix appended by alphanumeric characters will generate a link any time it is found in an issue, pull request, or commit.
       */
      key_prefix: string;

      /**
       * The URL must contain \`<num>\` for the reference number. \`<num>\` matches alphanumeric characters \`A-Z\` (case insensitive), \`0-9\`, and \`-\`.
       */
      url_template: string;
    };
  },
  Autolink
> = {
  id: \\"repos/create-autolink\\",
};

/**
 * List repository languages
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const listLanguages: ApiHeroEndpoint<{ owner: string; repo: string }, Language> = {
  id: \\"repos/list-languages\\",
};

/**
 * Create a repository dispatch event
 * You can use this endpoint to trigger a webhook event called \`repository_dispatch\` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the \`repository_dispatch\` event occurs. For an example \`repository_dispatch\` webhook payload, see \\"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\\"
 *
 * The \`client_payload\` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the \`client_payload\` can include a message that a user would like to send using a GitHub Actions workflow. Or the \`client_payload\` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 * - Personal access tokens with \`repo\` scope. For more information, see \\"[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)\\" in the GitHub Help documentation.
 * - GitHub Apps with both \`metadata:read\` and \`contents:read&write\` permissions.
 *
 * This input example shows how you can use the \`client_payload\` as a test to debug your workflow.
 */
export const createDispatchEvent: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * A custom webhook event name. Must be 100 characters or fewer.
       */
      event_type: string;

      /**
       * JSON payload with extra information about the webhook event that your action or workflow may use.
       */
      client_payload?: {};
    };
  },
  void
> = {
  id: \\"repos/create-dispatch-event\\",
};

/**
 * List deployments
 * Simple filtering of deployments is available via query parameters:
 */
export const listDeployments: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    sha?: string;
    ref?: string;
    environment?: string | null;
    task?: string;
  },
  Array<Deployment>
> = {
  id: \\"repos/list-deployments\\",
};

/**
 * Create a deployment
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The \`ref\` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The \`environment\` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as \`production\`, \`staging\`, and \`qa\`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is \`production\`.
 *
 * The \`auto_merge\` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a \`success\`
 * state. The \`required_contexts\` parameter allows you to specify a subset of contexts that must be \`success\`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The \`payload\` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The \`task\` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be \`deploy:migrations\` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with \`repo\` or \`repo_deployment\` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is \`master\` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the \`auto_merge\` option is enabled and when the default branch (in this case \`master\`), can't
 * be merged into the branch that's being deployed (in this case \`topic-branch\`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the \`required_contexts\` parameter indicates that one or more contexts need to have a \`success\`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of \`success\`.
 */
export const createDeployment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The ref to deploy. This can be a branch, tag, or SHA.
       */
      ref: string;

      /**
       * Specifies a task to execute (e.g., \`deploy\` or \`deploy:migrations\`).
       */
      task?: string;

      payload?: string;

      /**
       * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
       */
      auto_merge?: boolean;

      /**
       * Short description of the deployment.
       */
      description?: string;

      /**
       * Name for the target deployment environment (e.g., \`production\`, \`staging\`, \`qa\`).
       */
      environment?: string;

      /**
       * The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
       */
      required_contexts?: Array<string>;

      /**
       * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: \`false\`
       */
      transient_environment?: boolean;

      /**
       * Specifies if the given environment is one that end-users directly interact with. Default: \`true\` when \`environment\` is \`production\` and \`false\` otherwise.
       */
      production_environment?: boolean;
    };
  },
  | Deployment
  | {
      message?: string;
    }
> = {
  id: \\"repos/create-deployment\\",
};

/**
 * List repository invitations
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const listInvitations: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<RepositoryInvitation>
> = {
  id: \\"repos/list-invitations\\",
};

/**
 * List repository contributors
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const listContributors: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number; anon?: string },
  Array<Contributor>
> = {
  id: \\"repos/list-contributors\\",
};

/**
 * Get all environments
 * Get all environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getAllEnvironments: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  {
    /**
     * The number of environments in this repository
     */
    total_count?: number;

    environments?: Array<Environment>;
  }
> = {
  id: \\"repos/get-all-environments\\",
};

/**
 * List GitHub Pages builds
 */
export const listPagesBuilds: ApiHeroEndpoint<
  { owner: string; repo: string; page?: number; perPage?: number },
  Array<PageBuild>
> = {
  id: \\"repos/list-pages-builds\\",
};

/**
 * Request a GitHub Pages build
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const requestPagesBuild: ApiHeroEndpoint<{ owner: string; repo: string }, PageBuildStatus> =
  {
    id: \\"repos/request-pages-build\\",
  };

/**
 * Get a DNS health check for GitHub Pages
 * Gets a health check of the DNS settings for the \`CNAME\` record configured for a repository's GitHub Pages.
 *
 * The first request to this endpoint returns a \`202 Accepted\` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a \`200 OK\` status with the health check results in the response.
 *
 * Users must have admin or owner permissions. GitHub Apps must have the \`pages:write\` and \`administration:write\` permission to use this endpoint.
 */
export const getPagesHealthCheck: ApiHeroEndpoint<
  { owner: string; repo: string },
  PagesHealthCheck | EmptyObject
> = {
  id: \\"repos/get-pages-health-check\\",
};

/**
 * Get a repository README for a directory
 * Gets the README from a repository directory.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const getReadmeInDirectory: ApiHeroEndpoint<
  { owner: string; repo: string; dir: string; ref?: string },
  ContentFile
> = {
  id: \\"repos/get-readme-in-directory\\",
};

/**
 * List repository collaborators
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the \`read:org\` and \`repo\` scopes with push access to use this
 * endpoint. GitHub Apps must have the \`members\` organization permission and \`metadata\` repository permission to use this
 * endpoint.
 */
export const listCollaborators: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    perPage?: number;
    affiliation?: \\"outside\\" | \\"direct\\" | \\"all\\";
  },
  Array<Collaborator>
> = {
  id: \\"repos/list-collaborators\\",
};

/**
 * Get a commit
 * Returns the contents of a single commit reference. You must have \`read\` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch \`diff\` and \`patch\` formats. Diffs with binary data will have no \`patch\` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the \`sha\` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the \`Accept\` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getCommit: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string; page?: number; perPage?: number },
  Commit
> = {
  id: \\"repos/get-commit\\",
};

/**
 * Get a deploy key
 */
export const getDeployKey: ApiHeroEndpoint<
  { owner: string; keyId: number; repo: string },
  DeployKey
> = {
  id: \\"repos/get-deploy-key\\",
};

/**
 * Delete a deploy key
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const deleteDeployKey: ApiHeroEndpoint<
  { owner: string; keyId: number; repo: string },
  void
> = {
  id: \\"repos/delete-deploy-key\\",
};

/**
 * Download a repository archive (tar)
 * Gets a redirect URL to download a tar archive for a repository. If you omit \`:ref\`, the repository’s default branch (usually
 * \`master\`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the \`Location\` header to make a second \`GET\` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const downloadTarballArchive: ApiHeroEndpoint<
  { ref: string; owner: string; repo: string },
  void
> = {
  id: \\"repos/download-tarball-archive\\",
};

/**
 * Get page views
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const getViews: ApiHeroEndpoint<
  { owner: string; repo: string; per?: \\"\\" | \\"day\\" | \\"week\\" },
  ViewTraffic
> = {
  id: \\"repos/get-views\\",
};

/**
 * Download a repository archive (zip)
 * Gets a redirect URL to download a zip archive for a repository. If you omit \`:ref\`, the repository’s default branch (usually
 * \`master\`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the \`Location\` header to make a second \`GET\` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const downloadZipballArchive: ApiHeroEndpoint<
  { ref: string; owner: string; repo: string },
  void
> = {
  id: \\"repos/download-zipball-archive\\",
};

/**
 * Sync a fork branch with the upstream repository
 * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
 */
export const mergeUpstream: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The name of the branch which should be updated to match upstream.
       */
      branch: string;
    };
  },
  MergedUpstream
> = {
  id: \\"repos/merge-upstream\\",
};

/**
 * Create a commit status
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per \`sha\` and \`context\` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const createCommitStatus: ApiHeroEndpoint<
  {
    sha: string;
    owner: string;
    repo: string;
    body: {
      /**
       * The state of the status.
       */
      state: \\"error\\" | \\"failure\\" | \\"pending\\" | \\"success\\";

      /**
       * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
       */
      context?: string;

      /** 
* The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
\`http://ci.example.com/user/repo/build/sha\`
*/
      target_url?: string;

      /**
       * A short description of the status.
       */
      description?: string;
    };
  },
  Status
> = {
  id: \\"repos/create-commit-status\\",
};

/**
 * Get repository clones
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const getClones: ApiHeroEndpoint<
  { owner: string; repo: string; per?: \\"\\" | \\"day\\" | \\"week\\" },
  CloneTraffic
> = {
  id: \\"repos/get-clones\\",
};

/**
 * Get repository content
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in \`:path\`. If you omit
 * \`:path\`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Note**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 *
 * #### Size limits
 * If the requested file's size is:
 * * 1 MB or smaller: All features of this endpoint are supported.
 * * Between 1-100 MB: Only the \`raw\` or \`object\` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the \`object\` media type, the \`content\` field will be an empty string and the \`encoding\` field will be \`\\"none\\"\`. To get the contents of these larger files, use the \`raw\` media type.
 * * Greater than 100 MB: This endpoint is not supported.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their \\"type\\" specified as \\"file\\". Logically, the value
 * _should_ be \\"submodule\\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as \\"submodule\\".
 *
 * #### If the content is a symlink
 * If the requested \`:path\` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The \`submodule_git_url\` identifies the location of the submodule repository, and the \`sha\` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (\`git_url\` and \`_links[\\"git\\"]\`) and the
 * github.com URLs (\`html_url\` and \`_links[\\"html\\"]\`) will have null values.
 */
export const getContent: ApiHeroEndpoint<
  { owner: string; repo: string; path: string; ref?: string },
  ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule
> = {
  id: \\"repos/get-content\\",
};

/**
 * Create or update file contents
 * Creates a new file or replaces an existing file in a repository.
 */
export const createOrUpdateFileContents: ApiHeroEndpoint<
  {
    path: string;
    owner: string;
    repo: string;
    body: {
      /**
       * **Required if you are updating a file**. The blob SHA of the file being replaced.
       */
      sha?: string;

      /**
       * The author of the file. Default: The \`committer\` or the authenticated user if you omit \`committer\`.
       */
      author?: {
        date?: string;

        /**
         * The name of the author or committer of the commit. You'll receive a \`422\` status code if \`name\` is omitted.
         */
        name: string;

        /**
         * The email of the author or committer of the commit. You'll receive a \`422\` status code if \`email\` is omitted.
         */
        email: string;
      };

      /**
       * The branch name. Default: the repository’s default branch (usually \`master\`)
       */
      branch?: string;

      /**
       * The new file content, using Base64 encoding.
       */
      content: string;

      /**
       * The commit message.
       */
      message: string;

      /**
       * The person that committed the file. Default: the authenticated user.
       */
      committer?: {
        date?: string;

        /**
         * The name of the author or committer of the commit. You'll receive a \`422\` status code if \`name\` is omitted.
         */
        name: string;

        /**
         * The email of the author or committer of the commit. You'll receive a \`422\` status code if \`email\` is omitted.
         */
        email: string;
      };
    };
  },
  FileCommit
> = {
  id: \\"repos/create-or-update-file-contents\\",
};

/**
 * Delete a file
 * Deletes a file in a repository.
 *
 * You can provide an additional \`committer\` parameter, which is an object containing information about the committer. Or, you can provide an \`author\` parameter, which is an object containing information about the author.
 *
 * The \`author\` section is optional and is filled in with the \`committer\` information if omitted. If the \`committer\` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both \`name\` and \`email\`, whether you choose to use \`author\` or \`committer\`. Otherwise, you'll receive a \`422\` status code.
 */
export const deleteFile: ApiHeroEndpoint<
  {
    path: string;
    owner: string;
    repo: string;
    body: {
      /**
       * The blob SHA of the file being replaced.
       */
      sha: string;

      /**
       * object containing information about the author.
       */
      author?: {
        /**
         * The name of the author (or committer) of the commit
         */
        name?: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email?: string;
      };

      /**
       * The branch name. Default: the repository’s default branch (usually \`master\`)
       */
      branch?: string;

      /**
       * The commit message.
       */
      message: string;

      /**
       * object containing information about the committer.
       */
      committer?: {
        /**
         * The name of the author (or committer) of the commit
         */
        name?: string;

        /**
         * The email of the author (or committer) of the commit
         */
        email?: string;
      };
    };
  },
  FileCommit
> = {
  id: \\"repos/delete-file\\",
};

/**
 * Get a repository webhook
 * Returns a webhook configured in a repository. To get only the webhook \`config\` properties, see \\"[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\\"
 */
export const getWebhook: ApiHeroEndpoint<{ owner: string; repo: string; hookId: number }, Hook> = {
  id: \\"repos/get-webhook\\",
};

/**
 * Delete a repository webhook
 */
export const deleteWebhook: ApiHeroEndpoint<{ owner: string; repo: string; hookId: number }, void> =
  {
    id: \\"repos/delete-webhook\\",
  };

/**
 * Update a repository webhook
 * Updates a webhook configured in a repository. If you previously had a \`secret\` set, you must provide the same \`secret\` or set a new \`secret\` or the secret will be removed. If you are only updating individual webhook \`config\` properties, use \\"[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\\"
 */
export const updateWebhook: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    hookId: number;
    body: {
      /**
       * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
       */
      active?: boolean;

      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
       */
      config?: {
        url: WebhookConfigUrl;

        room?: string;

        secret?: WebhookConfigSecret;

        address?: string;

        content_type?: WebhookConfigContentType;

        insecure_ssl?: WebhookConfigInsecureSsl;
      };

      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
       */
      events?: Array<string>;

      /**
       * Determines a list of events to be added to the list of events that the Hook triggers for.
       */
      add_events?: Array<string>;

      /**
       * Determines a list of events to be removed from the list of events that the Hook triggers for.
       */
      remove_events?: Array<string>;
    };
  },
  Hook
> = {
  id: \\"repos/update-webhook\\",
};

/**
 * Get the latest release
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the \`created_at\` attribute. The \`created_at\` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const getLatestRelease: ApiHeroEndpoint<{ owner: string; repo: string }, Release> = {
  id: \\"repos/get-latest-release\\",
};

/**
 * List tag protection states for a repository
 * This returns the tag protection states of a repository.
 *
 * This information is only available to repository administrators.
 */
export const listTagProtection: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<TagProtection>
> = {
  id: \\"repos/list-tag-protection\\",
};

/**
 * Create a tag protection state for a repository
 * This creates a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const createTagProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * An optional glob pattern to match against when enforcing tag protection.
       */
      pattern: string;
    };
  },
  TagProtection
> = {
  id: \\"repos/create-tag-protection\\",
};

/**
 * Create a GitHub Pages deployment
 * Create a GitHub Pages deployment for a repository.
 *
 * Users must have write permissions. GitHub Apps must have the \`pages:write\` permission to use this endpoint.
 */
export const createPagesDeployment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The OIDC token issued by GitHub Actions certifying the origin of the deployment.
       */
      oidc_token: string;

      /**
       * The target environment for this GitHub Pages deployment.
       */
      environment?: string;

      /**
       * The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.
       */
      artifact_url: string;

      /**
       * A unique string that represents the version of the build for this deployment.
       */
      pages_build_version: string;
    };
  },
  PageDeployment
> = {
  id: \\"repos/create-pages-deployment\\",
};

/**
 * Get the hourly commit count for each day
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   \`0-6\`: Sunday - Saturday
 * *   \`0-23\`: Hour of day
 * *   Number of commits
 *
 * For example, \`[2, 14, 25]\` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const getPunchCardStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<CodeFrequencyStat>
> = {
  id: \\"repos/get-punch-card-stats\\",
};

/**
 * Get a branch
 */
export const getBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  BranchWithProtection
> = {
  id: \\"repos/get-branch\\",
};

/**
 * List CODEOWNERS errors
 * List any syntax errors that are detected in the CODEOWNERS
 * file.
 *
 * For more information about the correct CODEOWNERS syntax,
 * see \\"[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners).\\"
 */
export const codeownersErrors: ApiHeroEndpoint<
  { owner: string; repo: string; ref?: string },
  CodeownersErrors
> = {
  id: \\"repos/codeowners-errors\\",
};

/**
 * Get community profile metrics
 * This endpoint will return all community profile metrics, including an
 * overall health score, repository description, the presence of documentation, detected
 * code of conduct, detected license, and the presence of ISSUE\\\\_TEMPLATE, PULL\\\\_REQUEST\\\\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The \`health_percentage\` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the \`health_percentage\` is \`100\`. If only one is present, then the
 * \`health_percentage\` is \`25\`.
 *
 * \`content_reports_enabled\` is only returned for organization-owned repositories.
 */
export const getCommunityProfileMetrics: ApiHeroEndpoint<
  { owner: string; repo: string },
  CommunityProfile
> = {
  id: \\"repos/get-community-profile-metrics\\",
};

/**
 * Compare two commits
 * The \`basehead\` param is comprised of two parts: \`base\` and \`head\`. Both must be branch names in \`repo\`. To compare branches across other repositories in the same network as \`repo\`, use the format \`<USERNAME>:branch\`.
 *
 * The response from the API is equivalent to running the \`git log base..head\` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a \`renamed\` status have a \`previous_filename\` field showing the previous filename of the file, and files with a \`modified\` status have a \`patch\` field showing the changes made to the file.
 *
 * **Working with large comparisons**
 *
 * To process a response with a large number of commits, you can use (\`per_page\` or \`page\`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see \\"[Traversing with pagination](/rest/guides/traversing-with-pagination).\\"
 *
 * When calling this API without any paging parameters (\`per_page\` or \`page\`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
 *
 * **Signature verification object**
 *
 * The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | \`signature\` | \`string\` | The signature that was extracted from the commit. |
 * | \`payload\` | \`string\` | The value that was signed. |
 *
 * These are the possible values for \`reason\` in the \`verification\` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | \`expired_key\` | The key that made the signature is expired. |
 * | \`not_signing_key\` | The \\"signing\\" flag is not among the usage flags in the GPG key that made the signature. |
 * | \`gpgverify_error\` | There was an error communicating with the signature verification service. |
 * | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. |
 * | \`unsigned\` | The object does not include a signature. |
 * | \`unknown_signature_type\` | A non-PGP signature was found in the commit. |
 * | \`no_user\` | No user was associated with the \`committer\` email address in the commit. |
 * | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | \`unknown_key\` | The key that made the signature has not been registered with any user's account. |
 * | \`malformed_signature\` | There was an error parsing the signature. |
 * | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const compareCommits: ApiHeroEndpoint<
  { owner: string; basehead: string; repo: string; page?: number; perPage?: number },
  CommitComparison
> = {
  id: \\"repos/compare-commits\\",
};

/**
 * Get all contributor commit activity
 *
 * Returns the \`total\` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (\`weeks\` array) with the following information:
 *
 * *   \`w\` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   \`a\` - Number of additions
 * *   \`d\` - Number of deletions
 * *   \`c\` - Number of commits
 */
export const getContributorsStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<ContributorActivity> | {}
> = {
  id: \\"repos/get-contributors-stats\\",
};

/**
 * Get latest Pages build
 */
export const getLatestPagesBuild: ApiHeroEndpoint<{ owner: string; repo: string }, PageBuild> = {
  id: \\"repos/get-latest-pages-build\\",
};

/**
 * Get a release by tag name
 * Get a published release with the specified tag.
 */
export const getReleaseByTag: ApiHeroEndpoint<
  { owner: string; repo: string; tag: string },
  Release
> = {
  id: \\"repos/get-release-by-tag\\",
};

/**
 * Get the weekly commit count
 * Returns the total commit counts for the \`owner\` and total commit counts in \`all\`. \`all\` is everyone combined, including the \`owner\` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract \`owner\` from \`all\`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const getParticipationStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  ParticipationStats
> = {
  id: \\"repos/get-participation-stats\\",
};

/**
 * Get the combined status for a specific reference
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 *
 * Additionally, a combined \`state\` is returned. The \`state\` is one of:
 *
 * *   **failure** if any of the contexts report as \`error\` or \`failure\`
 * *   **pending** if there are no statuses or a context is \`pending\`
 * *   **success** if the latest status for all contexts is \`success\`
 */
export const getCombinedStatusForRef: ApiHeroEndpoint<
  { ref: string; owner: string; repo: string; page?: number; perPage?: number },
  CombinedCommitStatus
> = {
  id: \\"repos/get-combined-status-for-ref\\",
};

/**
 * Get the weekly commit activity
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const getCodeFrequencyStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<CodeFrequencyStat> | {}
> = {
  id: \\"repos/get-code-frequency-stats\\",
};

/**
 * Check if vulnerability alerts are enabled for a repository
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see \\"[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\\".
 */
export const checkVulnerabilityAlerts: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/check-vulnerability-alerts\\",
};

/**
 * Enable vulnerability alerts
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\\".
 */
export const enableVulnerabilityAlerts: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/enable-vulnerability-alerts\\",
};

/**
 * Disable vulnerability alerts
 * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\\".
 */
export const disableVulnerabilityAlerts: ApiHeroEndpoint<{ owner: string; repo: string }, void> = {
  id: \\"repos/disable-vulnerability-alerts\\",
};

/**
 * Get a commit comment
 */
export const getCommitComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string },
  CommitComment
> = {
  id: \\"repos/get-commit-comment\\",
};

/**
 * Delete a commit comment
 */
export const deleteCommitComment: ApiHeroEndpoint<
  { owner: string; commentId: number; repo: string },
  void
> = {
  id: \\"repos/delete-commit-comment\\",
};

/**
 * Update a commit comment
 */
export const updateCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    commentId: number;
    repo: string;
    body: {
      /**
       * The contents of the comment
       */
      body: string;
    };
  },
  CommitComment
> = {
  id: \\"repos/update-commit-comment\\",
};

/**
 * Ping a repository webhook
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const pingWebhook: ApiHeroEndpoint<{ owner: string; repo: string; hookId: number }, void> = {
  id: \\"repos/ping-webhook\\",
};

/**
 * Test the push repository webhook
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to \`push\` events. If the hook is not subscribed to \`push\` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously \`/repos/:owner/:repo/hooks/:hook_id/test\`
 */
export const testPushWebhook: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number },
  void
> = {
  id: \\"repos/test-push-webhook\\",
};

/**
 * Get a release
 * **Note:** This returns an \`upload_url\` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const getRelease: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number },
  Release
> = {
  id: \\"repos/get-release\\",
};

/**
 * Delete a release
 * Users with push access to the repository can delete a release.
 */
export const deleteRelease: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number },
  void
> = {
  id: \\"repos/delete-release\\",
};

/**
 * Update a release
 * Users with push access to the repository can edit a release.
 */
export const updateRelease: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    releaseId: number;
    body?: {
      /**
       * Text describing the contents of the tag.
       */
      body?: string;

      /**
       * The name of the release.
       */
      name?: string;

      /**
       * \`true\` makes the release a draft, and \`false\` publishes the release.
       */
      draft?: boolean;

      /**
       * The name of the tag.
       */
      tag_name?: string;

      /**
       * \`true\` to identify the release as a prerelease, \`false\` to identify the release as a full release.
       */
      prerelease?: boolean;

      /**
       * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually \`master\`).
       */
      target_commitish?: string;

      /**
       * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see \\"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\\"
       */
      discussion_category_name?: string;
    };
  },
  Release
> = {
  id: \\"repos/update-release\\",
};

/**
 * Get the last year of commit activity
 * Returns the last year of commit activity grouped by week. The \`days\` array is a group of commits per day, starting on \`Sunday\`.
 */
export const getCommitActivityStats: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<CommitActivity> | {}
> = {
  id: \\"repos/get-commit-activity-stats\\",
};

/**
 * Get top referral paths
 * Get the top 10 popular contents over the last 14 days.
 */
export const getTopPaths: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<ContentTraffic>
> = {
  id: \\"repos/get-top-paths\\",
};

/**
 * List commit statuses for a reference
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: \`GET /repos/:owner/:repo/statuses/:ref\`.
 */
export const listCommitStatusesForRef: ApiHeroEndpoint<
  { owner: string; repo: string; ref: string; page?: number; perPage?: number },
  Array<Status>
> = {
  id: \\"repos/list-commit-statuses-for-ref\\",
};

/**
 * Get a webhook configuration for a repository
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the \`active\` state and \`events\`, use \\"[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\\"
 *
 * Access tokens must have the \`read:repo_hook\` or \`repo\` scope, and GitHub Apps must have the \`repository_hooks:read\` permission.
 */
export const getWebhookConfigForRepo: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number },
  WebhookConfig
> = {
  id: \\"repos/get-webhook-config-for-repo\\",
};

/**
 * Update a webhook configuration for a repository
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the \`active\` state and \`events\`, use \\"[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\\"
 *
 * Access tokens must have the \`write:repo_hook\` or \`repo\` scope, and GitHub Apps must have the \`repository_hooks:write\` permission.
 */
export const updateWebhookConfigForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    hookId: number;
    body?: {
      url?: WebhookConfigUrl;

      secret?: WebhookConfigSecret;

      content_type?: WebhookConfigContentType;

      insecure_ssl?: WebhookConfigInsecureSsl;
    };
  },
  WebhookConfig
> = {
  id: \\"repos/update-webhook-config-for-repo\\",
};

/**
 * Decline a repository invitation
 */
export const declineInvitationForAuthenticatedUser: ApiHeroEndpoint<
  { invitationId: number },
  void
> = {
  id: \\"repos/decline-invitation-for-authenticated-user\\",
};

/**
 * Accept a repository invitation
 */
export const acceptInvitationForAuthenticatedUser: ApiHeroEndpoint<{ invitationId: number }, void> =
  {
    id: \\"repos/accept-invitation-for-authenticated-user\\",
  };

/**
 * Get an autolink reference of a repository
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const getAutolink: ApiHeroEndpoint<
  { owner: string; repo: string; autolinkId: number },
  Autolink
> = {
  id: \\"repos/get-autolink\\",
};

/**
 * Delete an autolink reference from a repository
 * This deletes a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const deleteAutolink: ApiHeroEndpoint<
  { owner: string; repo: string; autolinkId: number },
  void
> = {
  id: \\"repos/delete-autolink\\",
};

/**
 * Get GitHub Pages build
 */
export const getPagesBuild: ApiHeroEndpoint<
  { owner: string; repo: string; buildId: number },
  PageBuild
> = {
  id: \\"repos/get-pages-build\\",
};

/**
 * Generate release notes content for a release
 * Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
 */
export const generateReleaseNotes: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    body: {
      /**
       * The tag name for the release. This can be an existing tag or a new one.
       */
      tag_name: string;

      /**
       * Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
       */
      target_commitish?: string;

      /**
       * The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
       */
      previous_tag_name?: string;

      /**
       * Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
       */
      configuration_file_path?: string;
    };
  },
  ReleaseNotesContent
> = {
  id: \\"repos/generate-release-notes\\",
};

/**
 * Enable automated security fixes
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)\\".
 */
export const enableAutomatedSecurityFixes: ApiHeroEndpoint<{ owner: string; repo: string }, void> =
  {
    id: \\"repos/enable-automated-security-fixes\\",
  };

/**
 * Disable automated security fixes
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \\"[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)\\".
 */
export const disableAutomatedSecurityFixes: ApiHeroEndpoint<{ owner: string; repo: string }, void> =
  {
    id: \\"repos/disable-automated-security-fixes\\",
  };

/**
 * Rename a branch
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \\"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\\".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the \`contents:write\` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the \`administration:write\` repository permission.
 */
export const renameBranch: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body: {
      /**
       * The new name of the branch.
       */
      new_name: string;
    };
  },
  BranchWithProtection
> = {
  id: \\"repos/rename-branch\\",
};

/**
 * Check if a user is a repository collaborator
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the \`read:org\` and \`repo\` scopes with push access to use this
 * endpoint. GitHub Apps must have the \`members\` organization permission and \`metadata\` repository permission to use this
 * endpoint.
 */
export const checkCollaborator: ApiHeroEndpoint<
  { username: string; owner: string; repo: string },
  void
> = {
  id: \\"repos/check-collaborator\\",
};

/**
 * Add a repository collaborator
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see \\"[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\\"
 *
 * For more information on permission levels, see \\"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
 *
 * \`\`\`
 * Cannot assign {member} permission of {role name}
 * \`\`\`
 *
 * Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Updating an existing collaborator's permission level**
 *
 * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different \`permission\` parameter. The response will be a \`204\`, with no other indication that the permission level changed.
 *
 * **Rate limits**
 *
 * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const addCollaborator: ApiHeroEndpoint<
  {
    username: string;
    owner: string;
    repo: string;
    body?: {
      /**
       * The permission to grant the collaborator. **Only valid on organization-owned repositories.** In addition to the enumerated values, you can also specify a custom repository role name, if the owning organization has defined any.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\" | \\"maintain\\" | \\"triage\\";
    };
  },
  RepositoryInvitation
> = {
  id: \\"repos/add-collaborator\\",
};

/**
 * Remove a repository collaborator
 */
export const removeCollaborator: ApiHeroEndpoint<
  { username: string; owner: string; repo: string },
  void
> = {
  id: \\"repos/remove-collaborator\\",
};

/**
 * Get top referral sources
 * Get the top 10 referrers over the last 14 days.
 */
export const getTopReferrers: ApiHeroEndpoint<
  { owner: string; repo: string },
  Array<ReferrerTraffic>
> = {
  id: \\"repos/get-top-referrers\\",
};

/**
 * List pull requests associated with a commit
 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests.
 */
export const listPullRequestsAssociatedWithCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string; page?: number; perPage?: number },
  Array<PullRequestSimple>
> = {
  id: \\"repos/list-pull-requests-associated-with-commit\\",
};

/**
 * List deliveries for a repository webhook
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 */
export const listWebhookDeliveries: ApiHeroEndpoint<
  { owner: string; repo: string; hookId: number; perPage?: number; cursor?: string },
  Array<HookDeliveryItem>
> = {
  id: \\"repos/list-webhook-deliveries\\",
};

/**
 * Get a release asset
 * To download the asset's binary content, set the \`Accept\` header of the request to [\`application/octet-stream\`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a \`200\` or \`302\` response.
 */
export const getReleaseAsset: ApiHeroEndpoint<
  { owner: string; assetId: number; repo: string },
  ReleaseAsset
> = {
  id: \\"repos/get-release-asset\\",
};

/**
 * Delete a release asset
 */
export const deleteReleaseAsset: ApiHeroEndpoint<
  { owner: string; assetId: number; repo: string },
  void
> = {
  id: \\"repos/delete-release-asset\\",
};

/**
 * Update a release asset
 * Users with push access to the repository can edit a release asset.
 */
export const updateReleaseAsset: ApiHeroEndpoint<
  {
    owner: string;
    assetId: number;
    repo: string;
    body?: {
      /**
       * The file name of the asset.
       */
      name?: string;

      /**
       * An alternate short description of the asset. Used in place of the filename.
       */
      label?: string;

      state?: string;
    };
  },
  ReleaseAsset
> = {
  id: \\"repos/update-release-asset\\",
};

/**
 * Create a repository using a template
 * Creates a new repository using a repository template. Use the \`template_owner\` and \`template_repo\` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the \`is_template\` key is \`true\`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   \`public_repo\` scope or \`repo\` scope to create a public repository. Note: For GitHub AE, use \`repo\` scope to create an internal repository.
 * *   \`repo\` scope to create a private repository
 */
export const createUsingTemplate: ApiHeroEndpoint<
  {
    templateOwner: string;
    templateRepo: string;
    body: {
      /**
       * The name of the new repository.
       */
      name: string;

      /**
       * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
       */
      owner?: string;

      /**
       * Either \`true\` to create a new private repository or \`false\` to create a new public one.
       */
      private?: boolean;

      /**
       * A short description of the new repository.
       */
      description?: string;

      /**
       * Set to \`true\` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: \`false\`.
       */
      include_all_branches?: boolean;
    };
  },
  Repository
> = {
  id: \\"repos/create-using-template\\",
};

/**
 * Get a deployment
 */
export const getDeployment: ApiHeroEndpoint<
  { owner: string; deploymentId: number; repo: string },
  Deployment
> = {
  id: \\"repos/get-deployment\\",
};

/**
 * Delete a deployment
 * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with \`repo\` or \`repo_deployment\` scopes can delete a deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see \\"[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)\\" and \\"[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status).\\"
 */
export const deleteDeployment: ApiHeroEndpoint<
  { owner: string; deploymentId: number; repo: string },
  void
> = {
  id: \\"repos/delete-deployment\\",
};

/**
 * Delete a repository invitation
 */
export const deleteInvitation: ApiHeroEndpoint<
  { owner: string; invitationId: number; repo: string },
  void
> = {
  id: \\"repos/delete-invitation\\",
};

/**
 * Update a repository invitation
 */
export const updateInvitation: ApiHeroEndpoint<
  {
    owner: string;
    invitationId: number;
    repo: string;
    body?: {
      /**
       * The permissions that the associated user will have on the repository. Valid values are \`read\`, \`write\`, \`maintain\`, \`triage\`, and \`admin\`.
       */
      permissions?: \\"read\\" | \\"write\\" | \\"maintain\\" | \\"triage\\" | \\"admin\\";
    };
  },
  RepositoryInvitation
> = {
  id: \\"repos/update-invitation\\",
};

/**
 * Get branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  BranchProtection
> = {
  id: \\"repos/get-branch-protection\\",
};

/**
 * Update branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of \`users\` and \`teams\` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const updateBranchProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body: {
      /**
       * Restrict who can push to the protected branch. User, app, and team \`restrictions\` are only available for organization-owned repositories. Set to \`null\` to disable.
       */
      restrictions: any;

      /**
       * Enforce all configured restrictions for administrators. Set to \`true\` to enforce required status checks for repository administrators. Set to \`null\` to disable.
       */
      enforce_admins: boolean;

      /**
       * Allows deletion of the protected branch by anyone with write access to the repository. Set to \`false\` to prevent deletion of the protected branch. Default: \`false\`. For more information, see \\"[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\\" in the GitHub Help documentation.
       */
      allow_deletions?: boolean;

      /**
       * If set to \`true\`, the \`restrictions\` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to \`true\` to restrict new branch creation. Default: \`false\`.
       */
      block_creations?: boolean;

      /**
       * Permits force pushes to the protected branch by anyone with write access to the repository. Set to \`true\` to allow force pushes. Set to \`false\` or \`null\` to block force pushes. Default: \`false\`. For more information, see \\"[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\\" in the GitHub Help documentation.\\"
       */
      allow_force_pushes?: boolean;

      /**
       * Require status checks to pass before merging. Set to \`null\` to disable.
       */
      required_status_checks: any;

      /**
       * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to \`true\` to enforce a linear commit history. Set to \`false\` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: \`false\`. For more information, see \\"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\\" in the GitHub Help documentation.
       */
      required_linear_history?: boolean;

      /**
       * Require at least one approving review on a pull request, before merging. Set to \`null\` to disable.
       */
      required_pull_request_reviews: any;

      /**
       * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to \`false\` to disable. Default: \`false\`.
       */
      required_conversation_resolution?: boolean;
    };
  },
  ProtectedBranch
> = {
  id: \\"repos/update-branch-protection\\",
};

/**
 * Delete branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deleteBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-branch-protection\\",
};

/**
 * List release assets
 */
export const listReleaseAssets: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number; page?: number; perPage?: number },
  Array<ReleaseAsset>
> = {
  id: \\"repos/list-release-assets\\",
};

/**
 * Upload a release asset
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the \`upload_url\` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required \`Content-Length\` header automatically. Use the required \`Content-Type\` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * \`application/zip\`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a \`502 Bad Gateway\` status. This may leave an empty asset with a state of \`starter\`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \\"[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)\\"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const uploadReleaseAsset: ApiHeroEndpoint<
  { owner: string; repo: string; releaseId: number; name: string; label?: string; body?: string },
  ReleaseAsset
> = {
  id: \\"repos/upload-release-asset\\",
};

/**
 * List commit comments
 * Use the \`:commit_sha\` to specify the commit that will have its comments listed.
 */
export const listCommentsForCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string; page?: number; perPage?: number },
  Array<CommitComment>
> = {
  id: \\"repos/list-comments-for-commit\\",
};

/**
 * Create a commit comment
 * Create a comment for a commit using its \`:commit_sha\`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createCommitComment: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    commitSha: string;
    body: {
      /**
       * The contents of the comment.
       */
      body: string;

      /**
       * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
       */
      line?: number;

      /**
       * Relative path of the file to comment on.
       */
      path?: string;

      /**
       * Line index in the diff to comment on.
       */
      position?: number;
    };
  },
  CommitComment
> = {
  id: \\"repos/create-commit-comment\\",
};

/**
 * Get an environment
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
 */
export const getEnvironment: ApiHeroEndpoint<
  { environmentName: string; owner: string; repo: string },
  Environment
> = {
  id: \\"repos/get-environment\\",
};

/**
 * Create or update an environment
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see \\"[Environments](/actions/reference/environments#environment-protection-rules).\\"
 *
 * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see \\"[Environments](/actions/reference/environments#deployment-branches).\\"
 *
 * **Note:** To create or update secrets for an environment, see \\"[Secrets](/rest/reference/actions#secrets).\\"
 *
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const createOrUpdateEnvironment: ApiHeroEndpoint<
  { environmentName: string; owner: string; repo: string; body?: any | null },
  Environment
> = {
  id: \\"repos/create-or-update-environment\\",
};

/**
 * Delete an environment
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const deleteAnEnvironment: ApiHeroEndpoint<
  { environmentName: string; owner: string; repo: string },
  void
> = {
  id: \\"repos/delete-an-environment\\",
};

/**
 * Get repository permissions for a user
 * Checks the repository permission of a collaborator. The possible repository permissions are \`admin\`, \`write\`, \`read\`, and \`none\`.
 */
export const getCollaboratorPermissionLevel: ApiHeroEndpoint<
  { username: string; owner: string; repo: string },
  RepositoryCollaboratorPermission
> = {
  id: \\"repos/get-collaborator-permission-level\\",
};

/**
 * Delete a tag protection state for a repository
 * This deletes a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const deleteTagProtection: ApiHeroEndpoint<
  { owner: string; tagProtectionId: number; repo: string },
  void
> = {
  id: \\"repos/delete-tag-protection\\",
};

/**
 * List deployment statuses
 * Users with pull access can view deployment statuses for a deployment:
 */
export const listDeploymentStatuses: ApiHeroEndpoint<
  { owner: string; deploymentId: number; repo: string; page?: number; perPage?: number },
  Array<DeploymentStatus>
> = {
  id: \\"repos/list-deployment-statuses\\",
};

/**
 * Create a deployment status
 * Users with \`push\` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require \`read & write\` access to \\"Deployments\\" and \`read-only\` access to \\"Repo contents\\" (for private repos). OAuth Apps require the \`repo_deployment\` scope.
 */
export const createDeploymentStatus: ApiHeroEndpoint<
  {
    owner: string;
    deploymentId: number;
    repo: string;
    body: {
      /**
       * The state of the status. When you set a transient deployment to \`inactive\`, the deployment will be shown as \`destroyed\` in GitHub.
       */
      state: \\"error\\" | \\"failure\\" | \\"inactive\\" | \\"in_progress\\" | \\"queued\\" | \\"pending\\" | \\"success\\";

      /**
       * The full URL of the deployment's output. This parameter replaces \`target_url\`. We will continue to accept \`target_url\` to support legacy uses, but we recommend replacing \`target_url\` with \`log_url\`. Setting \`log_url\` will automatically set \`target_url\` to the same value. Default: \`\\"\\"\`
       */
      log_url?: string;

      /**
       * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the \`log_url\` parameter, which replaces \`target_url\`.
       */
      target_url?: string;

      /**
       * A short description of the status. The maximum description length is 140 characters.
       */
      description?: string;

      /**
       * Name for the target deployment environment, which can be changed when setting a deploy status. For example, \`production\`, \`staging\`, or \`qa\`.
       */
      environment?: \\"production\\" | \\"staging\\" | \\"qa\\";

      /**
       * Adds a new \`inactive\` status to all prior non-transient, non-production environment deployments with the same repository and \`environment\` name as the created status's deployment. An \`inactive\` status is only added to deployments that had a \`success\` state. Default: \`true\`
       */
      auto_inactive?: boolean;

      /**
       * Sets the URL for accessing your environment. Default: \`\\"\\"\`
       */
      environment_url?: string;
    };
  },
  DeploymentStatus
> = {
  id: \\"repos/create-deployment-status\\",
};

/**
 * List branches for HEAD commit
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const listBranchesForHeadCommit: ApiHeroEndpoint<
  { owner: string; repo: string; commitSha: string },
  Array<BranchShort>
> = {
  id: \\"repos/list-branches-for-head-commit\\",
};

/**
 * Get a delivery for a repository webhook
 * Returns a delivery for a webhook configured in a repository.
 */
export const getWebhookDelivery: ApiHeroEndpoint<
  { owner: string; deliveryId: number; repo: string; hookId: number },
  HookDelivery
> = {
  id: \\"repos/get-webhook-delivery\\",
};

/**
 * Get access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams \`restrictions\` are only available for organization-owned repositories.
 */
export const getAccessRestrictions: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  BranchRestrictionPolicy
> = {
  id: \\"repos/get-access-restrictions\\",
};

/**
 * Delete access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const deleteAccessRestrictions: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-access-restrictions\\",
};

/**
 * Get admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getAdminBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/get-admin-branch-protection\\",
};

/**
 * Set admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const setAdminBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/set-admin-branch-protection\\",
};

/**
 * Delete admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const deleteAdminBranchProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-admin-branch-protection\\",
};

/**
 * Get apps with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 */
export const getAppsWithAccessToProtectedBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<Integration>
> = {
  id: \\"repos/get-apps-with-access-to-protected-branch\\",
};

/**
 * Add app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const addAppAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * apps parameter
           */
          apps: Array<string>;
        }
      | Array<string>;
  },
  Array<Integration>
> = {
  id: \\"repos/add-app-access-restrictions\\",
};

/**
 * Set app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const setAppAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * apps parameter
           */
          apps: Array<string>;
        }
      | Array<string>;
  },
  Array<Integration>
> = {
  id: \\"repos/set-app-access-restrictions\\",
};

/**
 * Remove app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const removeAppAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * apps parameter
           */
          apps: Array<string>;
        }
      | Array<string>;
  },
  Array<Integration>
> = {
  id: \\"repos/remove-app-access-restrictions\\",
};

/**
 * Get teams with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const getTeamsWithAccessToProtectedBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<Team>
> = {
  id: \\"repos/get-teams-with-access-to-protected-branch\\",
};

/**
 * Add team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | \`array\` | The teams that can have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const addTeamAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * teams parameter
           */
          teams: Array<string>;
        }
      | Array<string>;
  },
  Array<Team>
> = {
  id: \\"repos/add-team-access-restrictions\\",
};

/**
 * Set team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | \`array\` | The teams that can have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const setTeamAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * teams parameter
           */
          teams: Array<string>;
        }
      | Array<string>;
  },
  Array<Team>
> = {
  id: \\"repos/set-team-access-restrictions\\",
};

/**
 * Remove team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 *
 * | Type    | Description                                                                                                                                         |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Teams that should no longer have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const removeTeamAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * teams parameter
           */
          teams: Array<string>;
        }
      | Array<string>;
  },
  Array<Team>
> = {
  id: \\"repos/remove-team-access-restrictions\\",
};

/**
 * Get users with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const getUsersWithAccessToProtectedBranch: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<SimpleUser>
> = {
  id: \\"repos/get-users-with-access-to-protected-branch\\",
};

/**
 * Add user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const addUserAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * users parameter
           */
          users: Array<string>;
        }
      | Array<string>;
  },
  Array<SimpleUser>
> = {
  id: \\"repos/add-user-access-restrictions\\",
};

/**
 * Set user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const setUserAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * users parameter
           */
          users: Array<string>;
        }
      | Array<string>;
  },
  Array<SimpleUser>
> = {
  id: \\"repos/set-user-access-restrictions\\",
};

/**
 * Remove user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | \`array\` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const removeUserAccessRestrictions: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * users parameter
           */
          users: Array<string>;
        }
      | Array<string>;
  },
  Array<SimpleUser>
> = {
  id: \\"repos/remove-user-access-restrictions\\",
};

/**
 * Get commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of \`true\` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const getCommitSignatureProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/get-commit-signature-protection\\",
};

/**
 * Create commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const createCommitSignatureProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchAdminEnforced
> = {
  id: \\"repos/create-commit-signature-protection\\",
};

/**
 * Delete commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const deleteCommitSignatureProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-commit-signature-protection\\",
};

/**
 * Get a deployment status
 * Users with pull access can view a deployment status for a deployment:
 */
export const getDeploymentStatus: ApiHeroEndpoint<
  { owner: string; deploymentId: number; repo: string; statusId: number },
  DeploymentStatus
> = {
  id: \\"repos/get-deployment-status\\",
};

/**
 * Redeliver a delivery for a repository webhook
 * Redeliver a webhook delivery for a webhook configured in a repository.
 */
export const redeliverWebhookDelivery: ApiHeroEndpoint<
  { owner: string; deliveryId: number; repo: string; hookId: number },
  {}
> = {
  id: \\"repos/redeliver-webhook-delivery\\",
};

/**
 * Get status checks protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getStatusChecksProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  StatusCheckPolicy
> = {
  id: \\"repos/get-status-checks-protection\\",
};

/**
 * Remove status check protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const removeStatusCheckProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/remove-status-check-protection\\",
};

/**
 * Update status check protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const updateStatusCheckProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?: {
      /**
       * The list of status checks to require in order to merge into this branch.
       */
      checks?: Array<{
        /**
         * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
         */
        app_id?: number;

        /**
         * The name of the required check
         */
        context: string;
      }>;

      /**
       * Require branches to be up to date before merging.
       */
      strict?: boolean;

      /** 
* **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use \`checks\` instead of \`contexts\` for more fine-grained control.

* @deprecated
*/
      contexts?: Array<string>;
    };
  },
  StatusCheckPolicy
> = {
  id: \\"repos/update-status-check-protection\\",
};

/**
 * Get pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getPullRequestReviewProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  ProtectedBranchPullRequestReview
> = {
  id: \\"repos/get-pull-request-review-protection\\",
};

/**
 * Delete pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deletePullRequestReviewProtection: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  void
> = {
  id: \\"repos/delete-pull-request-review-protection\\",
};

/**
 * Update pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of \`users\` and \`teams\` replaces their previous values.
 */
export const updatePullRequestReviewProtection: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?: {
      /**
       * Set to \`true\` if you want to automatically dismiss approving reviews when someone pushes a new commit.
       */
      dismiss_stale_reviews?: boolean;

      /**
       * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty \`dismissal_restrictions\` object to disable. User and team \`dismissal_restrictions\` are only available for organization-owned repositories. Omit this parameter for personal repositories.
       */
      dismissal_restrictions?: {
        /**
         * The list of app \`slug\`s with dismissal access
         */
        apps?: Array<string>;

        /**
         * The list of team \`slug\`s with dismissal access
         */
        teams?: Array<string>;

        /**
         * The list of user \`login\`s with dismissal access
         */
        users?: Array<string>;
      };

      /**
       * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
       */
      require_code_owner_reviews?: boolean;

      /**
       * Allow specific users, teams, or apps to bypass pull request requirements.
       */
      bypass_pull_request_allowances?: {
        /**
         * The list of app \`slug\`s allowed to bypass pull request requirements.
         */
        apps?: Array<string>;

        /**
         * The list of team \`slug\`s allowed to bypass pull request requirements.
         */
        teams?: Array<string>;

        /**
         * The list of user \`login\`s allowed to bypass pull request requirements.
         */
        users?: Array<string>;
      };

      /**
       * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
       */
      required_approving_review_count?: number;
    };
  },
  ProtectedBranchPullRequestReview
> = {
  id: \\"repos/update-pull-request-review-protection\\",
};

/**
 * Get all status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getAllStatusCheckContexts: ApiHeroEndpoint<
  { owner: string; repo: string; branch: string },
  Array<string>
> = {
  id: \\"repos/get-all-status-check-contexts\\",
};

/**
 * Add status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const addStatusCheckContexts: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * contexts parameter
           */
          contexts: Array<string>;
        }
      | Array<string>;
  },
  Array<string>
> = {
  id: \\"repos/add-status-check-contexts\\",
};

/**
 * Set status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const setStatusCheckContexts: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * contexts parameter
           */
          contexts: Array<string>;
        }
      | Array<string>;
  },
  Array<string>
> = {
  id: \\"repos/set-status-check-contexts\\",
};

/**
 * Remove status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const removeStatusCheckContexts: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    branch: string;
    body?:
      | {
          /**
           * contexts parameter
           */
          contexts: Array<string>;
        }
      | Array<string>;
  },
  Array<string>
> = {
  id: \\"repos/remove-status-check-contexts\\",
};
",
  "scim.ts" => "import { ScimUser, ScimUserList, ApiHeroEndpoint } from \\"./@types\\";

/**
 * List SCIM provisioned identities
 * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the \`filter\` parameter, the resources for all matching provisions members are returned.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 * - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
 * - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 * - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a \`null\` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
 *
 * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the \`null\` external identity entry is created and the user is prompted to sign in to their GitHub account:
 * - If the user signs in, their GitHub account is linked to this entry.
 * - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity \`null\` entry remains in place.
 */
export const listProvisionedIdentities: ApiHeroEndpoint<
  { org: string; count?: number; startIndex?: number; filter?: string },
  ScimUserList
> = {
  id: \\"scim/list-provisioned-identities\\",
};

/**
 * Provision and invite a SCIM user
 * Provision organization membership for a user, and send an activation email to the email address.
 */
export const provisionAndInviteUser: ApiHeroEndpoint<
  {
    org: string;
    body: {
      name: {
        formatted?: string;

        givenName: string;

        familyName: string;
      };

      active?: boolean;

      /**
       * user emails
       */
      emails: Array<{
        type?: string;

        value: string;

        primary?: boolean;
      }>;

      groups?: Array<string>;

      schemas?: Array<string>;

      /**
       * Configured by the admin. Could be an email, login, or username
       */
      userName: string;

      externalId?: string;

      /**
       * The name of the user, suitable for display to end-users
       */
      displayName?: string;
    };
  },
  ScimUser
> = {
  id: \\"scim/provision-and-invite-user\\",
};

/**
 * Get SCIM provisioning information for a user
 */
export const getProvisioningInformationForUser: ApiHeroEndpoint<
  { org: string; scimUserId: string },
  ScimUser
> = {
  id: \\"scim/get-provisioning-information-for-user\\",
};

/**
 * Update a provisioned organization membership
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: \`userName\`, \`name\`, and \`emails\`.
 *
 * **Warning:** Setting \`active: false\` removes the user from the organization, deletes the external identity, and deletes the associated \`{scim_user_id}\`.
 */
export const setInformationForProvisionedUser: ApiHeroEndpoint<
  {
    org: string;
    scimUserId: string;
    body: {
      name: {
        formatted?: string;

        givenName: string;

        familyName: string;
      };

      active?: boolean;

      /**
       * user emails
       */
      emails: Array<{
        type?: string;

        value: string;

        primary?: boolean;
      }>;

      groups?: Array<string>;

      schemas?: Array<string>;

      /**
       * Configured by the admin. Could be an email, login, or username
       */
      userName: string;

      externalId?: string;

      /**
       * The name of the user, suitable for display to end-users
       */
      displayName?: string;
    };
  },
  ScimUser
> = {
  id: \\"scim/set-information-for-provisioned-user\\",
};

/**
 * Delete a SCIM user from an organization
 */
export const deleteUserFromOrg: ApiHeroEndpoint<{ org: string; scimUserId: string }, void> = {
  id: \\"scim/delete-user-from-org\\",
};

/**
 * Update an attribute for a SCIM user
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific \`Operations\` JSON format that contains at least one of the \`add\`, \`remove\`, or \`replace\` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM \`path\` selectors that include filters are not supported. For example, a \`path\` selector defined as \`\\"path\\": \\"emails[type eq \\\\\\"work\\\\\\"]\\"\` will not work.
 *
 * **Warning:** If you set \`active:false\` using the \`replace\` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated \`:scim_user_id\`.
 *
 * \`\`\`
 * {
 * \\"Operations\\":[{
 * \\"op\\":\\"replace\\",
 * \\"value\\":{
 * \\"active\\":false
 * }
 * }]
 * }
 * \`\`\`
 */
export const updateAttributeForUser: ApiHeroEndpoint<
  {
    org: string;
    scimUserId: string;
    body: {
      schemas?: Array<string>;

      /**
       * Set of operations to be performed
       */
      Operations: Array<{
        op: \\"add\\" | \\"remove\\" | \\"replace\\";

        path?: string;

        value?:
          | {
              active?: boolean;

              userName?: string;

              givenName?: string;

              externalId?: string;

              familyName?: string;
            }
          | string;
      }>;
    };
  },
  ScimUser
> = {
  id: \\"scim/update-attribute-for-user\\",
};
",
  "search.ts" => "import {
  CodeSearchResultItem,
  CommitSearchResultItem,
  IssueSearchResultItem,
  LabelSearchResultItem,
  RepoSearchResultItem,
  TopicSearchResultItem,
  UserSearchResultItem,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Search code
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the \`addClass\` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * \`q=addClass+in:file+language:js+repo:jquery/jquery\`
 *
 * This query searches for the keyword \`addClass\` within a file's contents. The query limits the search to files where the language is JavaScript in the \`jquery/jquery\` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the \`master\` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [\`language:go\`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [\`amazing
 * language:go\`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const code: ApiHeroEndpoint<
  { q: string; page?: number; perPage?: number; order?: \\"desc\\" | \\"asc\\"; sort?: \\"indexed\\" },
  {
    items: Array<CodeSearchResultItem>;

    total_count: number;

    incomplete_results: boolean;
  }
> = {
  id: \\"search/code\\",
};

/**
 * Search users
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the \`text-match\` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * \`q=tom+repos:%3E42+followers:%3E1000\`
 *
 * This query searches for users with the name \`tom\`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const users: ApiHeroEndpoint<
  {
    q: string;
    page?: number;
    sort?: \\"followers\\" | \\"repositories\\" | \\"joined\\";
    perPage?: number;
    order?: \\"desc\\" | \\"asc\\";
  },
  {
    items: Array<UserSearchResultItem>;

    total_count: number;

    incomplete_results: boolean;
  }
> = {
  id: \\"search/users\\",
};

/**
 * Search issues and pull requests
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * \`q=windows+label:bug+language:python+state:open&sort=created&order=asc\`
 *
 * This query searches for the keyword \`windows\`, within any open issue that is labeled as \`bug\`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the \`is:issue\` or \`is:pull-request\` qualifier will receive an HTTP \`422 Unprocessable Entity\` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the \`is\` qualifier, see \\"[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\\"
 */
export const issuesAndPullRequests: ApiHeroEndpoint<
  {
    q: string;
    page?: number;
    sort?:
      | \\"comments\\"
      | \\"reactions\\"
      | \\"reactions-+1\\"
      | \\"reactions--1\\"
      | \\"reactions-smile\\"
      | \\"reactions-thinking_face\\"
      | \\"reactions-heart\\"
      | \\"reactions-tada\\"
      | \\"interactions\\"
      | \\"created\\"
      | \\"updated\\";
    perPage?: number;
    order?: \\"desc\\" | \\"asc\\";
  },
  {
    items: Array<IssueSearchResultItem>;

    total_count: number;

    incomplete_results: boolean;
  }
> = {
  id: \\"search/issues-and-pull-requests\\",
};

/**
 * Search labels
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the \`linguist\` repository that match \`bug\`, \`defect\`, or \`enhancement\`. Your query might look like this:
 *
 * \`q=bug+defect+enhancement&repository_id=64778136\`
 *
 * The labels that best match the query appear first in the search results.
 */
export const labels: ApiHeroEndpoint<
  {
    q: string;
    repositoryId: number;
    page?: number;
    sort?: \\"created\\" | \\"updated\\";
    perPage?: number;
    order?: \\"desc\\" | \\"asc\\";
  },
  {
    items: Array<LabelSearchResultItem>;

    total_count: number;

    incomplete_results: boolean;
  }
> = {
  id: \\"search/labels\\",
};

/**
 * Search topics
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See \\"[Searching topics](https://docs.github.com/articles/searching-topics/)\\" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\\\\_description**, **description**, **name**, or **display\\\\_name** field when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * \`q=ruby+is:featured\`
 *
 * This query searches for topics with the keyword \`ruby\` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const topics: ApiHeroEndpoint<
  { q: string; page?: number; perPage?: number },
  {
    items: Array<TopicSearchResultItem>;

    total_count: number;

    incomplete_results: boolean;
  }
> = {
  id: \\"search/topics\\",
};

/**
 * Search commits
 * Find commits via various criteria on the default branch (usually \`master\`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * \`q=repo:octocat/Spoon-Knife+css\`
 */
export const commits: ApiHeroEndpoint<
  {
    q: string;
    page?: number;
    sort?: \\"author-date\\" | \\"committer-date\\";
    perPage?: number;
    order?: \\"desc\\" | \\"asc\\";
  },
  {
    items: Array<CommitSearchResultItem>;

    total_count: number;

    incomplete_results: boolean;
  }
> = {
  id: \\"search/commits\\",
};

/**
 * Search repositories
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * \`q=tetris+language:assembly&sort=stars&order=desc\`
 *
 * This query searches for repositories with the word \`tetris\` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 */
export const repos: ApiHeroEndpoint<
  {
    q: string;
    page?: number;
    perPage?: number;
    order?: \\"desc\\" | \\"asc\\";
    sort?: \\"stars\\" | \\"forks\\" | \\"help-wanted-issues\\" | \\"updated\\";
  },
  {
    items: Array<RepoSearchResultItem>;

    total_count: number;

    incomplete_results: boolean;
  }
> = {
  id: \\"search/repos\\",
};
",
  "secret-scanning.ts" => "import {
  AlertNumber,
  OrganizationSecretScanningAlert,
  SecretScanningAlert,
  SecretScanningAlertResolution,
  SecretScanningAlertState,
  SecretScanningLocation,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List secret scanning alerts for an organization
 * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const listAlertsForOrg: ApiHeroEndpoint<
  {
    org: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    before?: string;
    resolution?: string;
    state?: \\"open\\" | \\"resolved\\";
    secretType?: string;
    sort?: \\"created\\" | \\"updated\\";
    after?: string;
  },
  Array<OrganizationSecretScanningAlert>
> = {
  id: \\"secret-scanning/list-alerts-for-org\\",
};

/**
 * List secret scanning alerts for a repository
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const listAlertsForRepo: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    before?: string;
    resolution?: string;
    state?: \\"open\\" | \\"resolved\\";
    secretType?: string;
    sort?: \\"created\\" | \\"updated\\";
    after?: string;
  },
  Array<SecretScanningAlert>
> = {
  id: \\"secret-scanning/list-alerts-for-repo\\",
};

/**
 * List secret scanning alerts for an enterprise
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the \`repo\` scope or \`security_events\` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 */
export const listAlertsForEnterprise: ApiHeroEndpoint<
  {
    enterprise: string;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    before?: string;
    resolution?: string;
    state?: \\"open\\" | \\"resolved\\";
    after?: string;
    secretType?: string;
    sort?: \\"created\\" | \\"updated\\";
  },
  Array<OrganizationSecretScanningAlert>
> = {
  id: \\"secret-scanning/list-alerts-for-enterprise\\",
};

/**
 * Get a secret scanning alert
 * Gets a single secret scanning alert detected in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const getAlert: ApiHeroEndpoint<
  { owner: string; repo: string; alertNumber: AlertNumber },
  SecretScanningAlert
> = {
  id: \\"secret-scanning/get-alert\\",
};

/**
 * Update a secret scanning alert
 * Updates the status of a secret scanning alert in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` write permission to use this endpoint.
 */
export const updateAlert: ApiHeroEndpoint<
  {
    owner: string;
    repo: string;
    alertNumber: AlertNumber;
    body: {
      state: SecretScanningAlertState;

      resolution?: SecretScanningAlertResolution;
    };
  },
  SecretScanningAlert
> = {
  id: \\"secret-scanning/update-alert\\",
};

/**
 * List locations for a secret scanning alert
 * Lists all locations for a given secret scanning alert for an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the \`repo\` scope or \`security_events\` scope.
 * For public repositories, you may instead use the \`public_repo\` scope.
 *
 * GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
 */
export const listLocationsForAlert: ApiHeroEndpoint<
  { owner: string; repo: string; alertNumber: AlertNumber; page?: number; perPage?: number },
  Array<SecretScanningLocation>
> = {
  id: \\"secret-scanning/list-locations-for-alert\\",
};
",
  "server-statistics.ts" => "import { ServerStatistics, ApiHeroEndpoint } from \\"./@types\\";

/**
 * Get GitHub Enterprise Server statistics
 * Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.
 *
 * To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \\"[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\\" in the GitHub Enterprise Server documentation.
 *
 * You'll need to use a personal access token:
 * - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the \`read:enterprise\` permission.
 * - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the \`read:org\` permission.
 *
 * For more information on creating a personal access token, see \\"[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\\"
 */
export const getServerStatistics: ApiHeroEndpoint<
  { enterpriseOrOrg: string; dateStart?: string; dateEnd?: string },
  ServerStatistics
> = {
  id: \\"enterprise-admin/get-server-statistics\\",
};
",
  "teams.ts" => "import {
  ExternalGroup,
  ExternalGroups,
  GroupMapping,
  MinimalRepository,
  OrganizationInvitation,
  SimpleUser,
  Team,
  TeamDiscussion,
  TeamDiscussionComment,
  TeamFull,
  TeamMembership,
  TeamProject,
  TeamRepository,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * List teams for the authenticated user
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires \`user\`, \`repo\`, or \`read:org\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const listForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<TeamFull>
> = {
  id: \\"teams/list-for-authenticated-user\\",
};

/** * @deprecated
 * Get a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const getLegacy: ApiHeroEndpoint<{ teamId: number }, TeamFull> = {
  id: \\"teams/get-legacy\\",
};

/** * @deprecated
 * Delete a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const deleteLegacy: ApiHeroEndpoint<{ teamId: number }, void> = {
  id: \\"teams/delete-legacy\\",
};

/** * @deprecated
 * Update a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the \`privacy\` for parent teams cannot be \`secret\`.
 */
export const updateLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    body: {
      /**
       * The name of the team.
       */
      name: string;

      /** 
* The level of privacy this team should have. Editing teams without specifying this parameter leaves \`privacy\` intact. The options are:  
**For a non-nested team:**  
\\\\* \`secret\` - only visible to organization owners and members of this team.  
\\\\* \`closed\` - visible to all members of this organization.  
**For a parent or child team:**  
\\\\* \`closed\` - visible to all members of this organization.
*/
      privacy?: \\"secret\\" | \\"closed\\";

      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\";

      /**
       * The description of the team.
       */
      description?: string;

      /**
       * The ID of a team to set as the parent team.
       */
      parent_team_id?: number;
    };
  },
  TeamFull
> = {
  id: \\"teams/update-legacy\\",
};

/**
 * List teams
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const list: ApiHeroEndpoint<
  { org: string; page?: number; perPage?: number },
  Array<Team>
> = {
  id: \\"teams/list\\",
};

/**
 * Create a team
 * To create a team, the authenticated user must be a member or owner of \`{org}\`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \\"[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\\"
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of \`maintainers\`. For more information, see \\"[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\\".
 */
export const create: ApiHeroEndpoint<
  {
    org: string;
    body: {
      /**
       * The name of the team.
       */
      name: string;

      /** 
* The level of privacy this team should have. The options are:  
**For a non-nested team:**  
\\\\* \`secret\` - only visible to organization owners and members of this team.  
\\\\* \`closed\` - visible to all members of this organization.  
Default: \`secret\`  
**For a parent or child team:**  
\\\\* \`closed\` - visible to all members of this organization.  
Default for child team: \`closed\`
*/
      privacy?: \\"secret\\" | \\"closed\\";

      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
       */
      permission?: \\"pull\\" | \\"push\\";

      /**
       * The full name (e.g., \\"organization-name/repository-name\\") of repositories to add the team to.
       */
      repo_names?: Array<string>;

      /**
       * The description of the team.
       */
      description?: string;

      /**
       * List GitHub IDs for organization members who will become team maintainers.
       */
      maintainers?: Array<string>;

      /**
       * The ID of a team to set as the parent team.
       */
      parent_team_id?: number;
    };
  },
  TeamFull
> = {
  id: \\"teams/create\\",
};

/** * @deprecated
 * List team repositories (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const listReposLegacy: ApiHeroEndpoint<
  { teamId: number; page?: number; perPage?: number },
  Array<MinimalRepository>
> = {
  id: \\"teams/list-repos-legacy\\",
};

/** * @deprecated
 * List child teams (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List child teams\`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const listChildLegacy: ApiHeroEndpoint<
  { teamId: number; page?: number; perPage?: number },
  Array<Team>
> = {
  id: \\"teams/list-child-legacy\\",
};

/** * @deprecated
 * List team members (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List team members\`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const listMembersLegacy: ApiHeroEndpoint<
  { teamId: number; page?: number; perPage?: number; role?: \\"member\\" | \\"maintainer\\" | \\"all\\" },
  Array<SimpleUser>
> = {
  id: \\"teams/list-members-legacy\\",
};

/** * @deprecated
 * List team projects (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List team projects\`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const listProjectsLegacy: ApiHeroEndpoint<
  { teamId: number; page?: number; perPage?: number },
  Array<TeamProject>
> = {
  id: \\"teams/list-projects-legacy\\",
};

/**
 * List external groups in an organization
 * Lists external groups available in an organization. You can query the groups using the \`display_name\` parameter, only groups with a \`group_name\` containing the text provided in the \`display_name\` parameter will be returned.  You can also limit your page results using the \`per_page\` parameter. GitHub generates a url-encoded \`page\` token using a cursor value for where the next page begins. For more information on cursor pagination, see \\"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\\"
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const listExternalIdpGroupsForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; displayName?: string; page?: number },
  ExternalGroups
> = {
  id: \\"teams/list-external-idp-groups-for-org\\",
};

/**
 * List IdP groups for an organization
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups available in an organization. You can limit your page results using the \`per_page\` parameter. GitHub generates a url-encoded \`page\` token using a cursor value for where the next page begins. For more information on cursor pagination, see \\"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\\"
 */
export const listIdpGroupsForOrg: ApiHeroEndpoint<
  { org: string; perPage?: number; page?: string },
  GroupMapping
> = {
  id: \\"teams/list-idp-groups-for-org\\",
};

/** * @deprecated
 * List discussions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List discussions\`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listDiscussionsLegacy: ApiHeroEndpoint<
  { teamId: number; page?: number; direction?: \\"asc\\" | \\"desc\\"; perPage?: number },
  Array<TeamDiscussion>
> = {
  id: \\"teams/list-discussions-legacy\\",
};

/** * @deprecated
 * Create a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create a discussion\`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    body: {
      /**
       * The discussion post's body text.
       */
      body: string;

      /**
       * The discussion post's title.
       */
      title: string;

      /**
       * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to \`true\` to create a private post.
       */
      private?: boolean;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/create-discussion-legacy\\",
};

/** * @deprecated
 * List pending team invitations (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List pending team invitations\`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
 */
export const listPendingInvitationsLegacy: ApiHeroEndpoint<
  { teamId: number; page?: number; perPage?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"teams/list-pending-invitations-legacy\\",
};

/**
 * Get a team by name
 * Gets a team using the team's \`slug\`. GitHub generates the \`slug\` from the team \`name\`.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}\`.
 */
export const getByName: ApiHeroEndpoint<{ teamSlug: string; org: string }, TeamFull> = {
  id: \\"teams/get-by-name\\",
};

/**
 * Delete a team
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}\`.
 */
export const deleteInOrg: ApiHeroEndpoint<{ teamSlug: string; org: string }, void> = {
  id: \\"teams/delete-in-org\\",
};

/**
 * Update a team
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}\`.
 */
export const updateInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    body?: {
      /**
       * The name of the team.
       */
      name?: string;

      /** 
* The level of privacy this team should have. Editing teams without specifying this parameter leaves \`privacy\` intact. When a team is nested, the \`privacy\` for parent teams cannot be \`secret\`. The options are:  
**For a non-nested team:**  
\\\\* \`secret\` - only visible to organization owners and members of this team.  
\\\\* \`closed\` - visible to all members of this organization.  
**For a parent or child team:**  
\\\\* \`closed\` - visible to all members of this organization.
*/
      privacy?: \\"secret\\" | \\"closed\\";

      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\";

      /**
       * The description of the team.
       */
      description?: string;

      /**
       * The ID of a team to set as the parent team.
       */
      parent_team_id?: number;
    };
  },
  TeamFull
> = {
  id: \\"teams/update-in-org\\",
};

/**
 * List team repositories
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/repos\`.
 */
export const listReposInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; page?: number; perPage?: number },
  Array<MinimalRepository>
> = {
  id: \\"teams/list-repos-in-org\\",
};

/**
 * List child teams
 * Lists the child teams of the team specified by \`{team_slug}\`.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/teams\`.
 */
export const listChildInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; page?: number; perPage?: number },
  Array<Team>
> = {
  id: \\"teams/list-child-in-org\\",
};

/** * @deprecated
 * Get team member (Legacy)
 * The \\"Get team member\\" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const getMemberLegacy: ApiHeroEndpoint<{ username: string; teamId: number }, void> = {
  id: \\"teams/get-member-legacy\\",
};

/** * @deprecated
 * Add team member (Legacy)
 * The \\"Add team member\\" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const addMemberLegacy: ApiHeroEndpoint<{ username: string; teamId: number }, void> = {
  id: \\"teams/add-member-legacy\\",
};

/** * @deprecated
 * Remove team member (Legacy)
 * The \\"Remove team member\\" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 */
export const removeMemberLegacy: ApiHeroEndpoint<{ username: string; teamId: number }, void> = {
  id: \\"teams/remove-member-legacy\\",
};

/**
 * Get an external group
 * Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const externalIdpGroupInfoForOrg: ApiHeroEndpoint<
  { groupId: number; org: string },
  ExternalGroup
> = {
  id: \\"teams/external-idp-group-info-for-org\\",
};

/**
 * List team members
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const listMembersInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    page?: number;
    perPage?: number;
    role?: \\"member\\" | \\"maintainer\\" | \\"all\\";
  },
  Array<SimpleUser>
> = {
  id: \\"teams/list-members-in-org\\",
};

/** * @deprecated
 * Check team permissions for a repository (Legacy)
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
 */
export const checkPermissionsForRepoLegacy: ApiHeroEndpoint<
  { owner: string; teamId: number; repo: string },
  TeamRepository
> = {
  id: \\"teams/check-permissions-for-repo-legacy\\",
};

/** * @deprecated
 * Add or update team repository permissions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \\"[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)\\" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a \`422 Unprocessable Entity\` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 */
export const addOrUpdateRepoPermissionsLegacy: ApiHeroEndpoint<
  {
    owner: string;
    teamId: number;
    repo: string;
    body?: {
      /**
       * The permission to grant the team on this repository. If no permission is specified, the team's \`permission\` attribute will be used to determine what permission to grant the team on this repository.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\";
    };
  },
  void
> = {
  id: \\"teams/add-or-update-repo-permissions-legacy\\",
};

/** * @deprecated
 * Remove a repository from a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const removeRepoLegacy: ApiHeroEndpoint<
  { owner: string; teamId: number; repo: string },
  void
> = {
  id: \\"teams/remove-repo-legacy\\",
};

/**
 * List team projects
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/projects\`.
 */
export const listProjectsInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; page?: number; perPage?: number },
  Array<TeamProject>
> = {
  id: \\"teams/list-projects-in-org\\",
};

/** * @deprecated
 * Check team permissions for a project (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has \`read\`, \`write\`, or \`admin\` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const checkPermissionsForProjectLegacy: ApiHeroEndpoint<
  { teamId: number; projectId: number },
  TeamProject
> = {
  id: \\"teams/check-permissions-for-project-legacy\\",
};

/** * @deprecated
 * Add or update team project permissions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have \`admin\` permissions for the project. The project and team must be part of the same organization.
 */
export const addOrUpdateProjectPermissionsLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    projectId: number;
    body?: {
      /**
       * The permission to grant to the team for this project. Default: the team's \`permission\` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
       */
      permission?: \\"read\\" | \\"write\\" | \\"admin\\";
    };
  },
  void
> = {
  id: \\"teams/add-or-update-project-permissions-legacy\\",
};

/** * @deprecated
 * Remove a project from a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have \`read\` access to both the team and project, or \`admin\` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const removeProjectLegacy: ApiHeroEndpoint<{ teamId: number; projectId: number }, void> = {
  id: \\"teams/remove-project-legacy\\",
};

/** * @deprecated
 * Get team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:**
 * The response contains the \`state\` of the membership and the member's \`role\`.
 *
 * The \`role\` for organization owners is set to \`maintainer\`. For more information about \`maintainer\` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const getMembershipForUserLegacy: ApiHeroEndpoint<
  { username: string; teamId: number },
  TeamMembership
> = {
  id: \\"teams/get-membership-for-user-legacy\\",
};

/** * @deprecated
 * Add or update team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \\"pending\\" state until the user accepts the invitation, at which point the membership will transition to the \\"active\\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const addOrUpdateMembershipForUserLegacy: ApiHeroEndpoint<
  {
    username: string;
    teamId: number;
    body?: {
      /**
       * The role that this user should have in the team.
       */
      role?: \\"member\\" | \\"maintainer\\";
    };
  },
  TeamMembership
> = {
  id: \\"teams/add-or-update-membership-for-user-legacy\\",
};

/** * @deprecated
 * Remove team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 */
export const removeMembershipForUserLegacy: ApiHeroEndpoint<
  { username: string; teamId: number },
  void
> = {
  id: \\"teams/remove-membership-for-user-legacy\\",
};

/**
 * List discussions
 * List all discussions on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions\`.
 */
export const listDiscussionsInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
    pinned?: string;
  },
  Array<TeamDiscussion>
> = {
  id: \\"teams/list-discussions-in-org\\",
};

/**
 * Create a discussion
 * Creates a new discussion post on a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/{org_id}/team/{team_id}/discussions\`.
 */
export const createDiscussionInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    body: {
      /**
       * The discussion post's body text.
       */
      body: string;

      /**
       * The discussion post's title.
       */
      title: string;

      /**
       * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to \`true\` to create a private post.
       */
      private?: boolean;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/create-discussion-in-org\\",
};

/**
 * List pending team invitations
 * The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/invitations\`.
 */
export const listPendingInvitationsInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; page?: number; perPage?: number },
  Array<OrganizationInvitation>
> = {
  id: \\"teams/list-pending-invitations-in-org\\",
};

/** * @deprecated
 * List IdP groups for a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List IdP groups for a team\`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 */
export const listIdpGroupsForLegacy: ApiHeroEndpoint<{ teamId: number }, GroupMapping> = {
  id: \\"teams/list-idp-groups-for-legacy\\",
};

/** * @deprecated
 * Create or update IdP group connections (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create or update IdP group connections\`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty \`groups\` array will remove all connections for a team.
 */
export const createOrUpdateIdpGroupConnectionsLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    body: {
      /**
       * The IdP groups you want to connect to a GitHub team. When updating, the new \`groups\` object will replace the original one. You must include any existing groups that you don't want to remove.
       */
      groups: Array<{
        id?: string;

        name?: string;

        /**
         * ID of the IdP group.
         */
        group_id: string;

        /**
         * Name of the IdP group.
         */
        group_name: string;

        description?: string;

        /**
         * Description of the IdP group.
         */
        group_description: string;
      }>;

      synced_at?: string;
    };
  },
  GroupMapping
> = {
  id: \\"teams/create-or-update-idp-group-connections-legacy\\",
};

/**
 * List a connection between an external group and a team
 * Lists a connection between a team and an external group.
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const listLinkedExternalIdpGroupsToTeamForOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string },
  ExternalGroups
> = {
  id: \\"teams/list-linked-external-idp-groups-to-team-for-org\\",
};

/**
 * Remove the connection between an external group and a team
 * Deletes a connection between a team and an external group.
 *
 * You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const unlinkExternalIdpGroupFromTeamForOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string },
  void
> = {
  id: \\"teams/unlink-external-idp-group-from-team-for-org\\",
};

/**
 * Update the connection between an external group and a team
 * Creates a connection between a team and an external group.  Only one external group can be linked to a team.
 *
 * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \\"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\\" in the GitHub Help documentation.
 */
export const linkExternalIdpGroupToTeamForOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    body: {
      /**
       * External Group Id
       */
      group_id: number;
    };
  },
  ExternalGroup
> = {
  id: \\"teams/link-external-idp-group-to-team-for-org\\",
};

/** * @deprecated
 * Get a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getDiscussionLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number },
  TeamDiscussion
> = {
  id: \\"teams/get-discussion-legacy\\",
};

/** * @deprecated
 * Delete a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Delete a discussion\`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteDiscussionLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-legacy\\",
};

/** * @deprecated
 * Update a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const updateDiscussionLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    body?: {
      /**
       * The discussion post's body text.
       */
      body?: string;

      /**
       * The discussion post's title.
       */
      title?: string;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/update-discussion-legacy\\",
};

/**
 * Check team permissions for a repository
 * Checks whether a team has \`admin\`, \`push\`, \`maintain\`, \`triage\`, or \`pull\` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`application/vnd.github.v3.repository+json\` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a \`404 Not Found\` response status.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
 */
export const checkPermissionsForRepoInOrg: ApiHeroEndpoint<
  { owner: string; teamSlug: string; org: string; repo: string },
  TeamRepository
> = {
  id: \\"teams/check-permissions-for-repo-in-org\\",
};

/**
 * Add or update team repository permissions
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a \`422 Unprocessable Entity\` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
 *
 * For more information about the permission levels, see \\"[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\\".
 */
export const addOrUpdateRepoPermissionsInOrg: ApiHeroEndpoint<
  {
    owner: string;
    teamSlug: string;
    org: string;
    repo: string;
    body?: {
      /**
       * The permission to grant the team on this repository. In addition to the enumerated values, you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's \`permission\` attribute will be used to determine what permission to grant the team on this repository.
       */
      permission?: \\"pull\\" | \\"push\\" | \\"admin\\" | \\"maintain\\" | \\"triage\\";
    };
  },
  void
> = {
  id: \\"teams/add-or-update-repo-permissions-in-org\\",
};

/**
 * Remove a repository from a team
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
 */
export const removeRepoInOrg: ApiHeroEndpoint<
  { owner: string; teamSlug: string; org: string; repo: string },
  void
> = {
  id: \\"teams/remove-repo-in-org\\",
};

/**
 * Check team permissions for a project
 * Checks whether a team has \`read\`, \`write\`, or \`admin\` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
 */
export const checkPermissionsForProjectInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; projectId: number },
  TeamProject
> = {
  id: \\"teams/check-permissions-for-project-in-org\\",
};

/**
 * Add or update team project permissions
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have \`admin\` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
 */
export const addOrUpdateProjectPermissionsInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; projectId: number; body?: any | null },
  void
> = {
  id: \\"teams/add-or-update-project-permissions-in-org\\",
};

/**
 * Remove a project from a team
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have \`read\` access to both the team and project, or \`admin\` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
 */
export const removeProjectInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; projectId: number },
  void
> = {
  id: \\"teams/remove-project-in-org\\",
};

/**
 * Get team membership for a user
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
 *
 * **Note:**
 * The response contains the \`state\` of the membership and the member's \`role\`.
 *
 * The \`role\` for organization owners is set to \`maintainer\`. For more information about \`maintainer\` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const getMembershipForUserInOrg: ApiHeroEndpoint<
  { username: string; teamSlug: string; org: string },
  TeamMembership
> = {
  id: \\"teams/get-membership-for-user-in-org\\",
};

/**
 * Add or update team membership for a user
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \\"pending\\" state until the person accepts the invitation, at which point the membership will transition to the \\"active\\" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
 */
export const addOrUpdateMembershipForUserInOrg: ApiHeroEndpoint<
  {
    username: string;
    teamSlug: string;
    org: string;
    body?: {
      /**
       * The role that this user should have in the team.
       */
      role?: \\"member\\" | \\"maintainer\\";
    };
  },
  TeamMembership
> = {
  id: \\"teams/add-or-update-membership-for-user-in-org\\",
};

/**
 * Remove team membership for a user
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \\"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\\"
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
 */
export const removeMembershipForUserInOrg: ApiHeroEndpoint<
  { username: string; teamSlug: string; org: string },
  void
> = {
  id: \\"teams/remove-membership-for-user-in-org\\",
};

/**
 * List IdP groups for a team
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings\`.
 */
export const listIdpGroupsInOrg: ApiHeroEndpoint<{ teamSlug: string; org: string }, GroupMapping> =
  {
    id: \\"teams/list-idp-groups-in-org\\",
  };

/**
 * Create or update IdP group connections
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty \`groups\` array will remove all connections for a team.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings\`.
 */
export const createOrUpdateIdpGroupConnectionsInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    body: {
      /**
       * The IdP groups you want to connect to a GitHub team. When updating, the new \`groups\` object will replace the original one. You must include any existing groups that you don't want to remove.
       */
      groups?: Array<{
        /**
         * ID of the IdP group.
         */
        group_id: string;

        /**
         * Name of the IdP group.
         */
        group_name: string;

        /**
         * Description of the IdP group.
         */
        group_description: string;
      }>;
    };
  },
  GroupMapping
> = {
  id: \\"teams/create-or-update-idp-group-connections-in-org\\",
};

/** * @deprecated
 * List discussion comments (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listDiscussionCommentsLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
  },
  Array<TeamDiscussionComment>
> = {
  id: \\"teams/list-discussion-comments-legacy\\",
};

/** * @deprecated
 * Create a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 */
export const createDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/create-discussion-comment-legacy\\",
};

/**
 * Get a discussion
 * Get a specific discussion on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
 */
export const getDiscussionInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; discussionNumber: number },
  TeamDiscussion
> = {
  id: \\"teams/get-discussion-in-org\\",
};

/**
 * Delete a discussion
 * Delete a discussion from a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
 */
export const deleteDiscussionInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; discussionNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-in-org\\",
};

/**
 * Update a discussion
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
 */
export const updateDiscussionInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    body?: {
      /**
       * The discussion post's body text.
       */
      body?: string;

      /**
       * The discussion post's title.
       */
      title?: string;
    };
  },
  TeamDiscussion
> = {
  id: \\"teams/update-discussion-in-org\\",
};

/**
 * List discussion comments
 * List all comments on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments\`.
 */
export const listDiscussionCommentsInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    page?: number;
    direction?: \\"asc\\" | \\"desc\\";
    perPage?: number;
  },
  Array<TeamDiscussionComment>
> = {
  id: \\"teams/list-discussion-comments-in-org\\",
};

/**
 * Create a discussion comment
 * Creates a new comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \\"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\\" and \\"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\\" for details.
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments\`.
 */
export const createDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/create-discussion-comment-in-org\\",
};

/** * @deprecated
 * Get a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getDiscussionCommentLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number; commentNumber: number },
  TeamDiscussionComment
> = {
  id: \\"teams/get-discussion-comment-legacy\\",
};

/** * @deprecated
 * Delete a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteDiscussionCommentLegacy: ApiHeroEndpoint<
  { teamId: number; discussionNumber: number; commentNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-comment-legacy\\",
};

/** * @deprecated
 * Update a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const updateDiscussionCommentLegacy: ApiHeroEndpoint<
  {
    teamId: number;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/update-discussion-comment-legacy\\",
};

/**
 * Get a discussion comment
 * Get a specific comment on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
 */
export const getDiscussionCommentInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; discussionNumber: number; commentNumber: number },
  TeamDiscussionComment
> = {
  id: \\"teams/get-discussion-comment-in-org\\",
};

/**
 * Delete a discussion comment
 * Deletes a comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
 */
export const deleteDiscussionCommentInOrg: ApiHeroEndpoint<
  { teamSlug: string; org: string; discussionNumber: number; commentNumber: number },
  void
> = {
  id: \\"teams/delete-discussion-comment-in-org\\",
};

/**
 * Update a discussion comment
 * Edits the body text of a discussion comment. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
 */
export const updateDiscussionCommentInOrg: ApiHeroEndpoint<
  {
    teamSlug: string;
    org: string;
    discussionNumber: number;
    commentNumber: number;
    body: {
      /**
       * The discussion comment's body text.
       */
      body: string;
    };
  },
  TeamDiscussionComment
> = {
  id: \\"teams/update-discussion-comment-in-org\\",
};
",
  "users.ts" => "import {
  Email,
  GpgKey,
  Hovercard,
  Key,
  KeySimple,
  PrivateUser,
  PublicUser,
  SimpleUser,
  ApiHeroEndpoint,
} from \\"./@types\\";

/**
 * Get the authenticated user
 * If the authenticated user is authenticated through basic authentication or OAuth with the \`user\` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the \`user\` scope, then the response lists only public profile information.
 */
export const getAuthenticated: ApiHeroEndpoint<never, PrivateUser | PublicUser> = {
  id: \\"users/get-authenticated\\",
};

/**
 * Update the authenticated user
 * **Note:** If your email is set to private and you send an \`email\` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const updateAuthenticated: ApiHeroEndpoint<
  {
    body?: {
      /**
       * The new short biography of the user.
       */
      bio?: string;

      /**
       * The new blog URL of the user.
       */
      blog?: string;

      /**
       * The new name of the user.
       */
      name?: string;

      /**
       * The publicly visible email address of the user.
       */
      email?: string;

      /**
       * The new company of the user.
       */
      company?: string;

      /**
       * The new hiring availability of the user.
       */
      hireable?: boolean;

      /**
       * The new location of the user.
       */
      location?: string;

      /**
       * The new Twitter username of the user.
       */
      twitter_username?: string;
    };
  },
  PrivateUser
> = {
  id: \\"users/update-authenticated\\",
};

/**
 * List users
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const list: ApiHeroEndpoint<{ since?: number; perPage?: number }, Array<SimpleUser>> = {
  id: \\"users/list\\",
};

/**
 * List public SSH keys for the authenticated user
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listPublicSshKeysForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<Key>
> = {
  id: \\"users/list-public-ssh-keys-for-authenticated-user\\",
};

/**
 * Create a public SSH key for the authenticated user
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least \`write:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const createPublicSshKeyForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * The public SSH key to add to your GitHub account.
       */
      key: string;

      /**
       * A descriptive name for the new key.
       */
      title?: string;
    };
  },
  Key
> = {
  id: \\"users/create-public-ssh-key-for-authenticated-user\\",
};

/**
 * List users blocked by the authenticated user
 * List the users you've blocked on your personal account.
 */
export const listBlockedByAuthenticatedUser: ApiHeroEndpoint<never, Array<SimpleUser>> = {
  id: \\"users/list-blocked-by-authenticated-user\\",
};

/**
 * List email addresses for the authenticated user
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the \`user:email\` scope.
 */
export const listEmailsForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<Email>
> = {
  id: \\"users/list-emails-for-authenticated-user\\",
};

/**
 * Add an email address for the authenticated user
 * This endpoint is accessible with the \`user\` scope.
 */
export const addEmailForAuthenticatedUser: ApiHeroEndpoint<
  {
    body?:
      | {
          /**
           * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an \`array\` of emails addresses directly, but we recommend that you pass an object using the \`emails\` key.
           */
          emails: Array<string>;
        }
      | Array<string>
      | string;
  },
  Array<Email>
> = {
  id: \\"users/add-email-for-authenticated-user\\",
};

/**
 * Delete an email address for the authenticated user
 * This endpoint is accessible with the \`user\` scope.
 */
export const deleteEmailForAuthenticatedUser: ApiHeroEndpoint<
  {
    body?:
      | {
          /**
           * Email addresses associated with the GitHub user account.
           */
          emails: Array<string>;
        }
      | Array<string>
      | string;
  },
  void
> = {
  id: \\"users/delete-email-for-authenticated-user\\",
};

/**
 * List GPG keys for the authenticated user
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const listGpgKeysForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<GpgKey>
> = {
  id: \\"users/list-gpg-keys-for-authenticated-user\\",
};

/**
 * Create a GPG key for the authenticated user
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least \`write:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const createGpgKeyForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * A descriptive name for the new key.
       */
      name?: string;

      /**
       * A GPG key in ASCII-armored format.
       */
      armored_public_key: string;
    };
  },
  GpgKey
> = {
  id: \\"users/create-gpg-key-for-authenticated-user\\",
};

/**
 * List followers of the authenticated user
 * Lists the people following the authenticated user.
 */
export const listFollowersForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-followers-for-authenticated-user\\",
};

/**
 * List the people the authenticated user follows
 * Lists the people who the authenticated user follows.
 */
export const listFollowedByAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-followed-by-authenticated-user\\",
};

/**
 * Get a user
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the \`Plan\` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See \\"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\\" for details about authentication. For an example response, see 'Response with GitHub plan information' below\\"
 *
 * The \`email\` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for \`email\`, then it will have a value of \`null\`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \\"[Emails API](https://docs.github.com/rest/reference/users#emails)\\".
 */
export const getByUsername: ApiHeroEndpoint<{ username: string }, PrivateUser | PublicUser> = {
  id: \\"users/get-by-username\\",
};

/**
 * Get a public SSH key for the authenticated user
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getPublicSshKeyForAuthenticatedUser: ApiHeroEndpoint<{ keyId: number }, Key> = {
  id: \\"users/get-public-ssh-key-for-authenticated-user\\",
};

/**
 * Delete a public SSH key for the authenticated user
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`admin:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deletePublicSshKeyForAuthenticatedUser: ApiHeroEndpoint<{ keyId: number }, void> = {
  id: \\"users/delete-public-ssh-key-for-authenticated-user\\",
};

/**
 * List public email addresses for the authenticated user
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the \`user:email\` scope.
 */
export const listPublicEmailsForAuthenticatedUser: ApiHeroEndpoint<
  { page?: number; perPage?: number },
  Array<Email>
> = {
  id: \\"users/list-public-emails-for-authenticated-user\\",
};

/**
 * Set primary email visibility for the authenticated user
 * Sets the visibility for your primary email addresses.
 */
export const setPrimaryEmailVisibilityForAuthenticatedUser: ApiHeroEndpoint<
  {
    body: {
      /**
       * Denotes whether an email is publicly visible.
       */
      visibility: \\"public\\" | \\"private\\";
    };
  },
  Array<Email>
> = {
  id: \\"users/set-primary-email-visibility-for-authenticated-user\\",
};

/**
 * List public keys for a user
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const listPublicKeysForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<KeySimple>
> = {
  id: \\"users/list-public-keys-for-user\\",
};

/**
 * Check if a user is blocked by the authenticated user
 */
export const checkBlocked: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/check-blocked\\",
};

/**
 * Block a user
 */
export const block: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/block\\",
};

/**
 * Unblock a user
 */
export const unblock: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/unblock\\",
};

/**
 * Check if a person is followed by the authenticated user
 */
export const checkPersonIsFollowedByAuthenticated: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/check-person-is-followed-by-authenticated\\",
};

/**
 * Follow a user
 * Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\\"
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the \`user:follow\` scope.
 */
export const follow: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/follow\\",
};

/**
 * Unfollow a user
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the \`user:follow\` scope.
 */
export const unfollow: ApiHeroEndpoint<{ username: string }, void> = {
  id: \\"users/unfollow\\",
};

/**
 * List GPG keys for a user
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const listGpgKeysForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<GpgKey>
> = {
  id: \\"users/list-gpg-keys-for-user\\",
};

/**
 * Get a GPG key for the authenticated user
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getGpgKeyForAuthenticatedUser: ApiHeroEndpoint<{ gpgKeyId: number }, GpgKey> = {
  id: \\"users/get-gpg-key-for-authenticated-user\\",
};

/**
 * Delete a GPG key for the authenticated user
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`admin:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteGpgKeyForAuthenticatedUser: ApiHeroEndpoint<{ gpgKeyId: number }, void> = {
  id: \\"users/delete-gpg-key-for-authenticated-user\\",
};

/**
 * List followers of a user
 * Lists the people following the specified user.
 */
export const listFollowersForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-followers-for-user\\",
};

/**
 * List the people a user follows
 * Lists the people who the specified user follows.
 */
export const listFollowingForUser: ApiHeroEndpoint<
  { username: string; page?: number; perPage?: number },
  Array<SimpleUser>
> = {
  id: \\"users/list-following-for-user\\",
};

/**
 * Get contextual information for a user
 * Provides hovercard information when authenticated through basic auth or OAuth with the \`repo\` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The \`subject_type\` and \`subject_id\` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about \`octocat\` who owns the \`Spoon-Knife\` repository via cURL, it would look like this:
 *
 * \`\`\`shell
 * curl -u username:token
 * https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * \`\`\`
 */
export const getContextForUser: ApiHeroEndpoint<
  {
    username: string;
    subjectId?: string;
    subjectType?: \\"organization\\" | \\"repository\\" | \\"issue\\" | \\"pull_request\\";
  },
  Hovercard
> = {
  id: \\"users/get-context-for-user\\",
};

/**
 * Check if a user follows another user
 */
export const checkFollowingForUser: ApiHeroEndpoint<
  { username: string; targetUser: string },
  void
> = {
  id: \\"users/check-following-for-user\\",
};
",
  "index.ts" => "import * as actions from \\"./actions\\";
import * as activity from \\"./activity\\";
import * as apps from \\"./apps\\";
import * as billing from \\"./billing\\";
import * as checks from \\"./checks\\";
import * as codeScanning from \\"./code-scanning\\";
import * as codesOfConduct from \\"./codes-of-conduct\\";
import * as codespaces from \\"./codespaces\\";
import * as emojis from \\"./emojis\\";
import * as enterpriseAdmin from \\"./enterprise-admin\\";
import * as dependabot from \\"./dependabot\\";
import * as dependencyGraph from \\"./dependency-graph\\";
import * as gists from \\"./gists\\";
import * as git from \\"./git\\";
import * as gitignore from \\"./gitignore\\";
import * as interactions from \\"./interactions\\";
import * as issues from \\"./issues\\";
import * as licenses from \\"./licenses\\";
import * as markdown from \\"./markdown\\";
import * as mergeQueue from \\"./merge-queue\\";
import * as meta from \\"./meta\\";
import * as migrations from \\"./migrations\\";
import * as oauthAuthorizations from \\"./oauth-authorizations\\";
import * as oidc from \\"./oidc\\";
import * as orgs from \\"./orgs\\";
import * as packages from \\"./packages\\";
import * as projects from \\"./projects\\";
import * as pulls from \\"./pulls\\";
import * as rateLimit from \\"./rate-limit\\";
import * as reactions from \\"./reactions\\";
import * as repos from \\"./repos\\";
import * as scim from \\"./scim\\";
import * as search from \\"./search\\";
import * as secretScanning from \\"./secret-scanning\\";
import * as serverStatistics from \\"./server-statistics\\";
import * as teams from \\"./teams\\";
import * as users from \\"./users\\";

export {
  actions,
  activity,
  apps,
  billing,
  checks,
  codeScanning,
  codesOfConduct,
  codespaces,
  emojis,
  enterpriseAdmin,
  dependabot,
  dependencyGraph,
  gists,
  git,
  gitignore,
  interactions,
  issues,
  licenses,
  markdown,
  mergeQueue,
  meta,
  migrations,
  oauthAuthorizations,
  oidc,
  orgs,
  packages,
  projects,
  pulls,
  rateLimit,
  reactions,
  repos,
  scim,
  search,
  secretScanning,
  serverStatistics,
  teams,
  users,
};

export * from \\"./@types\\";
",
}
`;
